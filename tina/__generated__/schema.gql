# DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
"""References another document, used as a foreign key"""
scalar Reference

""""""
scalar JSON

type SystemInfo {
  filename: String!
  title: String
  basename: String!
  hasReferences: Boolean
  breadcrumbs(excludeExtension: Boolean): [String!]!
  path: String!
  relativePath: String!
  extension: String!
  template: String!
  collection: Collection!
}

type Folder {
  name: String!
  path: String!
}

type PageInfo {
  hasPreviousPage: Boolean!
  hasNextPage: Boolean!
  startCursor: String!
  endCursor: String!
}

""""""
interface Node {
  id: ID!
}

""""""
interface Document {
  id: ID!
  _sys: SystemInfo
  _values: JSON!
}

"""A relay-compliant pagination connection"""
interface Connection {
  totalCount: Float!
  pageInfo: PageInfo!
}

type Query {
  getOptimizedQuery(queryString: String!): String
  collection(collection: String): Collection!
  collections: [Collection!]!
  node(id: String): Node!
  document(collection: String, relativePath: String): DocumentNode!
  blog(relativePath: String): Blog!
  blogConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: BlogFilter): BlogConnection!
  newsletter(relativePath: String): Newsletter!
  newsletterConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: NewsletterFilter): NewsletterConnection!
  allTopicsPage(relativePath: String): AllTopicsPage!
  allTopicsPageConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AllTopicsPageFilter): AllTopicsPageConnection!
  podcast(relativePath: String): Podcast!
  podcastConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PodcastFilter): PodcastConnection!
  contact(relativePath: String): Contact!
  contactConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: ContactFilter): ContactConnection!
  legal(relativePath: String): Legal!
  legalConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: LegalFilter): LegalConnection!
  pages(relativePath: String): Pages!
  pagesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: PagesFilter): PagesConnection!
  categories(relativePath: String): Categories!
  categoriesConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: CategoriesFilter): CategoriesConnection!
  authors(relativePath: String): Authors!
  authorsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: AuthorsFilter): AuthorsConnection!
  settings(relativePath: String): Settings!
  settingsConnection(before: String, after: String, first: Float, last: Float, sort: String, filter: SettingsFilter): SettingsConnection!
}

input DocumentFilter {
  blog: BlogFilter
  newsletter: NewsletterFilter
  allTopicsPage: AllTopicsPageFilter
  podcast: PodcastFilter
  contact: ContactFilter
  legal: LegalFilter
  pages: PagesFilter
  categories: CategoriesFilter
  authors: AuthorsFilter
  settings: SettingsFilter
}

type DocumentConnectionEdges {
  cursor: String!
  node: DocumentNode
}

type DocumentConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [DocumentConnectionEdges]
}

type Collection {
  name: String!
  slug: String!
  label: String
  path: String!
  format: String
  matches: String
  templates: [JSON]
  fields: [JSON]
  documents(before: String, after: String, first: Float, last: Float, sort: String, filter: DocumentFilter, folder: String): DocumentConnection!
}

union DocumentNode = Blog | Newsletter | AllTopicsPage | Podcast | Contact | Legal | Pages | Categories | Authors | Settings | Folder

type BlogEditorial {
  status: String
  assignedEditor: String
  editorNotes: String
}

type BlogAuthorInfoSocial {
  twitter: String
  linkedin: String
  github: String
  website: String
}

type BlogAuthorInfo {
  name: String!
  bio: String
  avatar: String
  role: String
  social: BlogAuthorInfoSocial
}

type BlogHeroImage {
  imageType: String!
  uploadedImage: String
  externalUrl: String
  alt: String!
  caption: String
}

type BlogSeo {
  customSEO: Boolean
  title: String
  description: String
  canonical: String
  noindex: Boolean
}

type Blog implements Node & Document {
  editorial: BlogEditorial
  title: String!
  excerpt: String!
  pubDate: String!
  updatedDate: String
  authorInfo: BlogAuthorInfo
  heroImage: BlogHeroImage
  image: String
  imageAlt: String
  category: String!
  storyType: String
  tags: [String]
  featured: Boolean
  trending: Boolean
  draft: Boolean
  readTime: String
  hasAudio: Boolean
  audioUrl: String
  audioDuration: String
  audioTranscript: String
  seo: BlogSeo
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input StringFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BlogEditorialFilter {
  status: StringFilter
  assignedEditor: StringFilter
  editorNotes: StringFilter
}

input DatetimeFilter {
  after: String
  before: String
  eq: String
  exists: Boolean
  in: [String]
}

input ImageFilter {
  startsWith: String
  eq: String
  exists: Boolean
  in: [String]
}

input BlogAuthorInfoSocialFilter {
  twitter: StringFilter
  linkedin: StringFilter
  github: StringFilter
  website: StringFilter
}

input BlogAuthorInfoFilter {
  name: StringFilter
  bio: StringFilter
  avatar: ImageFilter
  role: StringFilter
  social: BlogAuthorInfoSocialFilter
}

input BlogHeroImageFilter {
  imageType: StringFilter
  uploadedImage: ImageFilter
  externalUrl: StringFilter
  alt: StringFilter
  caption: StringFilter
}

input BooleanFilter {
  eq: Boolean
  exists: Boolean
}

input BlogSeoFilter {
  customSEO: BooleanFilter
  title: StringFilter
  description: StringFilter
  canonical: StringFilter
  noindex: BooleanFilter
}

input BlogBodyNewsletterFilter {
  variant: StringFilter
  title: StringFilter
  description: StringFilter
  buttonText: StringFilter
  showFeatures: BooleanFilter
  features: StringFilter
}

input BlogBodyImageBlockFilter {
  sourceType: StringFilter
  uploadedImage: ImageFilter
  externalUrl: StringFilter
  alt: StringFilter
  caption: StringFilter
  size: StringFilter
  enableLightbox: BooleanFilter
}

input BlogBodyVideoBlockFilter {
  platform: StringFilter
  url: StringFilter
  title: StringFilter
  description: StringFilter
  aspectRatio: StringFilter
  startTime: StringFilter
}

input BlogBodyCalloutFilter {
  type: StringFilter
  customColor: StringFilter
  title: StringFilter
  content: StringFilter
  dismissible: BooleanFilter
}

input BlogBodyCodeBlockFilter {
  language: StringFilter
  customLanguage: StringFilter
  filename: StringFilter
  code: StringFilter
  showLineNumbers: BooleanFilter
  highlightLines: StringFilter
}

input BlogBodyQuoteFilter {
  quote: StringFilter
  author: StringFilter
  role: StringFilter
  company: StringFilter
  avatar: StringFilter
  style: StringFilter
  citation: StringFilter
}

input BlogBodyButtonBlockFilter {
  text: StringFilter
  url: StringFilter
  style: StringFilter
  customColor: StringFilter
  size: StringFilter
  alignment: StringFilter
  openInNewTab: BooleanFilter
  icon: StringFilter
  iconPosition: StringFilter
}

input BlogBodyTableBlockRowsFilter {
  cells: StringFilter
}

input BlogBodyTableBlockFilter {
  caption: StringFilter
  hasHeaders: BooleanFilter
  headers: StringFilter
  rows: BlogBodyTableBlockRowsFilter
  style: StringFilter
  sortable: BooleanFilter
}

input RichTextFilter {
  startsWith: String
  eq: String
  exists: Boolean
}

input BlogBodyTwoColumnLayoutFilter {
  variant: StringFilter
  customRatio: StringFilter
  leftContent: RichTextFilter
  rightContent: RichTextFilter
  gap: StringFilter
  stackOnMobile: BooleanFilter
}

input NumberFilter {
  lt: Float
  lte: Float
  gte: Float
  gt: Float
  eq: Float
  exists: Boolean
  in: [Float]
}

input BlogBodyImageGalleryImagesFilter {
  src: ImageFilter
  alt: StringFilter
  caption: StringFilter
}

input BlogBodyImageGalleryFilter {
  caption: StringFilter
  layout: StringFilter
  autoplay: BooleanFilter
  autoplaySpeed: NumberFilter
  images: BlogBodyImageGalleryImagesFilter
}

input BlogBodyFilter {
  Newsletter: BlogBodyNewsletterFilter
  ImageBlock: BlogBodyImageBlockFilter
  VideoBlock: BlogBodyVideoBlockFilter
  Callout: BlogBodyCalloutFilter
  CodeBlock: BlogBodyCodeBlockFilter
  Quote: BlogBodyQuoteFilter
  ButtonBlock: BlogBodyButtonBlockFilter
  TableBlock: BlogBodyTableBlockFilter
  TwoColumnLayout: BlogBodyTwoColumnLayoutFilter
  ImageGallery: BlogBodyImageGalleryFilter
}

input BlogFilter {
  editorial: BlogEditorialFilter
  title: StringFilter
  excerpt: StringFilter
  pubDate: DatetimeFilter
  updatedDate: DatetimeFilter
  authorInfo: BlogAuthorInfoFilter
  heroImage: BlogHeroImageFilter
  image: ImageFilter
  imageAlt: StringFilter
  category: StringFilter
  storyType: StringFilter
  tags: StringFilter
  featured: BooleanFilter
  trending: BooleanFilter
  draft: BooleanFilter
  readTime: StringFilter
  hasAudio: BooleanFilter
  audioUrl: StringFilter
  audioDuration: StringFilter
  audioTranscript: StringFilter
  seo: BlogSeoFilter
  body: BlogBodyFilter
}

type BlogConnectionEdges {
  cursor: String!
  node: Blog
}

type BlogConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [BlogConnectionEdges]
}

type NewsletterHighlights {
  title: String!
  description: String
  link: String
}

type NewsletterStats {
  subscribers: Float
  openRate: Float
  clickRate: Float
}

type NewsletterSeo {
  title: String
  description: String
}

type Newsletter implements Node & Document {
  title: String!
  issueNumber: Float!
  newsletterType: String!
  excerpt: String!
  subscriberOnly: Boolean
  previewContent: String
  publishDate: String!
  status: String
  featured: Boolean
  coverImage: String
  highlights: [NewsletterHighlights]
  trackStats: Boolean
  stats: NewsletterStats
  tags: [String]
  seo: NewsletterSeo
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input NewsletterHighlightsFilter {
  title: StringFilter
  description: StringFilter
  link: StringFilter
}

input NewsletterStatsFilter {
  subscribers: NumberFilter
  openRate: NumberFilter
  clickRate: NumberFilter
}

input NewsletterSeoFilter {
  title: StringFilter
  description: StringFilter
}

input NewsletterBodyNewsletterSectionFilter {
  title: StringFilter
  icon: StringFilter
  content: RichTextFilter
}

input NewsletterBodyArticleHighlightFilter {
  title: StringFilter
  url: StringFilter
  excerpt: StringFilter
  author: StringFilter
  readTime: StringFilter
}

input NewsletterBodyFilter {
  NewsletterSection: NewsletterBodyNewsletterSectionFilter
  ArticleHighlight: NewsletterBodyArticleHighlightFilter
}

input NewsletterFilter {
  title: StringFilter
  issueNumber: NumberFilter
  newsletterType: StringFilter
  excerpt: StringFilter
  subscriberOnly: BooleanFilter
  previewContent: StringFilter
  publishDate: DatetimeFilter
  status: StringFilter
  featured: BooleanFilter
  coverImage: ImageFilter
  highlights: NewsletterHighlightsFilter
  trackStats: BooleanFilter
  stats: NewsletterStatsFilter
  tags: StringFilter
  seo: NewsletterSeoFilter
  body: NewsletterBodyFilter
}

type NewsletterConnectionEdges {
  cursor: String!
  node: Newsletter
}

type NewsletterConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [NewsletterConnectionEdges]
}

type AllTopicsPageHero {
  badgeText: String!
  title: String!
  titleAccent: String!
  subtitle: String!
}

type AllTopicsPageTopics {
  name: String!
  href: String!
  description: String!
  audience: String!
}

type AllTopicsPageStats {
  topicCount: Float
  articleCount: String
  storiesLabel: String
}

type AllTopicsPageCta {
  title: String!
  description: String!
  primaryButtonText: String!
  primaryButtonLink: String!
  secondaryButtonText: String!
  secondaryButtonLink: String!
}

type AllTopicsPage implements Node & Document {
  hero: AllTopicsPageHero
  topics: [AllTopicsPageTopics]
  stats: AllTopicsPageStats
  cta: AllTopicsPageCta
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AllTopicsPageHeroFilter {
  badgeText: StringFilter
  title: StringFilter
  titleAccent: StringFilter
  subtitle: StringFilter
}

input AllTopicsPageTopicsFilter {
  name: StringFilter
  href: StringFilter
  description: StringFilter
  audience: StringFilter
}

input AllTopicsPageStatsFilter {
  topicCount: NumberFilter
  articleCount: StringFilter
  storiesLabel: StringFilter
}

input AllTopicsPageCtaFilter {
  title: StringFilter
  description: StringFilter
  primaryButtonText: StringFilter
  primaryButtonLink: StringFilter
  secondaryButtonText: StringFilter
  secondaryButtonLink: StringFilter
}

input AllTopicsPageFilter {
  hero: AllTopicsPageHeroFilter
  topics: AllTopicsPageTopicsFilter
  stats: AllTopicsPageStatsFilter
  cta: AllTopicsPageCtaFilter
}

type AllTopicsPageConnectionEdges {
  cursor: String!
  node: AllTopicsPage
}

type AllTopicsPageConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AllTopicsPageConnectionEdges]
}

type PodcastGuestsSocial {
  twitter: String
  linkedin: String
}

type PodcastGuests {
  name: String!
  role: String
  company: String
  bio: String
  photo: String
  social: PodcastGuestsSocial
}

type PodcastSeo {
  title: String
  description: String
  canonical: String
}

type Podcast implements Node & Document {
  title: String!
  episode: Float!
  description: String!
  pubDate: String!
  status: String
  duration: String!
  audioUrl: String
  downloadable: Boolean
  image: String
  guests: [PodcastGuests]
  tags: [String]
  featured: Boolean
  transcript: String
  seo: PodcastSeo
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PodcastGuestsSocialFilter {
  twitter: StringFilter
  linkedin: StringFilter
}

input PodcastGuestsFilter {
  name: StringFilter
  role: StringFilter
  company: StringFilter
  bio: StringFilter
  photo: ImageFilter
  social: PodcastGuestsSocialFilter
}

input PodcastSeoFilter {
  title: StringFilter
  description: StringFilter
  canonical: StringFilter
}

input PodcastFilter {
  title: StringFilter
  episode: NumberFilter
  description: StringFilter
  pubDate: DatetimeFilter
  status: StringFilter
  duration: StringFilter
  audioUrl: StringFilter
  downloadable: BooleanFilter
  image: ImageFilter
  guests: PodcastGuestsFilter
  tags: StringFilter
  featured: BooleanFilter
  transcript: StringFilter
  seo: PodcastSeoFilter
  body: RichTextFilter
}

type PodcastConnectionEdges {
  cursor: String!
  node: Podcast
}

type PodcastConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PodcastConnectionEdges]
}

type ContactHero {
  title: String
  titleAccent: String
  subtitle: String
  responseTime: String
  badgeText: String
}

type ContactContactMethods {
  title: String!
  description: String
  email: String!
  icon: String
  color: String
  featured: Boolean
}

type ContactSocialLinks {
  name: String!
  url: String!
  icon: String
  color: String
  showInContact: Boolean
}

type ContactFaqItems {
  question: String!
  answer: JSON!
  category: String
  featured: Boolean
}

type ContactFaq {
  enabled: Boolean
  title: String
  titleAccent: String
  subtitle: String
  items: [ContactFaqItems]
}

type ContactCtaPrimaryButton {
  text: String
  link: String
}

type ContactCtaSecondaryButton {
  text: String
  link: String
}

type ContactCta {
  title: String
  titleAccent: String
  subtitle: String
  primaryButton: ContactCtaPrimaryButton
  secondaryButton: ContactCtaSecondaryButton
}

type ContactSeo {
  title: String
  description: String
  canonical: String
  noindex: Boolean
}

type Contact implements Node & Document {
  title: String!
  description: String
  pubDate: String
  hero: ContactHero
  contactMethods: [ContactContactMethods]
  socialLinks: [ContactSocialLinks]
  faq: ContactFaq
  cta: ContactCta
  seo: ContactSeo
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input ContactHeroFilter {
  title: StringFilter
  titleAccent: StringFilter
  subtitle: StringFilter
  responseTime: StringFilter
  badgeText: StringFilter
}

input ContactContactMethodsFilter {
  title: StringFilter
  description: StringFilter
  email: StringFilter
  icon: StringFilter
  color: StringFilter
  featured: BooleanFilter
}

input ContactSocialLinksFilter {
  name: StringFilter
  url: StringFilter
  icon: StringFilter
  color: StringFilter
  showInContact: BooleanFilter
}

input ContactFaqItemsAnswerLinkFilter {
  url: StringFilter
  text: StringFilter
}

input ContactFaqItemsAnswerFilter {
  link: ContactFaqItemsAnswerLinkFilter
}

input ContactFaqItemsFilter {
  question: StringFilter
  answer: ContactFaqItemsAnswerFilter
  category: StringFilter
  featured: BooleanFilter
}

input ContactFaqFilter {
  enabled: BooleanFilter
  title: StringFilter
  titleAccent: StringFilter
  subtitle: StringFilter
  items: ContactFaqItemsFilter
}

input ContactCtaPrimaryButtonFilter {
  text: StringFilter
  link: StringFilter
}

input ContactCtaSecondaryButtonFilter {
  text: StringFilter
  link: StringFilter
}

input ContactCtaFilter {
  title: StringFilter
  titleAccent: StringFilter
  subtitle: StringFilter
  primaryButton: ContactCtaPrimaryButtonFilter
  secondaryButton: ContactCtaSecondaryButtonFilter
}

input ContactSeoFilter {
  title: StringFilter
  description: StringFilter
  canonical: StringFilter
  noindex: BooleanFilter
}

input ContactFilter {
  title: StringFilter
  description: StringFilter
  pubDate: DatetimeFilter
  hero: ContactHeroFilter
  contactMethods: ContactContactMethodsFilter
  socialLinks: ContactSocialLinksFilter
  faq: ContactFaqFilter
  cta: ContactCtaFilter
  seo: ContactSeoFilter
  body: RichTextFilter
}

type ContactConnectionEdges {
  cursor: String!
  node: Contact
}

type ContactConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [ContactConnectionEdges]
}

type LegalContact {
  email: String
  address: String
  phone: String
}

type LegalSeo {
  title: String
  description: String
  noindex: Boolean
}

type Legal implements Node & Document {
  title: String!
  description: String!
  pubDate: String!
  updatedDate: String
  effectiveDate: String
  pageType: String
  contact: LegalContact
  seo: LegalSeo
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input LegalContactFilter {
  email: StringFilter
  address: StringFilter
  phone: StringFilter
}

input LegalSeoFilter {
  title: StringFilter
  description: StringFilter
  noindex: BooleanFilter
}

input LegalBodySectionFilter {
  title: StringFilter
  content: RichTextFilter
}

input LegalBodyContactInfoFilter {
  title: StringFilter
  email: StringFilter
  address: StringFilter
}

input LegalBodyFilter {
  section: LegalBodySectionFilter
  contactInfo: LegalBodyContactInfoFilter
}

input LegalFilter {
  title: StringFilter
  description: StringFilter
  pubDate: DatetimeFilter
  updatedDate: DatetimeFilter
  effectiveDate: StringFilter
  pageType: StringFilter
  contact: LegalContactFilter
  seo: LegalSeoFilter
  body: LegalBodyFilter
}

type LegalConnectionEdges {
  cursor: String!
  node: Legal
}

type LegalConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [LegalConnectionEdges]
}

type PagesHero {
  title: String
  subtitle: String
  image: String
}

type PagesSeo {
  title: String
  description: String
  canonical: String
  noindex: Boolean
}

type Pages implements Node & Document {
  title: String!
  description: String!
  pubDate: String!
  updatedDate: String
  layout: String
  hero: PagesHero
  seo: PagesSeo
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input PagesHeroFilter {
  title: StringFilter
  subtitle: StringFilter
  image: ImageFilter
}

input PagesSeoFilter {
  title: StringFilter
  description: StringFilter
  canonical: StringFilter
  noindex: BooleanFilter
}

input PagesFilter {
  title: StringFilter
  description: StringFilter
  pubDate: DatetimeFilter
  updatedDate: DatetimeFilter
  layout: StringFilter
  hero: PagesHeroFilter
  seo: PagesSeoFilter
  body: RichTextFilter
}

type PagesConnectionEdges {
  cursor: String!
  node: Pages
}

type PagesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [PagesConnectionEdges]
}

type CategoriesSeo {
  title: String
  description: String
}

type Categories implements Node & Document {
  name: String!
  slug: String!
  description: String!
  theme: String!
  icon: String!
  color: String!
  featured: Boolean
  sortOrder: Float
  seo: CategoriesSeo
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input CategoriesSeoFilter {
  title: StringFilter
  description: StringFilter
}

input CategoriesFilter {
  name: StringFilter
  slug: StringFilter
  description: StringFilter
  theme: StringFilter
  icon: StringFilter
  color: StringFilter
  featured: BooleanFilter
  sortOrder: NumberFilter
  seo: CategoriesSeoFilter
  body: RichTextFilter
}

type CategoriesConnectionEdges {
  cursor: String!
  node: Categories
}

type CategoriesConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [CategoriesConnectionEdges]
}

type AuthorsSocial {
  twitter: String
  linkedin: String
  github: String
  website: String
}

type Authors implements Node & Document {
  name: String!
  bio: String
  avatar: String
  role: String
  company: String
  email: String
  social: AuthorsSocial
  featured: Boolean
  body: JSON
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input AuthorsSocialFilter {
  twitter: StringFilter
  linkedin: StringFilter
  github: StringFilter
  website: StringFilter
}

input AuthorsFilter {
  name: StringFilter
  bio: StringFilter
  avatar: ImageFilter
  role: StringFilter
  company: StringFilter
  email: StringFilter
  social: AuthorsSocialFilter
  featured: BooleanFilter
  body: RichTextFilter
}

type AuthorsConnectionEdges {
  cursor: String!
  node: Authors
}

type AuthorsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [AuthorsConnectionEdges]
}

type SettingsSiteGiscus {
  repo: String
  repoId: String
  category: String
  categoryId: String
  mapping: String
  reactionsEnabled: Boolean
  emitMetadata: Boolean
  inputPosition: String
  lang: String
  loading: String
}

type SettingsSite {
  name: String!
  description: String
  url: String
  logo: String
  giscus: SettingsSiteGiscus
}

type SettingsCategoriesCategoryMappings {
  name: String
  slug: String
  color: String
  description: String
  icon: String
  theme: String
}

type SettingsCategories {
  defaultColor: String
  categoryMappings: [SettingsCategoriesCategoryMappings]
}

type SettingsUiText {
  audioAvailableLabel: String
  audioTitle: String
  audioSubtitle: String
  noAudioText: String
  byAuthorPrefix: String
  aboutAuthorTitle: String
  shareLabel: String
  shareArticleTitle: String
  continueReadingTitle: String
  continueReadingSubtitle: String
  previousArticleLabel: String
  nextArticleLabel: String
  reachedBeginningText: String
  readAllText: String
  browseAllArticlesText: String
  tocTitle: String
  topicsTitle: String
  readingProgressTitle: String
  imageCreditText: String
  readingTimePrefix: String
  defaultCategoryLabel: String
  discussionTitle: String
  discussionSubtitle: String
  relatedTitle: String
  relatedSubtitle: String
}

type SettingsCommunityStats {
  number: String
  label: String
  icon: String
}

type SettingsCommunityPlatforms {
  name: String
  description: String
  icon: String
  link: String
  members: String
  activity: String
  color: String
}

type SettingsCommunity {
  stats: [SettingsCommunityStats]
  platforms: [SettingsCommunityPlatforms]
}

type SettingsResearchStats {
  number: String
  label: String
  icon: String
}

type SettingsResearchReports {
  title: String
  description: String
  date: String
  type: String
  pages: Float
  downloads: String
  downloadUrl: String
  coverImage: String
  featured: Boolean
  tags: [String]
}

type SettingsResearch {
  stats: [SettingsResearchStats]
  reports: [SettingsResearchReports]
}

type SettingsNewsletter {
  title: String
  subtitle: String
  frequency: String
  subscriberCount: String
  signupFormId: String
  confirmationMessage: String
}

type SettingsSocialPlatforms {
  name: String
  url: String
  username: String
  showInFooter: Boolean
  enableSharing: Boolean
}

type SettingsSocial {
  platforms: [SettingsSocialPlatforms]
  defaultShareText: String
}

type SettingsAnalytics {
  googleAnalyticsId: String
  googleTagManagerId: String
  enableCookieConsent: Boolean
  cookieConsentMessage: String
}

type SettingsPerformance {
  enableImageOptimization: Boolean
  enableLazyLoading: Boolean
  enableServiceWorker: Boolean
  cacheMaxAge: Float
}

type Settings implements Node & Document {
  title: String!
  description: String
  site: SettingsSite
  categories: SettingsCategories
  uiText: SettingsUiText
  community: SettingsCommunity
  research: SettingsResearch
  newsletter: SettingsNewsletter
  social: SettingsSocial
  analytics: SettingsAnalytics
  performance: SettingsPerformance
  id: ID!
  _sys: SystemInfo!
  _values: JSON!
}

input SettingsSiteGiscusFilter {
  repo: StringFilter
  repoId: StringFilter
  category: StringFilter
  categoryId: StringFilter
  mapping: StringFilter
  reactionsEnabled: BooleanFilter
  emitMetadata: BooleanFilter
  inputPosition: StringFilter
  lang: StringFilter
  loading: StringFilter
}

input SettingsSiteFilter {
  name: StringFilter
  description: StringFilter
  url: StringFilter
  logo: StringFilter
  giscus: SettingsSiteGiscusFilter
}

input SettingsCategoriesCategoryMappingsFilter {
  name: StringFilter
  slug: StringFilter
  color: StringFilter
  description: StringFilter
  icon: StringFilter
  theme: StringFilter
}

input SettingsCategoriesFilter {
  defaultColor: StringFilter
  categoryMappings: SettingsCategoriesCategoryMappingsFilter
}

input SettingsUiTextFilter {
  audioAvailableLabel: StringFilter
  audioTitle: StringFilter
  audioSubtitle: StringFilter
  noAudioText: StringFilter
  byAuthorPrefix: StringFilter
  aboutAuthorTitle: StringFilter
  shareLabel: StringFilter
  shareArticleTitle: StringFilter
  continueReadingTitle: StringFilter
  continueReadingSubtitle: StringFilter
  previousArticleLabel: StringFilter
  nextArticleLabel: StringFilter
  reachedBeginningText: StringFilter
  readAllText: StringFilter
  browseAllArticlesText: StringFilter
  tocTitle: StringFilter
  topicsTitle: StringFilter
  readingProgressTitle: StringFilter
  imageCreditText: StringFilter
  readingTimePrefix: StringFilter
  defaultCategoryLabel: StringFilter
  discussionTitle: StringFilter
  discussionSubtitle: StringFilter
  relatedTitle: StringFilter
  relatedSubtitle: StringFilter
}

input SettingsCommunityStatsFilter {
  number: StringFilter
  label: StringFilter
  icon: StringFilter
}

input SettingsCommunityPlatformsFilter {
  name: StringFilter
  description: StringFilter
  icon: StringFilter
  link: StringFilter
  members: StringFilter
  activity: StringFilter
  color: StringFilter
}

input SettingsCommunityFilter {
  stats: SettingsCommunityStatsFilter
  platforms: SettingsCommunityPlatformsFilter
}

input SettingsResearchStatsFilter {
  number: StringFilter
  label: StringFilter
  icon: StringFilter
}

input SettingsResearchReportsFilter {
  title: StringFilter
  description: StringFilter
  date: DatetimeFilter
  type: StringFilter
  pages: NumberFilter
  downloads: StringFilter
  downloadUrl: StringFilter
  coverImage: ImageFilter
  featured: BooleanFilter
  tags: StringFilter
}

input SettingsResearchFilter {
  stats: SettingsResearchStatsFilter
  reports: SettingsResearchReportsFilter
}

input SettingsNewsletterFilter {
  title: StringFilter
  subtitle: StringFilter
  frequency: StringFilter
  subscriberCount: StringFilter
  signupFormId: StringFilter
  confirmationMessage: StringFilter
}

input SettingsSocialPlatformsFilter {
  name: StringFilter
  url: StringFilter
  username: StringFilter
  showInFooter: BooleanFilter
  enableSharing: BooleanFilter
}

input SettingsSocialFilter {
  platforms: SettingsSocialPlatformsFilter
  defaultShareText: StringFilter
}

input SettingsAnalyticsFilter {
  googleAnalyticsId: StringFilter
  googleTagManagerId: StringFilter
  enableCookieConsent: BooleanFilter
  cookieConsentMessage: StringFilter
}

input SettingsPerformanceFilter {
  enableImageOptimization: BooleanFilter
  enableLazyLoading: BooleanFilter
  enableServiceWorker: BooleanFilter
  cacheMaxAge: NumberFilter
}

input SettingsFilter {
  title: StringFilter
  description: StringFilter
  site: SettingsSiteFilter
  categories: SettingsCategoriesFilter
  uiText: SettingsUiTextFilter
  community: SettingsCommunityFilter
  research: SettingsResearchFilter
  newsletter: SettingsNewsletterFilter
  social: SettingsSocialFilter
  analytics: SettingsAnalyticsFilter
  performance: SettingsPerformanceFilter
}

type SettingsConnectionEdges {
  cursor: String!
  node: Settings
}

type SettingsConnection implements Connection {
  pageInfo: PageInfo!
  totalCount: Float!
  edges: [SettingsConnectionEdges]
}

type Mutation {
  addPendingDocument(collection: String!, relativePath: String!, template: String): DocumentNode!
  updateDocument(collection: String, relativePath: String!, params: DocumentUpdateMutation!): DocumentNode!
  deleteDocument(collection: String, relativePath: String!): DocumentNode!
  createDocument(collection: String, relativePath: String!, params: DocumentMutation!): DocumentNode!
  createFolder(collection: String, relativePath: String!): DocumentNode!
  updateBlog(relativePath: String!, params: BlogMutation!): Blog!
  createBlog(relativePath: String!, params: BlogMutation!): Blog!
  updateNewsletter(relativePath: String!, params: NewsletterMutation!): Newsletter!
  createNewsletter(relativePath: String!, params: NewsletterMutation!): Newsletter!
  updateAllTopicsPage(relativePath: String!, params: AllTopicsPageMutation!): AllTopicsPage!
  createAllTopicsPage(relativePath: String!, params: AllTopicsPageMutation!): AllTopicsPage!
  updatePodcast(relativePath: String!, params: PodcastMutation!): Podcast!
  createPodcast(relativePath: String!, params: PodcastMutation!): Podcast!
  updateContact(relativePath: String!, params: ContactMutation!): Contact!
  createContact(relativePath: String!, params: ContactMutation!): Contact!
  updateLegal(relativePath: String!, params: LegalMutation!): Legal!
  createLegal(relativePath: String!, params: LegalMutation!): Legal!
  updatePages(relativePath: String!, params: PagesMutation!): Pages!
  createPages(relativePath: String!, params: PagesMutation!): Pages!
  updateCategories(relativePath: String!, params: CategoriesMutation!): Categories!
  createCategories(relativePath: String!, params: CategoriesMutation!): Categories!
  updateAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  createAuthors(relativePath: String!, params: AuthorsMutation!): Authors!
  updateSettings(relativePath: String!, params: SettingsMutation!): Settings!
  createSettings(relativePath: String!, params: SettingsMutation!): Settings!
}

input DocumentUpdateMutation {
  blog: BlogMutation
  newsletter: NewsletterMutation
  allTopicsPage: AllTopicsPageMutation
  podcast: PodcastMutation
  contact: ContactMutation
  legal: LegalMutation
  pages: PagesMutation
  categories: CategoriesMutation
  authors: AuthorsMutation
  settings: SettingsMutation
  relativePath: String
}

input DocumentMutation {
  blog: BlogMutation
  newsletter: NewsletterMutation
  allTopicsPage: AllTopicsPageMutation
  podcast: PodcastMutation
  contact: ContactMutation
  legal: LegalMutation
  pages: PagesMutation
  categories: CategoriesMutation
  authors: AuthorsMutation
  settings: SettingsMutation
}

input BlogEditorialMutation {
  status: String
  assignedEditor: String
  editorNotes: String
}

input BlogAuthorInfoSocialMutation {
  twitter: String
  linkedin: String
  github: String
  website: String
}

input BlogAuthorInfoMutation {
  name: String
  bio: String
  avatar: String
  role: String
  social: BlogAuthorInfoSocialMutation
}

input BlogHeroImageMutation {
  imageType: String
  uploadedImage: String
  externalUrl: String
  alt: String
  caption: String
}

input BlogSeoMutation {
  customSEO: Boolean
  title: String
  description: String
  canonical: String
  noindex: Boolean
}

input BlogMutation {
  editorial: BlogEditorialMutation
  title: String
  excerpt: String
  pubDate: String
  updatedDate: String
  authorInfo: BlogAuthorInfoMutation
  heroImage: BlogHeroImageMutation
  image: String
  imageAlt: String
  category: String
  storyType: String
  tags: [String]
  featured: Boolean
  trending: Boolean
  draft: Boolean
  readTime: String
  hasAudio: Boolean
  audioUrl: String
  audioDuration: String
  audioTranscript: String
  seo: BlogSeoMutation
  body: JSON
}

input NewsletterHighlightsMutation {
  title: String
  description: String
  link: String
}

input NewsletterStatsMutation {
  subscribers: Float
  openRate: Float
  clickRate: Float
}

input NewsletterSeoMutation {
  title: String
  description: String
}

input NewsletterMutation {
  title: String
  issueNumber: Float
  newsletterType: String
  excerpt: String
  subscriberOnly: Boolean
  previewContent: String
  publishDate: String
  status: String
  featured: Boolean
  coverImage: String
  highlights: [NewsletterHighlightsMutation]
  trackStats: Boolean
  stats: NewsletterStatsMutation
  tags: [String]
  seo: NewsletterSeoMutation
  body: JSON
}

input AllTopicsPageHeroMutation {
  badgeText: String
  title: String
  titleAccent: String
  subtitle: String
}

input AllTopicsPageTopicsMutation {
  name: String
  href: String
  description: String
  audience: String
}

input AllTopicsPageStatsMutation {
  topicCount: Float
  articleCount: String
  storiesLabel: String
}

input AllTopicsPageCtaMutation {
  title: String
  description: String
  primaryButtonText: String
  primaryButtonLink: String
  secondaryButtonText: String
  secondaryButtonLink: String
}

input AllTopicsPageMutation {
  hero: AllTopicsPageHeroMutation
  topics: [AllTopicsPageTopicsMutation]
  stats: AllTopicsPageStatsMutation
  cta: AllTopicsPageCtaMutation
}

input PodcastGuestsSocialMutation {
  twitter: String
  linkedin: String
}

input PodcastGuestsMutation {
  name: String
  role: String
  company: String
  bio: String
  photo: String
  social: PodcastGuestsSocialMutation
}

input PodcastSeoMutation {
  title: String
  description: String
  canonical: String
}

input PodcastMutation {
  title: String
  episode: Float
  description: String
  pubDate: String
  status: String
  duration: String
  audioUrl: String
  downloadable: Boolean
  image: String
  guests: [PodcastGuestsMutation]
  tags: [String]
  featured: Boolean
  transcript: String
  seo: PodcastSeoMutation
  body: JSON
}

input ContactHeroMutation {
  title: String
  titleAccent: String
  subtitle: String
  responseTime: String
  badgeText: String
}

input ContactContactMethodsMutation {
  title: String
  description: String
  email: String
  icon: String
  color: String
  featured: Boolean
}

input ContactSocialLinksMutation {
  name: String
  url: String
  icon: String
  color: String
  showInContact: Boolean
}

input ContactFaqItemsMutation {
  question: String
  answer: JSON
  category: String
  featured: Boolean
}

input ContactFaqMutation {
  enabled: Boolean
  title: String
  titleAccent: String
  subtitle: String
  items: [ContactFaqItemsMutation]
}

input ContactCtaPrimaryButtonMutation {
  text: String
  link: String
}

input ContactCtaSecondaryButtonMutation {
  text: String
  link: String
}

input ContactCtaMutation {
  title: String
  titleAccent: String
  subtitle: String
  primaryButton: ContactCtaPrimaryButtonMutation
  secondaryButton: ContactCtaSecondaryButtonMutation
}

input ContactSeoMutation {
  title: String
  description: String
  canonical: String
  noindex: Boolean
}

input ContactMutation {
  title: String
  description: String
  pubDate: String
  hero: ContactHeroMutation
  contactMethods: [ContactContactMethodsMutation]
  socialLinks: [ContactSocialLinksMutation]
  faq: ContactFaqMutation
  cta: ContactCtaMutation
  seo: ContactSeoMutation
  body: JSON
}

input LegalContactMutation {
  email: String
  address: String
  phone: String
}

input LegalSeoMutation {
  title: String
  description: String
  noindex: Boolean
}

input LegalMutation {
  title: String
  description: String
  pubDate: String
  updatedDate: String
  effectiveDate: String
  pageType: String
  contact: LegalContactMutation
  seo: LegalSeoMutation
  body: JSON
}

input PagesHeroMutation {
  title: String
  subtitle: String
  image: String
}

input PagesSeoMutation {
  title: String
  description: String
  canonical: String
  noindex: Boolean
}

input PagesMutation {
  title: String
  description: String
  pubDate: String
  updatedDate: String
  layout: String
  hero: PagesHeroMutation
  seo: PagesSeoMutation
  body: JSON
}

input CategoriesSeoMutation {
  title: String
  description: String
}

input CategoriesMutation {
  name: String
  slug: String
  description: String
  theme: String
  icon: String
  color: String
  featured: Boolean
  sortOrder: Float
  seo: CategoriesSeoMutation
  body: JSON
}

input AuthorsSocialMutation {
  twitter: String
  linkedin: String
  github: String
  website: String
}

input AuthorsMutation {
  name: String
  bio: String
  avatar: String
  role: String
  company: String
  email: String
  social: AuthorsSocialMutation
  featured: Boolean
  body: JSON
}

input SettingsSiteGiscusMutation {
  repo: String
  repoId: String
  category: String
  categoryId: String
  mapping: String
  reactionsEnabled: Boolean
  emitMetadata: Boolean
  inputPosition: String
  lang: String
  loading: String
}

input SettingsSiteMutation {
  name: String
  description: String
  url: String
  logo: String
  giscus: SettingsSiteGiscusMutation
}

input SettingsCategoriesCategoryMappingsMutation {
  name: String
  slug: String
  color: String
  description: String
  icon: String
  theme: String
}

input SettingsCategoriesMutation {
  defaultColor: String
  categoryMappings: [SettingsCategoriesCategoryMappingsMutation]
}

input SettingsUiTextMutation {
  audioAvailableLabel: String
  audioTitle: String
  audioSubtitle: String
  noAudioText: String
  byAuthorPrefix: String
  aboutAuthorTitle: String
  shareLabel: String
  shareArticleTitle: String
  continueReadingTitle: String
  continueReadingSubtitle: String
  previousArticleLabel: String
  nextArticleLabel: String
  reachedBeginningText: String
  readAllText: String
  browseAllArticlesText: String
  tocTitle: String
  topicsTitle: String
  readingProgressTitle: String
  imageCreditText: String
  readingTimePrefix: String
  defaultCategoryLabel: String
  discussionTitle: String
  discussionSubtitle: String
  relatedTitle: String
  relatedSubtitle: String
}

input SettingsCommunityStatsMutation {
  number: String
  label: String
  icon: String
}

input SettingsCommunityPlatformsMutation {
  name: String
  description: String
  icon: String
  link: String
  members: String
  activity: String
  color: String
}

input SettingsCommunityMutation {
  stats: [SettingsCommunityStatsMutation]
  platforms: [SettingsCommunityPlatformsMutation]
}

input SettingsResearchStatsMutation {
  number: String
  label: String
  icon: String
}

input SettingsResearchReportsMutation {
  title: String
  description: String
  date: String
  type: String
  pages: Float
  downloads: String
  downloadUrl: String
  coverImage: String
  featured: Boolean
  tags: [String]
}

input SettingsResearchMutation {
  stats: [SettingsResearchStatsMutation]
  reports: [SettingsResearchReportsMutation]
}

input SettingsNewsletterMutation {
  title: String
  subtitle: String
  frequency: String
  subscriberCount: String
  signupFormId: String
  confirmationMessage: String
}

input SettingsSocialPlatformsMutation {
  name: String
  url: String
  username: String
  showInFooter: Boolean
  enableSharing: Boolean
}

input SettingsSocialMutation {
  platforms: [SettingsSocialPlatformsMutation]
  defaultShareText: String
}

input SettingsAnalyticsMutation {
  googleAnalyticsId: String
  googleTagManagerId: String
  enableCookieConsent: Boolean
  cookieConsentMessage: String
}

input SettingsPerformanceMutation {
  enableImageOptimization: Boolean
  enableLazyLoading: Boolean
  enableServiceWorker: Boolean
  cacheMaxAge: Float
}

input SettingsMutation {
  title: String
  description: String
  site: SettingsSiteMutation
  categories: SettingsCategoriesMutation
  uiText: SettingsUiTextMutation
  community: SettingsCommunityMutation
  research: SettingsResearchMutation
  newsletter: SettingsNewsletterMutation
  social: SettingsSocialMutation
  analytics: SettingsAnalyticsMutation
  performance: SettingsPerformanceMutation
}

schema {
  query: Query
  mutation: Mutation
}
