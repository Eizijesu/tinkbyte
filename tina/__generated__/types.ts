//@ts-nocheck
  // DO NOT MODIFY THIS FILE. This file is automatically generated by Tina
  export function gql(strings: TemplateStringsArray, ...args: string[]): string {
    let str = ''
    strings.forEach((string, i) => {
      str += string + (args[i] || '')
    })
    return str
  }
  export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  /** References another document, used as a foreign key */
  Reference: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type SystemInfo = {
  __typename?: 'SystemInfo';
  filename: Scalars['String']['output'];
  title?: Maybe<Scalars['String']['output']>;
  basename: Scalars['String']['output'];
  hasReferences?: Maybe<Scalars['Boolean']['output']>;
  breadcrumbs: Array<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  relativePath: Scalars['String']['output'];
  extension: Scalars['String']['output'];
  template: Scalars['String']['output'];
  collection: Collection;
};


export type SystemInfoBreadcrumbsArgs = {
  excludeExtension?: InputMaybe<Scalars['Boolean']['input']>;
};

export type Folder = {
  __typename?: 'Folder';
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
};

export type PageInfo = {
  __typename?: 'PageInfo';
  hasPreviousPage: Scalars['Boolean']['output'];
  hasNextPage: Scalars['Boolean']['output'];
  startCursor: Scalars['String']['output'];
  endCursor: Scalars['String']['output'];
};

export type Node = {
  id: Scalars['ID']['output'];
};

export type Document = {
  id: Scalars['ID']['output'];
  _sys?: Maybe<SystemInfo>;
  _values: Scalars['JSON']['output'];
};

/** A relay-compliant pagination connection */
export type Connection = {
  totalCount: Scalars['Float']['output'];
  pageInfo: PageInfo;
};

export type Query = {
  __typename?: 'Query';
  getOptimizedQuery?: Maybe<Scalars['String']['output']>;
  collection: Collection;
  collections: Array<Collection>;
  node: Node;
  document: DocumentNode;
  blog: Blog;
  blogConnection: BlogConnection;
  newsletter: Newsletter;
  newsletterConnection: NewsletterConnection;
  allTopicsPage: AllTopicsPage;
  allTopicsPageConnection: AllTopicsPageConnection;
  podcast: Podcast;
  podcastConnection: PodcastConnection;
  contact: Contact;
  contactConnection: ContactConnection;
  legal: Legal;
  legalConnection: LegalConnection;
  pages: Pages;
  pagesConnection: PagesConnection;
  categories: Categories;
  categoriesConnection: CategoriesConnection;
  authors: Authors;
  authorsConnection: AuthorsConnection;
  settings: Settings;
  settingsConnection: SettingsConnection;
};


export type QueryGetOptimizedQueryArgs = {
  queryString: Scalars['String']['input'];
};


export type QueryCollectionArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNodeArgs = {
  id?: InputMaybe<Scalars['String']['input']>;
};


export type QueryDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryBlogConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
};


export type QueryNewsletterArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryNewsletterConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NewsletterFilter>;
};


export type QueryAllTopicsPageArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAllTopicsPageConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AllTopicsPageFilter>;
};


export type QueryPodcastArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPodcastConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PodcastFilter>;
};


export type QueryContactArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryContactConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContactFilter>;
};


export type QueryLegalArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryLegalConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LegalFilter>;
};


export type QueryPagesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryPagesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PagesFilter>;
};


export type QueryCategoriesArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryCategoriesConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CategoriesFilter>;
};


export type QueryAuthorsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QueryAuthorsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AuthorsFilter>;
};


export type QuerySettingsArgs = {
  relativePath?: InputMaybe<Scalars['String']['input']>;
};


export type QuerySettingsConnectionArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SettingsFilter>;
};

export type DocumentFilter = {
  blog?: InputMaybe<BlogFilter>;
  newsletter?: InputMaybe<NewsletterFilter>;
  allTopicsPage?: InputMaybe<AllTopicsPageFilter>;
  podcast?: InputMaybe<PodcastFilter>;
  contact?: InputMaybe<ContactFilter>;
  legal?: InputMaybe<LegalFilter>;
  pages?: InputMaybe<PagesFilter>;
  categories?: InputMaybe<CategoriesFilter>;
  authors?: InputMaybe<AuthorsFilter>;
  settings?: InputMaybe<SettingsFilter>;
};

export type DocumentConnectionEdges = {
  __typename?: 'DocumentConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<DocumentNode>;
};

export type DocumentConnection = Connection & {
  __typename?: 'DocumentConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<DocumentConnectionEdges>>>;
};

export type Collection = {
  __typename?: 'Collection';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  label?: Maybe<Scalars['String']['output']>;
  path: Scalars['String']['output'];
  format?: Maybe<Scalars['String']['output']>;
  matches?: Maybe<Scalars['String']['output']>;
  templates?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  fields?: Maybe<Array<Maybe<Scalars['JSON']['output']>>>;
  documents: DocumentConnection;
};


export type CollectionDocumentsArgs = {
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<DocumentFilter>;
  folder?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentNode = Blog | Newsletter | AllTopicsPage | Podcast | Contact | Legal | Pages | Categories | Authors | Settings | Folder;

export type BlogEditorial = {
  __typename?: 'BlogEditorial';
  status?: Maybe<Scalars['String']['output']>;
  assignedEditor?: Maybe<Scalars['String']['output']>;
  editorNotes?: Maybe<Scalars['String']['output']>;
};

export type BlogAuthorInfoSocial = {
  __typename?: 'BlogAuthorInfoSocial';
  twitter?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
  github?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
};

export type BlogAuthorInfo = {
  __typename?: 'BlogAuthorInfo';
  name: Scalars['String']['output'];
  bio?: Maybe<Scalars['String']['output']>;
  avatar?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Scalars['String']['output']>;
  social?: Maybe<BlogAuthorInfoSocial>;
};

export type BlogHeroImage = {
  __typename?: 'BlogHeroImage';
  imageType: Scalars['String']['output'];
  uploadedImage?: Maybe<Scalars['String']['output']>;
  externalUrl?: Maybe<Scalars['String']['output']>;
  alt: Scalars['String']['output'];
  caption?: Maybe<Scalars['String']['output']>;
};

export type BlogSeo = {
  __typename?: 'BlogSeo';
  customSEO?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
};

export type Blog = Node & Document & {
  __typename?: 'Blog';
  editorial?: Maybe<BlogEditorial>;
  title: Scalars['String']['output'];
  excerpt: Scalars['String']['output'];
  pubDate: Scalars['String']['output'];
  updatedDate?: Maybe<Scalars['String']['output']>;
  authorInfo?: Maybe<BlogAuthorInfo>;
  heroImage?: Maybe<BlogHeroImage>;
  image?: Maybe<Scalars['String']['output']>;
  imageAlt?: Maybe<Scalars['String']['output']>;
  category: Scalars['String']['output'];
  storyType?: Maybe<Scalars['String']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  trending?: Maybe<Scalars['Boolean']['output']>;
  draft?: Maybe<Scalars['Boolean']['output']>;
  readTime?: Maybe<Scalars['String']['output']>;
  hasAudio?: Maybe<Scalars['Boolean']['output']>;
  audioUrl?: Maybe<Scalars['String']['output']>;
  audioDuration?: Maybe<Scalars['String']['output']>;
  audioTranscript?: Maybe<Scalars['String']['output']>;
  seo?: Maybe<BlogSeo>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type StringFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BlogEditorialFilter = {
  status?: InputMaybe<StringFilter>;
  assignedEditor?: InputMaybe<StringFilter>;
  editorNotes?: InputMaybe<StringFilter>;
};

export type DatetimeFilter = {
  after?: InputMaybe<Scalars['String']['input']>;
  before?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type ImageFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type BlogAuthorInfoSocialFilter = {
  twitter?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
  github?: InputMaybe<StringFilter>;
  website?: InputMaybe<StringFilter>;
};

export type BlogAuthorInfoFilter = {
  name?: InputMaybe<StringFilter>;
  bio?: InputMaybe<StringFilter>;
  avatar?: InputMaybe<ImageFilter>;
  role?: InputMaybe<StringFilter>;
  social?: InputMaybe<BlogAuthorInfoSocialFilter>;
};

export type BlogHeroImageFilter = {
  imageType?: InputMaybe<StringFilter>;
  uploadedImage?: InputMaybe<ImageFilter>;
  externalUrl?: InputMaybe<StringFilter>;
  alt?: InputMaybe<StringFilter>;
  caption?: InputMaybe<StringFilter>;
};

export type BooleanFilter = {
  eq?: InputMaybe<Scalars['Boolean']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogSeoFilter = {
  customSEO?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  canonical?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
};

export type BlogBodyNewsletterFilter = {
  variant?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  buttonText?: InputMaybe<StringFilter>;
  showFeatures?: InputMaybe<BooleanFilter>;
  features?: InputMaybe<StringFilter>;
};

export type BlogBodyImageBlockFilter = {
  sourceType?: InputMaybe<StringFilter>;
  uploadedImage?: InputMaybe<ImageFilter>;
  externalUrl?: InputMaybe<StringFilter>;
  alt?: InputMaybe<StringFilter>;
  caption?: InputMaybe<StringFilter>;
  size?: InputMaybe<StringFilter>;
  enableLightbox?: InputMaybe<BooleanFilter>;
};

export type BlogBodyVideoBlockFilter = {
  platform?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  aspectRatio?: InputMaybe<StringFilter>;
  startTime?: InputMaybe<StringFilter>;
};

export type RichTextFilter = {
  startsWith?: InputMaybe<Scalars['String']['input']>;
  eq?: InputMaybe<Scalars['String']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogBodyCalloutFilter = {
  type?: InputMaybe<StringFilter>;
  customColor?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  content?: InputMaybe<RichTextFilter>;
  dismissible?: InputMaybe<BooleanFilter>;
};

export type BlogBodyCodeBlockFilter = {
  language?: InputMaybe<StringFilter>;
  customLanguage?: InputMaybe<StringFilter>;
  filename?: InputMaybe<StringFilter>;
  code?: InputMaybe<StringFilter>;
  showLineNumbers?: InputMaybe<BooleanFilter>;
  highlightLines?: InputMaybe<StringFilter>;
};

export type BlogBodyQuoteFilter = {
  quote?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  role?: InputMaybe<StringFilter>;
  company?: InputMaybe<StringFilter>;
  avatar?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
  citation?: InputMaybe<StringFilter>;
};

export type BlogBodyButtonBlockFilter = {
  text?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  style?: InputMaybe<StringFilter>;
  customColor?: InputMaybe<StringFilter>;
  size?: InputMaybe<StringFilter>;
  alignment?: InputMaybe<StringFilter>;
  openInNewTab?: InputMaybe<BooleanFilter>;
  icon?: InputMaybe<StringFilter>;
  iconPosition?: InputMaybe<StringFilter>;
};

export type BlogBodyTableBlockRowsFilter = {
  cells?: InputMaybe<StringFilter>;
};

export type BlogBodyTableBlockFilter = {
  caption?: InputMaybe<StringFilter>;
  hasHeaders?: InputMaybe<BooleanFilter>;
  headers?: InputMaybe<StringFilter>;
  rows?: InputMaybe<BlogBodyTableBlockRowsFilter>;
  style?: InputMaybe<StringFilter>;
  sortable?: InputMaybe<BooleanFilter>;
};

export type BlogBodyTwoColumnLayoutFilter = {
  variant?: InputMaybe<StringFilter>;
  customRatio?: InputMaybe<StringFilter>;
  leftContent?: InputMaybe<RichTextFilter>;
  rightContent?: InputMaybe<RichTextFilter>;
  gap?: InputMaybe<StringFilter>;
  stackOnMobile?: InputMaybe<BooleanFilter>;
};

export type NumberFilter = {
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  eq?: InputMaybe<Scalars['Float']['input']>;
  exists?: InputMaybe<Scalars['Boolean']['input']>;
  in?: InputMaybe<Array<InputMaybe<Scalars['Float']['input']>>>;
};

export type BlogBodyImageGalleryImagesFilter = {
  src?: InputMaybe<ImageFilter>;
  alt?: InputMaybe<StringFilter>;
  caption?: InputMaybe<StringFilter>;
};

export type BlogBodyImageGalleryFilter = {
  caption?: InputMaybe<StringFilter>;
  layout?: InputMaybe<StringFilter>;
  autoplay?: InputMaybe<BooleanFilter>;
  autoplaySpeed?: InputMaybe<NumberFilter>;
  images?: InputMaybe<BlogBodyImageGalleryImagesFilter>;
};

export type BlogBodyFilter = {
  Newsletter?: InputMaybe<BlogBodyNewsletterFilter>;
  ImageBlock?: InputMaybe<BlogBodyImageBlockFilter>;
  VideoBlock?: InputMaybe<BlogBodyVideoBlockFilter>;
  Callout?: InputMaybe<BlogBodyCalloutFilter>;
  CodeBlock?: InputMaybe<BlogBodyCodeBlockFilter>;
  Quote?: InputMaybe<BlogBodyQuoteFilter>;
  ButtonBlock?: InputMaybe<BlogBodyButtonBlockFilter>;
  TableBlock?: InputMaybe<BlogBodyTableBlockFilter>;
  TwoColumnLayout?: InputMaybe<BlogBodyTwoColumnLayoutFilter>;
  ImageGallery?: InputMaybe<BlogBodyImageGalleryFilter>;
};

export type BlogFilter = {
  editorial?: InputMaybe<BlogEditorialFilter>;
  title?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  updatedDate?: InputMaybe<DatetimeFilter>;
  authorInfo?: InputMaybe<BlogAuthorInfoFilter>;
  heroImage?: InputMaybe<BlogHeroImageFilter>;
  image?: InputMaybe<ImageFilter>;
  imageAlt?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  storyType?: InputMaybe<StringFilter>;
  tags?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  trending?: InputMaybe<BooleanFilter>;
  draft?: InputMaybe<BooleanFilter>;
  readTime?: InputMaybe<StringFilter>;
  hasAudio?: InputMaybe<BooleanFilter>;
  audioUrl?: InputMaybe<StringFilter>;
  audioDuration?: InputMaybe<StringFilter>;
  audioTranscript?: InputMaybe<StringFilter>;
  seo?: InputMaybe<BlogSeoFilter>;
  body?: InputMaybe<BlogBodyFilter>;
};

export type BlogConnectionEdges = {
  __typename?: 'BlogConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Blog>;
};

export type BlogConnection = Connection & {
  __typename?: 'BlogConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<BlogConnectionEdges>>>;
};

export type NewsletterHighlights = {
  __typename?: 'NewsletterHighlights';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type NewsletterStats = {
  __typename?: 'NewsletterStats';
  subscribers?: Maybe<Scalars['Float']['output']>;
  openRate?: Maybe<Scalars['Float']['output']>;
  clickRate?: Maybe<Scalars['Float']['output']>;
};

export type NewsletterSeo = {
  __typename?: 'NewsletterSeo';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type Newsletter = Node & Document & {
  __typename?: 'Newsletter';
  title: Scalars['String']['output'];
  issueNumber: Scalars['Float']['output'];
  newsletterType: Scalars['String']['output'];
  excerpt: Scalars['String']['output'];
  subscriberOnly?: Maybe<Scalars['Boolean']['output']>;
  previewContent?: Maybe<Scalars['String']['output']>;
  publishDate: Scalars['String']['output'];
  status?: Maybe<Scalars['String']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  coverImage?: Maybe<Scalars['String']['output']>;
  highlights?: Maybe<Array<Maybe<NewsletterHighlights>>>;
  trackStats?: Maybe<Scalars['Boolean']['output']>;
  stats?: Maybe<NewsletterStats>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  seo?: Maybe<NewsletterSeo>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type NewsletterHighlightsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
};

export type NewsletterStatsFilter = {
  subscribers?: InputMaybe<NumberFilter>;
  openRate?: InputMaybe<NumberFilter>;
  clickRate?: InputMaybe<NumberFilter>;
};

export type NewsletterSeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type NewsletterBodyNewsletterSectionFilter = {
  title?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  content?: InputMaybe<RichTextFilter>;
};

export type NewsletterBodyArticleHighlightFilter = {
  title?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  author?: InputMaybe<StringFilter>;
  readTime?: InputMaybe<StringFilter>;
};

export type NewsletterBodyFilter = {
  NewsletterSection?: InputMaybe<NewsletterBodyNewsletterSectionFilter>;
  ArticleHighlight?: InputMaybe<NewsletterBodyArticleHighlightFilter>;
};

export type NewsletterFilter = {
  title?: InputMaybe<StringFilter>;
  issueNumber?: InputMaybe<NumberFilter>;
  newsletterType?: InputMaybe<StringFilter>;
  excerpt?: InputMaybe<StringFilter>;
  subscriberOnly?: InputMaybe<BooleanFilter>;
  previewContent?: InputMaybe<StringFilter>;
  publishDate?: InputMaybe<DatetimeFilter>;
  status?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  coverImage?: InputMaybe<ImageFilter>;
  highlights?: InputMaybe<NewsletterHighlightsFilter>;
  trackStats?: InputMaybe<BooleanFilter>;
  stats?: InputMaybe<NewsletterStatsFilter>;
  tags?: InputMaybe<StringFilter>;
  seo?: InputMaybe<NewsletterSeoFilter>;
  body?: InputMaybe<NewsletterBodyFilter>;
};

export type NewsletterConnectionEdges = {
  __typename?: 'NewsletterConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Newsletter>;
};

export type NewsletterConnection = Connection & {
  __typename?: 'NewsletterConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<NewsletterConnectionEdges>>>;
};

export type AllTopicsPageHero = {
  __typename?: 'AllTopicsPageHero';
  badgeText: Scalars['String']['output'];
  title: Scalars['String']['output'];
  titleAccent: Scalars['String']['output'];
  subtitle: Scalars['String']['output'];
};

export type AllTopicsPageTopics = {
  __typename?: 'AllTopicsPageTopics';
  name: Scalars['String']['output'];
  href: Scalars['String']['output'];
  description: Scalars['String']['output'];
  audience: Scalars['String']['output'];
};

export type AllTopicsPageStats = {
  __typename?: 'AllTopicsPageStats';
  topicCount?: Maybe<Scalars['Float']['output']>;
  articleCount?: Maybe<Scalars['String']['output']>;
  storiesLabel?: Maybe<Scalars['String']['output']>;
};

export type AllTopicsPageCta = {
  __typename?: 'AllTopicsPageCta';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  primaryButtonText: Scalars['String']['output'];
  primaryButtonLink: Scalars['String']['output'];
  secondaryButtonText: Scalars['String']['output'];
  secondaryButtonLink: Scalars['String']['output'];
};

export type AllTopicsPage = Node & Document & {
  __typename?: 'AllTopicsPage';
  hero?: Maybe<AllTopicsPageHero>;
  topics?: Maybe<Array<Maybe<AllTopicsPageTopics>>>;
  stats?: Maybe<AllTopicsPageStats>;
  cta?: Maybe<AllTopicsPageCta>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type AllTopicsPageHeroFilter = {
  badgeText?: InputMaybe<StringFilter>;
  title?: InputMaybe<StringFilter>;
  titleAccent?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
};

export type AllTopicsPageTopicsFilter = {
  name?: InputMaybe<StringFilter>;
  href?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  audience?: InputMaybe<StringFilter>;
};

export type AllTopicsPageStatsFilter = {
  topicCount?: InputMaybe<NumberFilter>;
  articleCount?: InputMaybe<StringFilter>;
  storiesLabel?: InputMaybe<StringFilter>;
};

export type AllTopicsPageCtaFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  primaryButtonText?: InputMaybe<StringFilter>;
  primaryButtonLink?: InputMaybe<StringFilter>;
  secondaryButtonText?: InputMaybe<StringFilter>;
  secondaryButtonLink?: InputMaybe<StringFilter>;
};

export type AllTopicsPageFilter = {
  hero?: InputMaybe<AllTopicsPageHeroFilter>;
  topics?: InputMaybe<AllTopicsPageTopicsFilter>;
  stats?: InputMaybe<AllTopicsPageStatsFilter>;
  cta?: InputMaybe<AllTopicsPageCtaFilter>;
};

export type AllTopicsPageConnectionEdges = {
  __typename?: 'AllTopicsPageConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<AllTopicsPage>;
};

export type AllTopicsPageConnection = Connection & {
  __typename?: 'AllTopicsPageConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AllTopicsPageConnectionEdges>>>;
};

export type PodcastGuestsSocial = {
  __typename?: 'PodcastGuestsSocial';
  twitter?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
};

export type PodcastGuests = {
  __typename?: 'PodcastGuests';
  name: Scalars['String']['output'];
  role?: Maybe<Scalars['String']['output']>;
  company?: Maybe<Scalars['String']['output']>;
  bio?: Maybe<Scalars['String']['output']>;
  photo?: Maybe<Scalars['String']['output']>;
  social?: Maybe<PodcastGuestsSocial>;
};

export type PodcastSeo = {
  __typename?: 'PodcastSeo';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
};

export type Podcast = Node & Document & {
  __typename?: 'Podcast';
  title: Scalars['String']['output'];
  episode: Scalars['Float']['output'];
  description: Scalars['String']['output'];
  pubDate: Scalars['String']['output'];
  status?: Maybe<Scalars['String']['output']>;
  duration: Scalars['String']['output'];
  audioUrl?: Maybe<Scalars['String']['output']>;
  downloadable?: Maybe<Scalars['Boolean']['output']>;
  image?: Maybe<Scalars['String']['output']>;
  guests?: Maybe<Array<Maybe<PodcastGuests>>>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  transcript?: Maybe<Scalars['String']['output']>;
  seo?: Maybe<PodcastSeo>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PodcastGuestsSocialFilter = {
  twitter?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
};

export type PodcastGuestsFilter = {
  name?: InputMaybe<StringFilter>;
  role?: InputMaybe<StringFilter>;
  company?: InputMaybe<StringFilter>;
  bio?: InputMaybe<StringFilter>;
  photo?: InputMaybe<ImageFilter>;
  social?: InputMaybe<PodcastGuestsSocialFilter>;
};

export type PodcastSeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  canonical?: InputMaybe<StringFilter>;
};

export type PodcastFilter = {
  title?: InputMaybe<StringFilter>;
  episode?: InputMaybe<NumberFilter>;
  description?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  status?: InputMaybe<StringFilter>;
  duration?: InputMaybe<StringFilter>;
  audioUrl?: InputMaybe<StringFilter>;
  downloadable?: InputMaybe<BooleanFilter>;
  image?: InputMaybe<ImageFilter>;
  guests?: InputMaybe<PodcastGuestsFilter>;
  tags?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  transcript?: InputMaybe<StringFilter>;
  seo?: InputMaybe<PodcastSeoFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PodcastConnectionEdges = {
  __typename?: 'PodcastConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Podcast>;
};

export type PodcastConnection = Connection & {
  __typename?: 'PodcastConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PodcastConnectionEdges>>>;
};

export type ContactHero = {
  __typename?: 'ContactHero';
  title?: Maybe<Scalars['String']['output']>;
  titleAccent?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  responseTime?: Maybe<Scalars['String']['output']>;
  badgeText?: Maybe<Scalars['String']['output']>;
};

export type ContactContactMethods = {
  __typename?: 'ContactContactMethods';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  email: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
};

export type ContactSocialLinks = {
  __typename?: 'ContactSocialLinks';
  name: Scalars['String']['output'];
  url: Scalars['String']['output'];
  icon?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  showInContact?: Maybe<Scalars['Boolean']['output']>;
};

export type ContactFaqItems = {
  __typename?: 'ContactFaqItems';
  question: Scalars['String']['output'];
  answer: Scalars['JSON']['output'];
  category?: Maybe<Scalars['String']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
};

export type ContactFaq = {
  __typename?: 'ContactFaq';
  enabled?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  titleAccent?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  items?: Maybe<Array<Maybe<ContactFaqItems>>>;
};

export type ContactCtaPrimaryButton = {
  __typename?: 'ContactCtaPrimaryButton';
  text?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type ContactCtaSecondaryButton = {
  __typename?: 'ContactCtaSecondaryButton';
  text?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
};

export type ContactCta = {
  __typename?: 'ContactCta';
  title?: Maybe<Scalars['String']['output']>;
  titleAccent?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  primaryButton?: Maybe<ContactCtaPrimaryButton>;
  secondaryButton?: Maybe<ContactCtaSecondaryButton>;
};

export type ContactSeo = {
  __typename?: 'ContactSeo';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
};

export type Contact = Node & Document & {
  __typename?: 'Contact';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  pubDate?: Maybe<Scalars['String']['output']>;
  hero?: Maybe<ContactHero>;
  contactMethods?: Maybe<Array<Maybe<ContactContactMethods>>>;
  socialLinks?: Maybe<Array<Maybe<ContactSocialLinks>>>;
  faq?: Maybe<ContactFaq>;
  cta?: Maybe<ContactCta>;
  seo?: Maybe<ContactSeo>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type ContactHeroFilter = {
  title?: InputMaybe<StringFilter>;
  titleAccent?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  responseTime?: InputMaybe<StringFilter>;
  badgeText?: InputMaybe<StringFilter>;
};

export type ContactContactMethodsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
};

export type ContactSocialLinksFilter = {
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  showInContact?: InputMaybe<BooleanFilter>;
};

export type ContactFaqItemsAnswerLinkFilter = {
  url?: InputMaybe<StringFilter>;
  text?: InputMaybe<StringFilter>;
};

export type ContactFaqItemsAnswerFilter = {
  link?: InputMaybe<ContactFaqItemsAnswerLinkFilter>;
};

export type ContactFaqItemsFilter = {
  question?: InputMaybe<StringFilter>;
  answer?: InputMaybe<ContactFaqItemsAnswerFilter>;
  category?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
};

export type ContactFaqFilter = {
  enabled?: InputMaybe<BooleanFilter>;
  title?: InputMaybe<StringFilter>;
  titleAccent?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  items?: InputMaybe<ContactFaqItemsFilter>;
};

export type ContactCtaPrimaryButtonFilter = {
  text?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
};

export type ContactCtaSecondaryButtonFilter = {
  text?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
};

export type ContactCtaFilter = {
  title?: InputMaybe<StringFilter>;
  titleAccent?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  primaryButton?: InputMaybe<ContactCtaPrimaryButtonFilter>;
  secondaryButton?: InputMaybe<ContactCtaSecondaryButtonFilter>;
};

export type ContactSeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  canonical?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
};

export type ContactFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  hero?: InputMaybe<ContactHeroFilter>;
  contactMethods?: InputMaybe<ContactContactMethodsFilter>;
  socialLinks?: InputMaybe<ContactSocialLinksFilter>;
  faq?: InputMaybe<ContactFaqFilter>;
  cta?: InputMaybe<ContactCtaFilter>;
  seo?: InputMaybe<ContactSeoFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type ContactConnectionEdges = {
  __typename?: 'ContactConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Contact>;
};

export type ContactConnection = Connection & {
  __typename?: 'ContactConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<ContactConnectionEdges>>>;
};

export type LegalContact = {
  __typename?: 'LegalContact';
  email?: Maybe<Scalars['String']['output']>;
  address?: Maybe<Scalars['String']['output']>;
  phone?: Maybe<Scalars['String']['output']>;
};

export type LegalSeo = {
  __typename?: 'LegalSeo';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
};

export type Legal = Node & Document & {
  __typename?: 'Legal';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  pubDate: Scalars['String']['output'];
  updatedDate?: Maybe<Scalars['String']['output']>;
  effectiveDate?: Maybe<Scalars['String']['output']>;
  pageType?: Maybe<Scalars['String']['output']>;
  contact?: Maybe<LegalContact>;
  seo?: Maybe<LegalSeo>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type LegalContactFilter = {
  email?: InputMaybe<StringFilter>;
  address?: InputMaybe<StringFilter>;
  phone?: InputMaybe<StringFilter>;
};

export type LegalSeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
};

export type LegalBodySectionFilter = {
  title?: InputMaybe<StringFilter>;
  content?: InputMaybe<RichTextFilter>;
};

export type LegalBodyContactInfoFilter = {
  title?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  address?: InputMaybe<StringFilter>;
};

export type LegalBodyFilter = {
  section?: InputMaybe<LegalBodySectionFilter>;
  contactInfo?: InputMaybe<LegalBodyContactInfoFilter>;
};

export type LegalFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  updatedDate?: InputMaybe<DatetimeFilter>;
  effectiveDate?: InputMaybe<StringFilter>;
  pageType?: InputMaybe<StringFilter>;
  contact?: InputMaybe<LegalContactFilter>;
  seo?: InputMaybe<LegalSeoFilter>;
  body?: InputMaybe<LegalBodyFilter>;
};

export type LegalConnectionEdges = {
  __typename?: 'LegalConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Legal>;
};

export type LegalConnection = Connection & {
  __typename?: 'LegalConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<LegalConnectionEdges>>>;
};

export type PagesHero = {
  __typename?: 'PagesHero';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  image?: Maybe<Scalars['String']['output']>;
};

export type PagesSeo = {
  __typename?: 'PagesSeo';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  canonical?: Maybe<Scalars['String']['output']>;
  noindex?: Maybe<Scalars['Boolean']['output']>;
};

export type Pages = Node & Document & {
  __typename?: 'Pages';
  title: Scalars['String']['output'];
  description: Scalars['String']['output'];
  pubDate: Scalars['String']['output'];
  updatedDate?: Maybe<Scalars['String']['output']>;
  layout?: Maybe<Scalars['String']['output']>;
  hero?: Maybe<PagesHero>;
  seo?: Maybe<PagesSeo>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type PagesHeroFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  image?: InputMaybe<ImageFilter>;
};

export type PagesSeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  canonical?: InputMaybe<StringFilter>;
  noindex?: InputMaybe<BooleanFilter>;
};

export type PagesFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  pubDate?: InputMaybe<DatetimeFilter>;
  updatedDate?: InputMaybe<DatetimeFilter>;
  layout?: InputMaybe<StringFilter>;
  hero?: InputMaybe<PagesHeroFilter>;
  seo?: InputMaybe<PagesSeoFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type PagesConnectionEdges = {
  __typename?: 'PagesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Pages>;
};

export type PagesConnection = Connection & {
  __typename?: 'PagesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<PagesConnectionEdges>>>;
};

export type CategoriesSeo = {
  __typename?: 'CategoriesSeo';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
};

export type Categories = Node & Document & {
  __typename?: 'Categories';
  name: Scalars['String']['output'];
  slug: Scalars['String']['output'];
  description: Scalars['String']['output'];
  theme: Scalars['String']['output'];
  icon: Scalars['String']['output'];
  color: Scalars['String']['output'];
  featured?: Maybe<Scalars['Boolean']['output']>;
  sortOrder?: Maybe<Scalars['Float']['output']>;
  seo?: Maybe<CategoriesSeo>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type CategoriesSeoFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
};

export type CategoriesFilter = {
  name?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  theme?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  featured?: InputMaybe<BooleanFilter>;
  sortOrder?: InputMaybe<NumberFilter>;
  seo?: InputMaybe<CategoriesSeoFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type CategoriesConnectionEdges = {
  __typename?: 'CategoriesConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Categories>;
};

export type CategoriesConnection = Connection & {
  __typename?: 'CategoriesConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<CategoriesConnectionEdges>>>;
};

export type AuthorsSocial = {
  __typename?: 'AuthorsSocial';
  twitter?: Maybe<Scalars['String']['output']>;
  linkedin?: Maybe<Scalars['String']['output']>;
  github?: Maybe<Scalars['String']['output']>;
  website?: Maybe<Scalars['String']['output']>;
};

export type Authors = Node & Document & {
  __typename?: 'Authors';
  name: Scalars['String']['output'];
  bio?: Maybe<Scalars['String']['output']>;
  avatar?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Scalars['String']['output']>;
  company?: Maybe<Scalars['String']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  social?: Maybe<AuthorsSocial>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  body?: Maybe<Scalars['JSON']['output']>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type AuthorsSocialFilter = {
  twitter?: InputMaybe<StringFilter>;
  linkedin?: InputMaybe<StringFilter>;
  github?: InputMaybe<StringFilter>;
  website?: InputMaybe<StringFilter>;
};

export type AuthorsFilter = {
  name?: InputMaybe<StringFilter>;
  bio?: InputMaybe<StringFilter>;
  avatar?: InputMaybe<ImageFilter>;
  role?: InputMaybe<StringFilter>;
  company?: InputMaybe<StringFilter>;
  email?: InputMaybe<StringFilter>;
  social?: InputMaybe<AuthorsSocialFilter>;
  featured?: InputMaybe<BooleanFilter>;
  body?: InputMaybe<RichTextFilter>;
};

export type AuthorsConnectionEdges = {
  __typename?: 'AuthorsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Authors>;
};

export type AuthorsConnection = Connection & {
  __typename?: 'AuthorsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<AuthorsConnectionEdges>>>;
};

export type SettingsSiteGiscus = {
  __typename?: 'SettingsSiteGiscus';
  repo?: Maybe<Scalars['String']['output']>;
  repoId?: Maybe<Scalars['String']['output']>;
  category?: Maybe<Scalars['String']['output']>;
  categoryId?: Maybe<Scalars['String']['output']>;
  mapping?: Maybe<Scalars['String']['output']>;
  reactionsEnabled?: Maybe<Scalars['Boolean']['output']>;
  emitMetadata?: Maybe<Scalars['Boolean']['output']>;
  inputPosition?: Maybe<Scalars['String']['output']>;
  lang?: Maybe<Scalars['String']['output']>;
  loading?: Maybe<Scalars['String']['output']>;
};

export type SettingsSite = {
  __typename?: 'SettingsSite';
  name: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  logo?: Maybe<Scalars['String']['output']>;
  giscus?: Maybe<SettingsSiteGiscus>;
};

export type SettingsCategoriesCategoryMappings = {
  __typename?: 'SettingsCategoriesCategoryMappings';
  name?: Maybe<Scalars['String']['output']>;
  slug?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  theme?: Maybe<Scalars['String']['output']>;
};

export type SettingsCategories = {
  __typename?: 'SettingsCategories';
  defaultColor?: Maybe<Scalars['String']['output']>;
  categoryMappings?: Maybe<Array<Maybe<SettingsCategoriesCategoryMappings>>>;
};

export type SettingsUiText = {
  __typename?: 'SettingsUiText';
  audioAvailableLabel?: Maybe<Scalars['String']['output']>;
  audioTitle?: Maybe<Scalars['String']['output']>;
  audioSubtitle?: Maybe<Scalars['String']['output']>;
  noAudioText?: Maybe<Scalars['String']['output']>;
  byAuthorPrefix?: Maybe<Scalars['String']['output']>;
  aboutAuthorTitle?: Maybe<Scalars['String']['output']>;
  shareLabel?: Maybe<Scalars['String']['output']>;
  shareArticleTitle?: Maybe<Scalars['String']['output']>;
  continueReadingTitle?: Maybe<Scalars['String']['output']>;
  continueReadingSubtitle?: Maybe<Scalars['String']['output']>;
  previousArticleLabel?: Maybe<Scalars['String']['output']>;
  nextArticleLabel?: Maybe<Scalars['String']['output']>;
  reachedBeginningText?: Maybe<Scalars['String']['output']>;
  readAllText?: Maybe<Scalars['String']['output']>;
  browseAllArticlesText?: Maybe<Scalars['String']['output']>;
  tocTitle?: Maybe<Scalars['String']['output']>;
  topicsTitle?: Maybe<Scalars['String']['output']>;
  readingProgressTitle?: Maybe<Scalars['String']['output']>;
  imageCreditText?: Maybe<Scalars['String']['output']>;
  readingTimePrefix?: Maybe<Scalars['String']['output']>;
  defaultCategoryLabel?: Maybe<Scalars['String']['output']>;
  discussionTitle?: Maybe<Scalars['String']['output']>;
  discussionSubtitle?: Maybe<Scalars['String']['output']>;
  relatedTitle?: Maybe<Scalars['String']['output']>;
  relatedSubtitle?: Maybe<Scalars['String']['output']>;
};

export type SettingsCommunityStats = {
  __typename?: 'SettingsCommunityStats';
  number?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
};

export type SettingsCommunityPlatforms = {
  __typename?: 'SettingsCommunityPlatforms';
  name?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
  link?: Maybe<Scalars['String']['output']>;
  members?: Maybe<Scalars['String']['output']>;
  activity?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
};

export type SettingsCommunity = {
  __typename?: 'SettingsCommunity';
  stats?: Maybe<Array<Maybe<SettingsCommunityStats>>>;
  platforms?: Maybe<Array<Maybe<SettingsCommunityPlatforms>>>;
};

export type SettingsResearchStats = {
  __typename?: 'SettingsResearchStats';
  number?: Maybe<Scalars['String']['output']>;
  label?: Maybe<Scalars['String']['output']>;
  icon?: Maybe<Scalars['String']['output']>;
};

export type SettingsResearchReports = {
  __typename?: 'SettingsResearchReports';
  title?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  date?: Maybe<Scalars['String']['output']>;
  type?: Maybe<Scalars['String']['output']>;
  pages?: Maybe<Scalars['Float']['output']>;
  downloads?: Maybe<Scalars['String']['output']>;
  downloadUrl?: Maybe<Scalars['String']['output']>;
  coverImage?: Maybe<Scalars['String']['output']>;
  featured?: Maybe<Scalars['Boolean']['output']>;
  tags?: Maybe<Array<Maybe<Scalars['String']['output']>>>;
};

export type SettingsResearch = {
  __typename?: 'SettingsResearch';
  stats?: Maybe<Array<Maybe<SettingsResearchStats>>>;
  reports?: Maybe<Array<Maybe<SettingsResearchReports>>>;
};

export type SettingsNewsletter = {
  __typename?: 'SettingsNewsletter';
  title?: Maybe<Scalars['String']['output']>;
  subtitle?: Maybe<Scalars['String']['output']>;
  frequency?: Maybe<Scalars['String']['output']>;
  subscriberCount?: Maybe<Scalars['String']['output']>;
  signupFormId?: Maybe<Scalars['String']['output']>;
  confirmationMessage?: Maybe<Scalars['String']['output']>;
};

export type SettingsSocialPlatforms = {
  __typename?: 'SettingsSocialPlatforms';
  name?: Maybe<Scalars['String']['output']>;
  url?: Maybe<Scalars['String']['output']>;
  username?: Maybe<Scalars['String']['output']>;
  showInFooter?: Maybe<Scalars['Boolean']['output']>;
  enableSharing?: Maybe<Scalars['Boolean']['output']>;
};

export type SettingsSocial = {
  __typename?: 'SettingsSocial';
  platforms?: Maybe<Array<Maybe<SettingsSocialPlatforms>>>;
  defaultShareText?: Maybe<Scalars['String']['output']>;
};

export type SettingsAnalytics = {
  __typename?: 'SettingsAnalytics';
  googleAnalyticsId?: Maybe<Scalars['String']['output']>;
  googleTagManagerId?: Maybe<Scalars['String']['output']>;
  enableCookieConsent?: Maybe<Scalars['Boolean']['output']>;
  cookieConsentMessage?: Maybe<Scalars['String']['output']>;
};

export type SettingsPerformance = {
  __typename?: 'SettingsPerformance';
  enableImageOptimization?: Maybe<Scalars['Boolean']['output']>;
  enableLazyLoading?: Maybe<Scalars['Boolean']['output']>;
  enableServiceWorker?: Maybe<Scalars['Boolean']['output']>;
  cacheMaxAge?: Maybe<Scalars['Float']['output']>;
};

export type Settings = Node & Document & {
  __typename?: 'Settings';
  title: Scalars['String']['output'];
  description?: Maybe<Scalars['String']['output']>;
  site?: Maybe<SettingsSite>;
  categories?: Maybe<SettingsCategories>;
  uiText?: Maybe<SettingsUiText>;
  community?: Maybe<SettingsCommunity>;
  research?: Maybe<SettingsResearch>;
  newsletter?: Maybe<SettingsNewsletter>;
  social?: Maybe<SettingsSocial>;
  analytics?: Maybe<SettingsAnalytics>;
  performance?: Maybe<SettingsPerformance>;
  id: Scalars['ID']['output'];
  _sys: SystemInfo;
  _values: Scalars['JSON']['output'];
};

export type SettingsSiteGiscusFilter = {
  repo?: InputMaybe<StringFilter>;
  repoId?: InputMaybe<StringFilter>;
  category?: InputMaybe<StringFilter>;
  categoryId?: InputMaybe<StringFilter>;
  mapping?: InputMaybe<StringFilter>;
  reactionsEnabled?: InputMaybe<BooleanFilter>;
  emitMetadata?: InputMaybe<BooleanFilter>;
  inputPosition?: InputMaybe<StringFilter>;
  lang?: InputMaybe<StringFilter>;
  loading?: InputMaybe<StringFilter>;
};

export type SettingsSiteFilter = {
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  logo?: InputMaybe<StringFilter>;
  giscus?: InputMaybe<SettingsSiteGiscusFilter>;
};

export type SettingsCategoriesCategoryMappingsFilter = {
  name?: InputMaybe<StringFilter>;
  slug?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  theme?: InputMaybe<StringFilter>;
};

export type SettingsCategoriesFilter = {
  defaultColor?: InputMaybe<StringFilter>;
  categoryMappings?: InputMaybe<SettingsCategoriesCategoryMappingsFilter>;
};

export type SettingsUiTextFilter = {
  audioAvailableLabel?: InputMaybe<StringFilter>;
  audioTitle?: InputMaybe<StringFilter>;
  audioSubtitle?: InputMaybe<StringFilter>;
  noAudioText?: InputMaybe<StringFilter>;
  byAuthorPrefix?: InputMaybe<StringFilter>;
  aboutAuthorTitle?: InputMaybe<StringFilter>;
  shareLabel?: InputMaybe<StringFilter>;
  shareArticleTitle?: InputMaybe<StringFilter>;
  continueReadingTitle?: InputMaybe<StringFilter>;
  continueReadingSubtitle?: InputMaybe<StringFilter>;
  previousArticleLabel?: InputMaybe<StringFilter>;
  nextArticleLabel?: InputMaybe<StringFilter>;
  reachedBeginningText?: InputMaybe<StringFilter>;
  readAllText?: InputMaybe<StringFilter>;
  browseAllArticlesText?: InputMaybe<StringFilter>;
  tocTitle?: InputMaybe<StringFilter>;
  topicsTitle?: InputMaybe<StringFilter>;
  readingProgressTitle?: InputMaybe<StringFilter>;
  imageCreditText?: InputMaybe<StringFilter>;
  readingTimePrefix?: InputMaybe<StringFilter>;
  defaultCategoryLabel?: InputMaybe<StringFilter>;
  discussionTitle?: InputMaybe<StringFilter>;
  discussionSubtitle?: InputMaybe<StringFilter>;
  relatedTitle?: InputMaybe<StringFilter>;
  relatedSubtitle?: InputMaybe<StringFilter>;
};

export type SettingsCommunityStatsFilter = {
  number?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type SettingsCommunityPlatformsFilter = {
  name?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
  link?: InputMaybe<StringFilter>;
  members?: InputMaybe<StringFilter>;
  activity?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
};

export type SettingsCommunityFilter = {
  stats?: InputMaybe<SettingsCommunityStatsFilter>;
  platforms?: InputMaybe<SettingsCommunityPlatformsFilter>;
};

export type SettingsResearchStatsFilter = {
  number?: InputMaybe<StringFilter>;
  label?: InputMaybe<StringFilter>;
  icon?: InputMaybe<StringFilter>;
};

export type SettingsResearchReportsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  date?: InputMaybe<DatetimeFilter>;
  type?: InputMaybe<StringFilter>;
  pages?: InputMaybe<NumberFilter>;
  downloads?: InputMaybe<StringFilter>;
  downloadUrl?: InputMaybe<StringFilter>;
  coverImage?: InputMaybe<ImageFilter>;
  featured?: InputMaybe<BooleanFilter>;
  tags?: InputMaybe<StringFilter>;
};

export type SettingsResearchFilter = {
  stats?: InputMaybe<SettingsResearchStatsFilter>;
  reports?: InputMaybe<SettingsResearchReportsFilter>;
};

export type SettingsNewsletterFilter = {
  title?: InputMaybe<StringFilter>;
  subtitle?: InputMaybe<StringFilter>;
  frequency?: InputMaybe<StringFilter>;
  subscriberCount?: InputMaybe<StringFilter>;
  signupFormId?: InputMaybe<StringFilter>;
  confirmationMessage?: InputMaybe<StringFilter>;
};

export type SettingsSocialPlatformsFilter = {
  name?: InputMaybe<StringFilter>;
  url?: InputMaybe<StringFilter>;
  username?: InputMaybe<StringFilter>;
  showInFooter?: InputMaybe<BooleanFilter>;
  enableSharing?: InputMaybe<BooleanFilter>;
};

export type SettingsSocialFilter = {
  platforms?: InputMaybe<SettingsSocialPlatformsFilter>;
  defaultShareText?: InputMaybe<StringFilter>;
};

export type SettingsAnalyticsFilter = {
  googleAnalyticsId?: InputMaybe<StringFilter>;
  googleTagManagerId?: InputMaybe<StringFilter>;
  enableCookieConsent?: InputMaybe<BooleanFilter>;
  cookieConsentMessage?: InputMaybe<StringFilter>;
};

export type SettingsPerformanceFilter = {
  enableImageOptimization?: InputMaybe<BooleanFilter>;
  enableLazyLoading?: InputMaybe<BooleanFilter>;
  enableServiceWorker?: InputMaybe<BooleanFilter>;
  cacheMaxAge?: InputMaybe<NumberFilter>;
};

export type SettingsFilter = {
  title?: InputMaybe<StringFilter>;
  description?: InputMaybe<StringFilter>;
  site?: InputMaybe<SettingsSiteFilter>;
  categories?: InputMaybe<SettingsCategoriesFilter>;
  uiText?: InputMaybe<SettingsUiTextFilter>;
  community?: InputMaybe<SettingsCommunityFilter>;
  research?: InputMaybe<SettingsResearchFilter>;
  newsletter?: InputMaybe<SettingsNewsletterFilter>;
  social?: InputMaybe<SettingsSocialFilter>;
  analytics?: InputMaybe<SettingsAnalyticsFilter>;
  performance?: InputMaybe<SettingsPerformanceFilter>;
};

export type SettingsConnectionEdges = {
  __typename?: 'SettingsConnectionEdges';
  cursor: Scalars['String']['output'];
  node?: Maybe<Settings>;
};

export type SettingsConnection = Connection & {
  __typename?: 'SettingsConnection';
  pageInfo: PageInfo;
  totalCount: Scalars['Float']['output'];
  edges?: Maybe<Array<Maybe<SettingsConnectionEdges>>>;
};

export type Mutation = {
  __typename?: 'Mutation';
  addPendingDocument: DocumentNode;
  updateDocument: DocumentNode;
  deleteDocument: DocumentNode;
  createDocument: DocumentNode;
  createFolder: DocumentNode;
  updateBlog: Blog;
  createBlog: Blog;
  updateNewsletter: Newsletter;
  createNewsletter: Newsletter;
  updateAllTopicsPage: AllTopicsPage;
  createAllTopicsPage: AllTopicsPage;
  updatePodcast: Podcast;
  createPodcast: Podcast;
  updateContact: Contact;
  createContact: Contact;
  updateLegal: Legal;
  createLegal: Legal;
  updatePages: Pages;
  createPages: Pages;
  updateCategories: Categories;
  createCategories: Categories;
  updateAuthors: Authors;
  createAuthors: Authors;
  updateSettings: Settings;
  createSettings: Settings;
};


export type MutationAddPendingDocumentArgs = {
  collection: Scalars['String']['input'];
  relativePath: Scalars['String']['input'];
  template?: InputMaybe<Scalars['String']['input']>;
};


export type MutationUpdateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentUpdateMutation;
};


export type MutationDeleteDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationCreateDocumentArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
  params: DocumentMutation;
};


export type MutationCreateFolderArgs = {
  collection?: InputMaybe<Scalars['String']['input']>;
  relativePath: Scalars['String']['input'];
};


export type MutationUpdateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationCreateBlogArgs = {
  relativePath: Scalars['String']['input'];
  params: BlogMutation;
};


export type MutationUpdateNewsletterArgs = {
  relativePath: Scalars['String']['input'];
  params: NewsletterMutation;
};


export type MutationCreateNewsletterArgs = {
  relativePath: Scalars['String']['input'];
  params: NewsletterMutation;
};


export type MutationUpdateAllTopicsPageArgs = {
  relativePath: Scalars['String']['input'];
  params: AllTopicsPageMutation;
};


export type MutationCreateAllTopicsPageArgs = {
  relativePath: Scalars['String']['input'];
  params: AllTopicsPageMutation;
};


export type MutationUpdatePodcastArgs = {
  relativePath: Scalars['String']['input'];
  params: PodcastMutation;
};


export type MutationCreatePodcastArgs = {
  relativePath: Scalars['String']['input'];
  params: PodcastMutation;
};


export type MutationUpdateContactArgs = {
  relativePath: Scalars['String']['input'];
  params: ContactMutation;
};


export type MutationCreateContactArgs = {
  relativePath: Scalars['String']['input'];
  params: ContactMutation;
};


export type MutationUpdateLegalArgs = {
  relativePath: Scalars['String']['input'];
  params: LegalMutation;
};


export type MutationCreateLegalArgs = {
  relativePath: Scalars['String']['input'];
  params: LegalMutation;
};


export type MutationUpdatePagesArgs = {
  relativePath: Scalars['String']['input'];
  params: PagesMutation;
};


export type MutationCreatePagesArgs = {
  relativePath: Scalars['String']['input'];
  params: PagesMutation;
};


export type MutationUpdateCategoriesArgs = {
  relativePath: Scalars['String']['input'];
  params: CategoriesMutation;
};


export type MutationCreateCategoriesArgs = {
  relativePath: Scalars['String']['input'];
  params: CategoriesMutation;
};


export type MutationUpdateAuthorsArgs = {
  relativePath: Scalars['String']['input'];
  params: AuthorsMutation;
};


export type MutationCreateAuthorsArgs = {
  relativePath: Scalars['String']['input'];
  params: AuthorsMutation;
};


export type MutationUpdateSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: SettingsMutation;
};


export type MutationCreateSettingsArgs = {
  relativePath: Scalars['String']['input'];
  params: SettingsMutation;
};

export type DocumentUpdateMutation = {
  blog?: InputMaybe<BlogMutation>;
  newsletter?: InputMaybe<NewsletterMutation>;
  allTopicsPage?: InputMaybe<AllTopicsPageMutation>;
  podcast?: InputMaybe<PodcastMutation>;
  contact?: InputMaybe<ContactMutation>;
  legal?: InputMaybe<LegalMutation>;
  pages?: InputMaybe<PagesMutation>;
  categories?: InputMaybe<CategoriesMutation>;
  authors?: InputMaybe<AuthorsMutation>;
  settings?: InputMaybe<SettingsMutation>;
  relativePath?: InputMaybe<Scalars['String']['input']>;
};

export type DocumentMutation = {
  blog?: InputMaybe<BlogMutation>;
  newsletter?: InputMaybe<NewsletterMutation>;
  allTopicsPage?: InputMaybe<AllTopicsPageMutation>;
  podcast?: InputMaybe<PodcastMutation>;
  contact?: InputMaybe<ContactMutation>;
  legal?: InputMaybe<LegalMutation>;
  pages?: InputMaybe<PagesMutation>;
  categories?: InputMaybe<CategoriesMutation>;
  authors?: InputMaybe<AuthorsMutation>;
  settings?: InputMaybe<SettingsMutation>;
};

export type BlogEditorialMutation = {
  status?: InputMaybe<Scalars['String']['input']>;
  assignedEditor?: InputMaybe<Scalars['String']['input']>;
  editorNotes?: InputMaybe<Scalars['String']['input']>;
};

export type BlogAuthorInfoSocialMutation = {
  twitter?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  github?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type BlogAuthorInfoMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  avatar?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  social?: InputMaybe<BlogAuthorInfoSocialMutation>;
};

export type BlogHeroImageMutation = {
  imageType?: InputMaybe<Scalars['String']['input']>;
  uploadedImage?: InputMaybe<Scalars['String']['input']>;
  externalUrl?: InputMaybe<Scalars['String']['input']>;
  alt?: InputMaybe<Scalars['String']['input']>;
  caption?: InputMaybe<Scalars['String']['input']>;
};

export type BlogSeoMutation = {
  customSEO?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BlogMutation = {
  editorial?: InputMaybe<BlogEditorialMutation>;
  title?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  updatedDate?: InputMaybe<Scalars['String']['input']>;
  authorInfo?: InputMaybe<BlogAuthorInfoMutation>;
  heroImage?: InputMaybe<BlogHeroImageMutation>;
  image?: InputMaybe<Scalars['String']['input']>;
  imageAlt?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  storyType?: InputMaybe<Scalars['String']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  trending?: InputMaybe<Scalars['Boolean']['input']>;
  draft?: InputMaybe<Scalars['Boolean']['input']>;
  readTime?: InputMaybe<Scalars['String']['input']>;
  hasAudio?: InputMaybe<Scalars['Boolean']['input']>;
  audioUrl?: InputMaybe<Scalars['String']['input']>;
  audioDuration?: InputMaybe<Scalars['String']['input']>;
  audioTranscript?: InputMaybe<Scalars['String']['input']>;
  seo?: InputMaybe<BlogSeoMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type NewsletterHighlightsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type NewsletterStatsMutation = {
  subscribers?: InputMaybe<Scalars['Float']['input']>;
  openRate?: InputMaybe<Scalars['Float']['input']>;
  clickRate?: InputMaybe<Scalars['Float']['input']>;
};

export type NewsletterSeoMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type NewsletterMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  issueNumber?: InputMaybe<Scalars['Float']['input']>;
  newsletterType?: InputMaybe<Scalars['String']['input']>;
  excerpt?: InputMaybe<Scalars['String']['input']>;
  subscriberOnly?: InputMaybe<Scalars['Boolean']['input']>;
  previewContent?: InputMaybe<Scalars['String']['input']>;
  publishDate?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  coverImage?: InputMaybe<Scalars['String']['input']>;
  highlights?: InputMaybe<Array<InputMaybe<NewsletterHighlightsMutation>>>;
  trackStats?: InputMaybe<Scalars['Boolean']['input']>;
  stats?: InputMaybe<NewsletterStatsMutation>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  seo?: InputMaybe<NewsletterSeoMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type AllTopicsPageHeroMutation = {
  badgeText?: InputMaybe<Scalars['String']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  titleAccent?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
};

export type AllTopicsPageTopicsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  href?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  audience?: InputMaybe<Scalars['String']['input']>;
};

export type AllTopicsPageStatsMutation = {
  topicCount?: InputMaybe<Scalars['Float']['input']>;
  articleCount?: InputMaybe<Scalars['String']['input']>;
  storiesLabel?: InputMaybe<Scalars['String']['input']>;
};

export type AllTopicsPageCtaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  primaryButtonText?: InputMaybe<Scalars['String']['input']>;
  primaryButtonLink?: InputMaybe<Scalars['String']['input']>;
  secondaryButtonText?: InputMaybe<Scalars['String']['input']>;
  secondaryButtonLink?: InputMaybe<Scalars['String']['input']>;
};

export type AllTopicsPageMutation = {
  hero?: InputMaybe<AllTopicsPageHeroMutation>;
  topics?: InputMaybe<Array<InputMaybe<AllTopicsPageTopicsMutation>>>;
  stats?: InputMaybe<AllTopicsPageStatsMutation>;
  cta?: InputMaybe<AllTopicsPageCtaMutation>;
};

export type PodcastGuestsSocialMutation = {
  twitter?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
};

export type PodcastGuestsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  photo?: InputMaybe<Scalars['String']['input']>;
  social?: InputMaybe<PodcastGuestsSocialMutation>;
};

export type PodcastSeoMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
};

export type PodcastMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  episode?: InputMaybe<Scalars['Float']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  status?: InputMaybe<Scalars['String']['input']>;
  duration?: InputMaybe<Scalars['String']['input']>;
  audioUrl?: InputMaybe<Scalars['String']['input']>;
  downloadable?: InputMaybe<Scalars['Boolean']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
  guests?: InputMaybe<Array<InputMaybe<PodcastGuestsMutation>>>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  transcript?: InputMaybe<Scalars['String']['input']>;
  seo?: InputMaybe<PodcastSeoMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type ContactHeroMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  titleAccent?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  responseTime?: InputMaybe<Scalars['String']['input']>;
  badgeText?: InputMaybe<Scalars['String']['input']>;
};

export type ContactContactMethodsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ContactSocialLinksMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  showInContact?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ContactFaqItemsMutation = {
  question?: InputMaybe<Scalars['String']['input']>;
  answer?: InputMaybe<Scalars['JSON']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ContactFaqMutation = {
  enabled?: InputMaybe<Scalars['Boolean']['input']>;
  title?: InputMaybe<Scalars['String']['input']>;
  titleAccent?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  items?: InputMaybe<Array<InputMaybe<ContactFaqItemsMutation>>>;
};

export type ContactCtaPrimaryButtonMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type ContactCtaSecondaryButtonMutation = {
  text?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
};

export type ContactCtaMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  titleAccent?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  primaryButton?: InputMaybe<ContactCtaPrimaryButtonMutation>;
  secondaryButton?: InputMaybe<ContactCtaSecondaryButtonMutation>;
};

export type ContactSeoMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ContactMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  hero?: InputMaybe<ContactHeroMutation>;
  contactMethods?: InputMaybe<Array<InputMaybe<ContactContactMethodsMutation>>>;
  socialLinks?: InputMaybe<Array<InputMaybe<ContactSocialLinksMutation>>>;
  faq?: InputMaybe<ContactFaqMutation>;
  cta?: InputMaybe<ContactCtaMutation>;
  seo?: InputMaybe<ContactSeoMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type LegalContactMutation = {
  email?: InputMaybe<Scalars['String']['input']>;
  address?: InputMaybe<Scalars['String']['input']>;
  phone?: InputMaybe<Scalars['String']['input']>;
};

export type LegalSeoMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
};

export type LegalMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  updatedDate?: InputMaybe<Scalars['String']['input']>;
  effectiveDate?: InputMaybe<Scalars['String']['input']>;
  pageType?: InputMaybe<Scalars['String']['input']>;
  contact?: InputMaybe<LegalContactMutation>;
  seo?: InputMaybe<LegalSeoMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type PagesHeroMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  image?: InputMaybe<Scalars['String']['input']>;
};

export type PagesSeoMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  canonical?: InputMaybe<Scalars['String']['input']>;
  noindex?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PagesMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  pubDate?: InputMaybe<Scalars['String']['input']>;
  updatedDate?: InputMaybe<Scalars['String']['input']>;
  layout?: InputMaybe<Scalars['String']['input']>;
  hero?: InputMaybe<PagesHeroMutation>;
  seo?: InputMaybe<PagesSeoMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type CategoriesSeoMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
};

export type CategoriesMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  theme?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  sortOrder?: InputMaybe<Scalars['Float']['input']>;
  seo?: InputMaybe<CategoriesSeoMutation>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type AuthorsSocialMutation = {
  twitter?: InputMaybe<Scalars['String']['input']>;
  linkedin?: InputMaybe<Scalars['String']['input']>;
  github?: InputMaybe<Scalars['String']['input']>;
  website?: InputMaybe<Scalars['String']['input']>;
};

export type AuthorsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  bio?: InputMaybe<Scalars['String']['input']>;
  avatar?: InputMaybe<Scalars['String']['input']>;
  role?: InputMaybe<Scalars['String']['input']>;
  company?: InputMaybe<Scalars['String']['input']>;
  email?: InputMaybe<Scalars['String']['input']>;
  social?: InputMaybe<AuthorsSocialMutation>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  body?: InputMaybe<Scalars['JSON']['input']>;
};

export type SettingsSiteGiscusMutation = {
  repo?: InputMaybe<Scalars['String']['input']>;
  repoId?: InputMaybe<Scalars['String']['input']>;
  category?: InputMaybe<Scalars['String']['input']>;
  categoryId?: InputMaybe<Scalars['String']['input']>;
  mapping?: InputMaybe<Scalars['String']['input']>;
  reactionsEnabled?: InputMaybe<Scalars['Boolean']['input']>;
  emitMetadata?: InputMaybe<Scalars['Boolean']['input']>;
  inputPosition?: InputMaybe<Scalars['String']['input']>;
  lang?: InputMaybe<Scalars['String']['input']>;
  loading?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsSiteMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  logo?: InputMaybe<Scalars['String']['input']>;
  giscus?: InputMaybe<SettingsSiteGiscusMutation>;
};

export type SettingsCategoriesCategoryMappingsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  slug?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  theme?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsCategoriesMutation = {
  defaultColor?: InputMaybe<Scalars['String']['input']>;
  categoryMappings?: InputMaybe<Array<InputMaybe<SettingsCategoriesCategoryMappingsMutation>>>;
};

export type SettingsUiTextMutation = {
  audioAvailableLabel?: InputMaybe<Scalars['String']['input']>;
  audioTitle?: InputMaybe<Scalars['String']['input']>;
  audioSubtitle?: InputMaybe<Scalars['String']['input']>;
  noAudioText?: InputMaybe<Scalars['String']['input']>;
  byAuthorPrefix?: InputMaybe<Scalars['String']['input']>;
  aboutAuthorTitle?: InputMaybe<Scalars['String']['input']>;
  shareLabel?: InputMaybe<Scalars['String']['input']>;
  shareArticleTitle?: InputMaybe<Scalars['String']['input']>;
  continueReadingTitle?: InputMaybe<Scalars['String']['input']>;
  continueReadingSubtitle?: InputMaybe<Scalars['String']['input']>;
  previousArticleLabel?: InputMaybe<Scalars['String']['input']>;
  nextArticleLabel?: InputMaybe<Scalars['String']['input']>;
  reachedBeginningText?: InputMaybe<Scalars['String']['input']>;
  readAllText?: InputMaybe<Scalars['String']['input']>;
  browseAllArticlesText?: InputMaybe<Scalars['String']['input']>;
  tocTitle?: InputMaybe<Scalars['String']['input']>;
  topicsTitle?: InputMaybe<Scalars['String']['input']>;
  readingProgressTitle?: InputMaybe<Scalars['String']['input']>;
  imageCreditText?: InputMaybe<Scalars['String']['input']>;
  readingTimePrefix?: InputMaybe<Scalars['String']['input']>;
  defaultCategoryLabel?: InputMaybe<Scalars['String']['input']>;
  discussionTitle?: InputMaybe<Scalars['String']['input']>;
  discussionSubtitle?: InputMaybe<Scalars['String']['input']>;
  relatedTitle?: InputMaybe<Scalars['String']['input']>;
  relatedSubtitle?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsCommunityStatsMutation = {
  number?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsCommunityPlatformsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
  link?: InputMaybe<Scalars['String']['input']>;
  members?: InputMaybe<Scalars['String']['input']>;
  activity?: InputMaybe<Scalars['String']['input']>;
  color?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsCommunityMutation = {
  stats?: InputMaybe<Array<InputMaybe<SettingsCommunityStatsMutation>>>;
  platforms?: InputMaybe<Array<InputMaybe<SettingsCommunityPlatformsMutation>>>;
};

export type SettingsResearchStatsMutation = {
  number?: InputMaybe<Scalars['String']['input']>;
  label?: InputMaybe<Scalars['String']['input']>;
  icon?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsResearchReportsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  date?: InputMaybe<Scalars['String']['input']>;
  type?: InputMaybe<Scalars['String']['input']>;
  pages?: InputMaybe<Scalars['Float']['input']>;
  downloads?: InputMaybe<Scalars['String']['input']>;
  downloadUrl?: InputMaybe<Scalars['String']['input']>;
  coverImage?: InputMaybe<Scalars['String']['input']>;
  featured?: InputMaybe<Scalars['Boolean']['input']>;
  tags?: InputMaybe<Array<InputMaybe<Scalars['String']['input']>>>;
};

export type SettingsResearchMutation = {
  stats?: InputMaybe<Array<InputMaybe<SettingsResearchStatsMutation>>>;
  reports?: InputMaybe<Array<InputMaybe<SettingsResearchReportsMutation>>>;
};

export type SettingsNewsletterMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  subtitle?: InputMaybe<Scalars['String']['input']>;
  frequency?: InputMaybe<Scalars['String']['input']>;
  subscriberCount?: InputMaybe<Scalars['String']['input']>;
  signupFormId?: InputMaybe<Scalars['String']['input']>;
  confirmationMessage?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsSocialPlatformsMutation = {
  name?: InputMaybe<Scalars['String']['input']>;
  url?: InputMaybe<Scalars['String']['input']>;
  username?: InputMaybe<Scalars['String']['input']>;
  showInFooter?: InputMaybe<Scalars['Boolean']['input']>;
  enableSharing?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SettingsSocialMutation = {
  platforms?: InputMaybe<Array<InputMaybe<SettingsSocialPlatformsMutation>>>;
  defaultShareText?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsAnalyticsMutation = {
  googleAnalyticsId?: InputMaybe<Scalars['String']['input']>;
  googleTagManagerId?: InputMaybe<Scalars['String']['input']>;
  enableCookieConsent?: InputMaybe<Scalars['Boolean']['input']>;
  cookieConsentMessage?: InputMaybe<Scalars['String']['input']>;
};

export type SettingsPerformanceMutation = {
  enableImageOptimization?: InputMaybe<Scalars['Boolean']['input']>;
  enableLazyLoading?: InputMaybe<Scalars['Boolean']['input']>;
  enableServiceWorker?: InputMaybe<Scalars['Boolean']['input']>;
  cacheMaxAge?: InputMaybe<Scalars['Float']['input']>;
};

export type SettingsMutation = {
  title?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  site?: InputMaybe<SettingsSiteMutation>;
  categories?: InputMaybe<SettingsCategoriesMutation>;
  uiText?: InputMaybe<SettingsUiTextMutation>;
  community?: InputMaybe<SettingsCommunityMutation>;
  research?: InputMaybe<SettingsResearchMutation>;
  newsletter?: InputMaybe<SettingsNewsletterMutation>;
  social?: InputMaybe<SettingsSocialMutation>;
  analytics?: InputMaybe<SettingsAnalyticsMutation>;
  performance?: InputMaybe<SettingsPerformanceMutation>;
};

export type BlogPartsFragment = { __typename: 'Blog', title: string, excerpt: string, pubDate: string, updatedDate?: string | null, image?: string | null, imageAlt?: string | null, category: string, storyType?: string | null, tags?: Array<string | null> | null, featured?: boolean | null, trending?: boolean | null, draft?: boolean | null, readTime?: string | null, hasAudio?: boolean | null, audioUrl?: string | null, audioDuration?: string | null, audioTranscript?: string | null, body?: any | null, editorial?: { __typename: 'BlogEditorial', status?: string | null, assignedEditor?: string | null, editorNotes?: string | null } | null, authorInfo?: { __typename: 'BlogAuthorInfo', name: string, bio?: string | null, avatar?: string | null, role?: string | null, social?: { __typename: 'BlogAuthorInfoSocial', twitter?: string | null, linkedin?: string | null, github?: string | null, website?: string | null } | null } | null, heroImage?: { __typename: 'BlogHeroImage', imageType: string, uploadedImage?: string | null, externalUrl?: string | null, alt: string, caption?: string | null } | null, seo?: { __typename: 'BlogSeo', customSEO?: boolean | null, title?: string | null, description?: string | null, canonical?: string | null, noindex?: boolean | null } | null };

export type NewsletterPartsFragment = { __typename: 'Newsletter', title: string, issueNumber: number, newsletterType: string, excerpt: string, subscriberOnly?: boolean | null, previewContent?: string | null, publishDate: string, status?: string | null, featured?: boolean | null, coverImage?: string | null, trackStats?: boolean | null, tags?: Array<string | null> | null, body?: any | null, highlights?: Array<{ __typename: 'NewsletterHighlights', title: string, description?: string | null, link?: string | null } | null> | null, stats?: { __typename: 'NewsletterStats', subscribers?: number | null, openRate?: number | null, clickRate?: number | null } | null, seo?: { __typename: 'NewsletterSeo', title?: string | null, description?: string | null } | null };

export type AllTopicsPagePartsFragment = { __typename: 'AllTopicsPage', hero?: { __typename: 'AllTopicsPageHero', badgeText: string, title: string, titleAccent: string, subtitle: string } | null, topics?: Array<{ __typename: 'AllTopicsPageTopics', name: string, href: string, description: string, audience: string } | null> | null, stats?: { __typename: 'AllTopicsPageStats', topicCount?: number | null, articleCount?: string | null, storiesLabel?: string | null } | null, cta?: { __typename: 'AllTopicsPageCta', title: string, description: string, primaryButtonText: string, primaryButtonLink: string, secondaryButtonText: string, secondaryButtonLink: string } | null };

export type PodcastPartsFragment = { __typename: 'Podcast', title: string, episode: number, description: string, pubDate: string, status?: string | null, duration: string, audioUrl?: string | null, downloadable?: boolean | null, image?: string | null, tags?: Array<string | null> | null, featured?: boolean | null, transcript?: string | null, body?: any | null, guests?: Array<{ __typename: 'PodcastGuests', name: string, role?: string | null, company?: string | null, bio?: string | null, photo?: string | null, social?: { __typename: 'PodcastGuestsSocial', twitter?: string | null, linkedin?: string | null } | null } | null> | null, seo?: { __typename: 'PodcastSeo', title?: string | null, description?: string | null, canonical?: string | null } | null };

export type ContactPartsFragment = { __typename: 'Contact', title: string, description?: string | null, pubDate?: string | null, body?: any | null, hero?: { __typename: 'ContactHero', title?: string | null, titleAccent?: string | null, subtitle?: string | null, responseTime?: string | null, badgeText?: string | null } | null, contactMethods?: Array<{ __typename: 'ContactContactMethods', title: string, description?: string | null, email: string, icon?: string | null, color?: string | null, featured?: boolean | null } | null> | null, socialLinks?: Array<{ __typename: 'ContactSocialLinks', name: string, url: string, icon?: string | null, color?: string | null, showInContact?: boolean | null } | null> | null, faq?: { __typename: 'ContactFaq', enabled?: boolean | null, title?: string | null, titleAccent?: string | null, subtitle?: string | null, items?: Array<{ __typename: 'ContactFaqItems', question: string, answer: any, category?: string | null, featured?: boolean | null } | null> | null } | null, cta?: { __typename: 'ContactCta', title?: string | null, titleAccent?: string | null, subtitle?: string | null, primaryButton?: { __typename: 'ContactCtaPrimaryButton', text?: string | null, link?: string | null } | null, secondaryButton?: { __typename: 'ContactCtaSecondaryButton', text?: string | null, link?: string | null } | null } | null, seo?: { __typename: 'ContactSeo', title?: string | null, description?: string | null, canonical?: string | null, noindex?: boolean | null } | null };

export type LegalPartsFragment = { __typename: 'Legal', title: string, description: string, pubDate: string, updatedDate?: string | null, effectiveDate?: string | null, pageType?: string | null, body?: any | null, contact?: { __typename: 'LegalContact', email?: string | null, address?: string | null, phone?: string | null } | null, seo?: { __typename: 'LegalSeo', title?: string | null, description?: string | null, noindex?: boolean | null } | null };

export type PagesPartsFragment = { __typename: 'Pages', title: string, description: string, pubDate: string, updatedDate?: string | null, layout?: string | null, body?: any | null, hero?: { __typename: 'PagesHero', title?: string | null, subtitle?: string | null, image?: string | null } | null, seo?: { __typename: 'PagesSeo', title?: string | null, description?: string | null, canonical?: string | null, noindex?: boolean | null } | null };

export type CategoriesPartsFragment = { __typename: 'Categories', name: string, slug: string, description: string, theme: string, icon: string, color: string, featured?: boolean | null, sortOrder?: number | null, body?: any | null, seo?: { __typename: 'CategoriesSeo', title?: string | null, description?: string | null } | null };

export type AuthorsPartsFragment = { __typename: 'Authors', name: string, bio?: string | null, avatar?: string | null, role?: string | null, company?: string | null, email?: string | null, featured?: boolean | null, body?: any | null, social?: { __typename: 'AuthorsSocial', twitter?: string | null, linkedin?: string | null, github?: string | null, website?: string | null } | null };

export type SettingsPartsFragment = { __typename: 'Settings', title: string, description?: string | null, site?: { __typename: 'SettingsSite', name: string, description?: string | null, url?: string | null, logo?: string | null, giscus?: { __typename: 'SettingsSiteGiscus', repo?: string | null, repoId?: string | null, category?: string | null, categoryId?: string | null, mapping?: string | null, reactionsEnabled?: boolean | null, emitMetadata?: boolean | null, inputPosition?: string | null, lang?: string | null, loading?: string | null } | null } | null, categories?: { __typename: 'SettingsCategories', defaultColor?: string | null, categoryMappings?: Array<{ __typename: 'SettingsCategoriesCategoryMappings', name?: string | null, slug?: string | null, color?: string | null, description?: string | null, icon?: string | null, theme?: string | null } | null> | null } | null, uiText?: { __typename: 'SettingsUiText', audioAvailableLabel?: string | null, audioTitle?: string | null, audioSubtitle?: string | null, noAudioText?: string | null, byAuthorPrefix?: string | null, aboutAuthorTitle?: string | null, shareLabel?: string | null, shareArticleTitle?: string | null, continueReadingTitle?: string | null, continueReadingSubtitle?: string | null, previousArticleLabel?: string | null, nextArticleLabel?: string | null, reachedBeginningText?: string | null, readAllText?: string | null, browseAllArticlesText?: string | null, tocTitle?: string | null, topicsTitle?: string | null, readingProgressTitle?: string | null, imageCreditText?: string | null, readingTimePrefix?: string | null, defaultCategoryLabel?: string | null, discussionTitle?: string | null, discussionSubtitle?: string | null, relatedTitle?: string | null, relatedSubtitle?: string | null } | null, community?: { __typename: 'SettingsCommunity', stats?: Array<{ __typename: 'SettingsCommunityStats', number?: string | null, label?: string | null, icon?: string | null } | null> | null, platforms?: Array<{ __typename: 'SettingsCommunityPlatforms', name?: string | null, description?: string | null, icon?: string | null, link?: string | null, members?: string | null, activity?: string | null, color?: string | null } | null> | null } | null, research?: { __typename: 'SettingsResearch', stats?: Array<{ __typename: 'SettingsResearchStats', number?: string | null, label?: string | null, icon?: string | null } | null> | null, reports?: Array<{ __typename: 'SettingsResearchReports', title?: string | null, description?: string | null, date?: string | null, type?: string | null, pages?: number | null, downloads?: string | null, downloadUrl?: string | null, coverImage?: string | null, featured?: boolean | null, tags?: Array<string | null> | null } | null> | null } | null, newsletter?: { __typename: 'SettingsNewsletter', title?: string | null, subtitle?: string | null, frequency?: string | null, subscriberCount?: string | null, signupFormId?: string | null, confirmationMessage?: string | null } | null, social?: { __typename: 'SettingsSocial', defaultShareText?: string | null, platforms?: Array<{ __typename: 'SettingsSocialPlatforms', name?: string | null, url?: string | null, username?: string | null, showInFooter?: boolean | null, enableSharing?: boolean | null } | null> | null } | null, analytics?: { __typename: 'SettingsAnalytics', googleAnalyticsId?: string | null, googleTagManagerId?: string | null, enableCookieConsent?: boolean | null, cookieConsentMessage?: string | null } | null, performance?: { __typename: 'SettingsPerformance', enableImageOptimization?: boolean | null, enableLazyLoading?: boolean | null, enableServiceWorker?: boolean | null, cacheMaxAge?: number | null } | null };

export type BlogQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type BlogQuery = { __typename?: 'Query', blog: { __typename: 'Blog', id: string, title: string, excerpt: string, pubDate: string, updatedDate?: string | null, image?: string | null, imageAlt?: string | null, category: string, storyType?: string | null, tags?: Array<string | null> | null, featured?: boolean | null, trending?: boolean | null, draft?: boolean | null, readTime?: string | null, hasAudio?: boolean | null, audioUrl?: string | null, audioDuration?: string | null, audioTranscript?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, editorial?: { __typename: 'BlogEditorial', status?: string | null, assignedEditor?: string | null, editorNotes?: string | null } | null, authorInfo?: { __typename: 'BlogAuthorInfo', name: string, bio?: string | null, avatar?: string | null, role?: string | null, social?: { __typename: 'BlogAuthorInfoSocial', twitter?: string | null, linkedin?: string | null, github?: string | null, website?: string | null } | null } | null, heroImage?: { __typename: 'BlogHeroImage', imageType: string, uploadedImage?: string | null, externalUrl?: string | null, alt: string, caption?: string | null } | null, seo?: { __typename: 'BlogSeo', customSEO?: boolean | null, title?: string | null, description?: string | null, canonical?: string | null, noindex?: boolean | null } | null } };

export type BlogConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<BlogFilter>;
}>;


export type BlogConnectionQuery = { __typename?: 'Query', blogConnection: { __typename?: 'BlogConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'BlogConnectionEdges', cursor: string, node?: { __typename: 'Blog', id: string, title: string, excerpt: string, pubDate: string, updatedDate?: string | null, image?: string | null, imageAlt?: string | null, category: string, storyType?: string | null, tags?: Array<string | null> | null, featured?: boolean | null, trending?: boolean | null, draft?: boolean | null, readTime?: string | null, hasAudio?: boolean | null, audioUrl?: string | null, audioDuration?: string | null, audioTranscript?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, editorial?: { __typename: 'BlogEditorial', status?: string | null, assignedEditor?: string | null, editorNotes?: string | null } | null, authorInfo?: { __typename: 'BlogAuthorInfo', name: string, bio?: string | null, avatar?: string | null, role?: string | null, social?: { __typename: 'BlogAuthorInfoSocial', twitter?: string | null, linkedin?: string | null, github?: string | null, website?: string | null } | null } | null, heroImage?: { __typename: 'BlogHeroImage', imageType: string, uploadedImage?: string | null, externalUrl?: string | null, alt: string, caption?: string | null } | null, seo?: { __typename: 'BlogSeo', customSEO?: boolean | null, title?: string | null, description?: string | null, canonical?: string | null, noindex?: boolean | null } | null } | null } | null> | null } };

export type NewsletterQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type NewsletterQuery = { __typename?: 'Query', newsletter: { __typename: 'Newsletter', id: string, title: string, issueNumber: number, newsletterType: string, excerpt: string, subscriberOnly?: boolean | null, previewContent?: string | null, publishDate: string, status?: string | null, featured?: boolean | null, coverImage?: string | null, trackStats?: boolean | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, highlights?: Array<{ __typename: 'NewsletterHighlights', title: string, description?: string | null, link?: string | null } | null> | null, stats?: { __typename: 'NewsletterStats', subscribers?: number | null, openRate?: number | null, clickRate?: number | null } | null, seo?: { __typename: 'NewsletterSeo', title?: string | null, description?: string | null } | null } };

export type NewsletterConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<NewsletterFilter>;
}>;


export type NewsletterConnectionQuery = { __typename?: 'Query', newsletterConnection: { __typename?: 'NewsletterConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'NewsletterConnectionEdges', cursor: string, node?: { __typename: 'Newsletter', id: string, title: string, issueNumber: number, newsletterType: string, excerpt: string, subscriberOnly?: boolean | null, previewContent?: string | null, publishDate: string, status?: string | null, featured?: boolean | null, coverImage?: string | null, trackStats?: boolean | null, tags?: Array<string | null> | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, highlights?: Array<{ __typename: 'NewsletterHighlights', title: string, description?: string | null, link?: string | null } | null> | null, stats?: { __typename: 'NewsletterStats', subscribers?: number | null, openRate?: number | null, clickRate?: number | null } | null, seo?: { __typename: 'NewsletterSeo', title?: string | null, description?: string | null } | null } | null } | null> | null } };

export type AllTopicsPageQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type AllTopicsPageQuery = { __typename?: 'Query', allTopicsPage: { __typename: 'AllTopicsPage', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'AllTopicsPageHero', badgeText: string, title: string, titleAccent: string, subtitle: string } | null, topics?: Array<{ __typename: 'AllTopicsPageTopics', name: string, href: string, description: string, audience: string } | null> | null, stats?: { __typename: 'AllTopicsPageStats', topicCount?: number | null, articleCount?: string | null, storiesLabel?: string | null } | null, cta?: { __typename: 'AllTopicsPageCta', title: string, description: string, primaryButtonText: string, primaryButtonLink: string, secondaryButtonText: string, secondaryButtonLink: string } | null } };

export type AllTopicsPageConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AllTopicsPageFilter>;
}>;


export type AllTopicsPageConnectionQuery = { __typename?: 'Query', allTopicsPageConnection: { __typename?: 'AllTopicsPageConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AllTopicsPageConnectionEdges', cursor: string, node?: { __typename: 'AllTopicsPage', id: string, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'AllTopicsPageHero', badgeText: string, title: string, titleAccent: string, subtitle: string } | null, topics?: Array<{ __typename: 'AllTopicsPageTopics', name: string, href: string, description: string, audience: string } | null> | null, stats?: { __typename: 'AllTopicsPageStats', topicCount?: number | null, articleCount?: string | null, storiesLabel?: string | null } | null, cta?: { __typename: 'AllTopicsPageCta', title: string, description: string, primaryButtonText: string, primaryButtonLink: string, secondaryButtonText: string, secondaryButtonLink: string } | null } | null } | null> | null } };

export type PodcastQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PodcastQuery = { __typename?: 'Query', podcast: { __typename: 'Podcast', id: string, title: string, episode: number, description: string, pubDate: string, status?: string | null, duration: string, audioUrl?: string | null, downloadable?: boolean | null, image?: string | null, tags?: Array<string | null> | null, featured?: boolean | null, transcript?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, guests?: Array<{ __typename: 'PodcastGuests', name: string, role?: string | null, company?: string | null, bio?: string | null, photo?: string | null, social?: { __typename: 'PodcastGuestsSocial', twitter?: string | null, linkedin?: string | null } | null } | null> | null, seo?: { __typename: 'PodcastSeo', title?: string | null, description?: string | null, canonical?: string | null } | null } };

export type PodcastConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PodcastFilter>;
}>;


export type PodcastConnectionQuery = { __typename?: 'Query', podcastConnection: { __typename?: 'PodcastConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PodcastConnectionEdges', cursor: string, node?: { __typename: 'Podcast', id: string, title: string, episode: number, description: string, pubDate: string, status?: string | null, duration: string, audioUrl?: string | null, downloadable?: boolean | null, image?: string | null, tags?: Array<string | null> | null, featured?: boolean | null, transcript?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, guests?: Array<{ __typename: 'PodcastGuests', name: string, role?: string | null, company?: string | null, bio?: string | null, photo?: string | null, social?: { __typename: 'PodcastGuestsSocial', twitter?: string | null, linkedin?: string | null } | null } | null> | null, seo?: { __typename: 'PodcastSeo', title?: string | null, description?: string | null, canonical?: string | null } | null } | null } | null> | null } };

export type ContactQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type ContactQuery = { __typename?: 'Query', contact: { __typename: 'Contact', id: string, title: string, description?: string | null, pubDate?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'ContactHero', title?: string | null, titleAccent?: string | null, subtitle?: string | null, responseTime?: string | null, badgeText?: string | null } | null, contactMethods?: Array<{ __typename: 'ContactContactMethods', title: string, description?: string | null, email: string, icon?: string | null, color?: string | null, featured?: boolean | null } | null> | null, socialLinks?: Array<{ __typename: 'ContactSocialLinks', name: string, url: string, icon?: string | null, color?: string | null, showInContact?: boolean | null } | null> | null, faq?: { __typename: 'ContactFaq', enabled?: boolean | null, title?: string | null, titleAccent?: string | null, subtitle?: string | null, items?: Array<{ __typename: 'ContactFaqItems', question: string, answer: any, category?: string | null, featured?: boolean | null } | null> | null } | null, cta?: { __typename: 'ContactCta', title?: string | null, titleAccent?: string | null, subtitle?: string | null, primaryButton?: { __typename: 'ContactCtaPrimaryButton', text?: string | null, link?: string | null } | null, secondaryButton?: { __typename: 'ContactCtaSecondaryButton', text?: string | null, link?: string | null } | null } | null, seo?: { __typename: 'ContactSeo', title?: string | null, description?: string | null, canonical?: string | null, noindex?: boolean | null } | null } };

export type ContactConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<ContactFilter>;
}>;


export type ContactConnectionQuery = { __typename?: 'Query', contactConnection: { __typename?: 'ContactConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'ContactConnectionEdges', cursor: string, node?: { __typename: 'Contact', id: string, title: string, description?: string | null, pubDate?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'ContactHero', title?: string | null, titleAccent?: string | null, subtitle?: string | null, responseTime?: string | null, badgeText?: string | null } | null, contactMethods?: Array<{ __typename: 'ContactContactMethods', title: string, description?: string | null, email: string, icon?: string | null, color?: string | null, featured?: boolean | null } | null> | null, socialLinks?: Array<{ __typename: 'ContactSocialLinks', name: string, url: string, icon?: string | null, color?: string | null, showInContact?: boolean | null } | null> | null, faq?: { __typename: 'ContactFaq', enabled?: boolean | null, title?: string | null, titleAccent?: string | null, subtitle?: string | null, items?: Array<{ __typename: 'ContactFaqItems', question: string, answer: any, category?: string | null, featured?: boolean | null } | null> | null } | null, cta?: { __typename: 'ContactCta', title?: string | null, titleAccent?: string | null, subtitle?: string | null, primaryButton?: { __typename: 'ContactCtaPrimaryButton', text?: string | null, link?: string | null } | null, secondaryButton?: { __typename: 'ContactCtaSecondaryButton', text?: string | null, link?: string | null } | null } | null, seo?: { __typename: 'ContactSeo', title?: string | null, description?: string | null, canonical?: string | null, noindex?: boolean | null } | null } | null } | null> | null } };

export type LegalQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type LegalQuery = { __typename?: 'Query', legal: { __typename: 'Legal', id: string, title: string, description: string, pubDate: string, updatedDate?: string | null, effectiveDate?: string | null, pageType?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact?: { __typename: 'LegalContact', email?: string | null, address?: string | null, phone?: string | null } | null, seo?: { __typename: 'LegalSeo', title?: string | null, description?: string | null, noindex?: boolean | null } | null } };

export type LegalConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<LegalFilter>;
}>;


export type LegalConnectionQuery = { __typename?: 'Query', legalConnection: { __typename?: 'LegalConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'LegalConnectionEdges', cursor: string, node?: { __typename: 'Legal', id: string, title: string, description: string, pubDate: string, updatedDate?: string | null, effectiveDate?: string | null, pageType?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, contact?: { __typename: 'LegalContact', email?: string | null, address?: string | null, phone?: string | null } | null, seo?: { __typename: 'LegalSeo', title?: string | null, description?: string | null, noindex?: boolean | null } | null } | null } | null> | null } };

export type PagesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type PagesQuery = { __typename?: 'Query', pages: { __typename: 'Pages', id: string, title: string, description: string, pubDate: string, updatedDate?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'PagesHero', title?: string | null, subtitle?: string | null, image?: string | null } | null, seo?: { __typename: 'PagesSeo', title?: string | null, description?: string | null, canonical?: string | null, noindex?: boolean | null } | null } };

export type PagesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<PagesFilter>;
}>;


export type PagesConnectionQuery = { __typename?: 'Query', pagesConnection: { __typename?: 'PagesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'PagesConnectionEdges', cursor: string, node?: { __typename: 'Pages', id: string, title: string, description: string, pubDate: string, updatedDate?: string | null, layout?: string | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, hero?: { __typename: 'PagesHero', title?: string | null, subtitle?: string | null, image?: string | null } | null, seo?: { __typename: 'PagesSeo', title?: string | null, description?: string | null, canonical?: string | null, noindex?: boolean | null } | null } | null } | null> | null } };

export type CategoriesQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type CategoriesQuery = { __typename?: 'Query', categories: { __typename: 'Categories', id: string, name: string, slug: string, description: string, theme: string, icon: string, color: string, featured?: boolean | null, sortOrder?: number | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'CategoriesSeo', title?: string | null, description?: string | null } | null } };

export type CategoriesConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<CategoriesFilter>;
}>;


export type CategoriesConnectionQuery = { __typename?: 'Query', categoriesConnection: { __typename?: 'CategoriesConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'CategoriesConnectionEdges', cursor: string, node?: { __typename: 'Categories', id: string, name: string, slug: string, description: string, theme: string, icon: string, color: string, featured?: boolean | null, sortOrder?: number | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, seo?: { __typename: 'CategoriesSeo', title?: string | null, description?: string | null } | null } | null } | null> | null } };

export type AuthorsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type AuthorsQuery = { __typename?: 'Query', authors: { __typename: 'Authors', id: string, name: string, bio?: string | null, avatar?: string | null, role?: string | null, company?: string | null, email?: string | null, featured?: boolean | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, social?: { __typename: 'AuthorsSocial', twitter?: string | null, linkedin?: string | null, github?: string | null, website?: string | null } | null } };

export type AuthorsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<AuthorsFilter>;
}>;


export type AuthorsConnectionQuery = { __typename?: 'Query', authorsConnection: { __typename?: 'AuthorsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'AuthorsConnectionEdges', cursor: string, node?: { __typename: 'Authors', id: string, name: string, bio?: string | null, avatar?: string | null, role?: string | null, company?: string | null, email?: string | null, featured?: boolean | null, body?: any | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, social?: { __typename: 'AuthorsSocial', twitter?: string | null, linkedin?: string | null, github?: string | null, website?: string | null } | null } | null } | null> | null } };

export type SettingsQueryVariables = Exact<{
  relativePath: Scalars['String']['input'];
}>;


export type SettingsQuery = { __typename?: 'Query', settings: { __typename: 'Settings', id: string, title: string, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, site?: { __typename: 'SettingsSite', name: string, description?: string | null, url?: string | null, logo?: string | null, giscus?: { __typename: 'SettingsSiteGiscus', repo?: string | null, repoId?: string | null, category?: string | null, categoryId?: string | null, mapping?: string | null, reactionsEnabled?: boolean | null, emitMetadata?: boolean | null, inputPosition?: string | null, lang?: string | null, loading?: string | null } | null } | null, categories?: { __typename: 'SettingsCategories', defaultColor?: string | null, categoryMappings?: Array<{ __typename: 'SettingsCategoriesCategoryMappings', name?: string | null, slug?: string | null, color?: string | null, description?: string | null, icon?: string | null, theme?: string | null } | null> | null } | null, uiText?: { __typename: 'SettingsUiText', audioAvailableLabel?: string | null, audioTitle?: string | null, audioSubtitle?: string | null, noAudioText?: string | null, byAuthorPrefix?: string | null, aboutAuthorTitle?: string | null, shareLabel?: string | null, shareArticleTitle?: string | null, continueReadingTitle?: string | null, continueReadingSubtitle?: string | null, previousArticleLabel?: string | null, nextArticleLabel?: string | null, reachedBeginningText?: string | null, readAllText?: string | null, browseAllArticlesText?: string | null, tocTitle?: string | null, topicsTitle?: string | null, readingProgressTitle?: string | null, imageCreditText?: string | null, readingTimePrefix?: string | null, defaultCategoryLabel?: string | null, discussionTitle?: string | null, discussionSubtitle?: string | null, relatedTitle?: string | null, relatedSubtitle?: string | null } | null, community?: { __typename: 'SettingsCommunity', stats?: Array<{ __typename: 'SettingsCommunityStats', number?: string | null, label?: string | null, icon?: string | null } | null> | null, platforms?: Array<{ __typename: 'SettingsCommunityPlatforms', name?: string | null, description?: string | null, icon?: string | null, link?: string | null, members?: string | null, activity?: string | null, color?: string | null } | null> | null } | null, research?: { __typename: 'SettingsResearch', stats?: Array<{ __typename: 'SettingsResearchStats', number?: string | null, label?: string | null, icon?: string | null } | null> | null, reports?: Array<{ __typename: 'SettingsResearchReports', title?: string | null, description?: string | null, date?: string | null, type?: string | null, pages?: number | null, downloads?: string | null, downloadUrl?: string | null, coverImage?: string | null, featured?: boolean | null, tags?: Array<string | null> | null } | null> | null } | null, newsletter?: { __typename: 'SettingsNewsletter', title?: string | null, subtitle?: string | null, frequency?: string | null, subscriberCount?: string | null, signupFormId?: string | null, confirmationMessage?: string | null } | null, social?: { __typename: 'SettingsSocial', defaultShareText?: string | null, platforms?: Array<{ __typename: 'SettingsSocialPlatforms', name?: string | null, url?: string | null, username?: string | null, showInFooter?: boolean | null, enableSharing?: boolean | null } | null> | null } | null, analytics?: { __typename: 'SettingsAnalytics', googleAnalyticsId?: string | null, googleTagManagerId?: string | null, enableCookieConsent?: boolean | null, cookieConsentMessage?: string | null } | null, performance?: { __typename: 'SettingsPerformance', enableImageOptimization?: boolean | null, enableLazyLoading?: boolean | null, enableServiceWorker?: boolean | null, cacheMaxAge?: number | null } | null } };

export type SettingsConnectionQueryVariables = Exact<{
  before?: InputMaybe<Scalars['String']['input']>;
  after?: InputMaybe<Scalars['String']['input']>;
  first?: InputMaybe<Scalars['Float']['input']>;
  last?: InputMaybe<Scalars['Float']['input']>;
  sort?: InputMaybe<Scalars['String']['input']>;
  filter?: InputMaybe<SettingsFilter>;
}>;


export type SettingsConnectionQuery = { __typename?: 'Query', settingsConnection: { __typename?: 'SettingsConnection', totalCount: number, pageInfo: { __typename?: 'PageInfo', hasPreviousPage: boolean, hasNextPage: boolean, startCursor: string, endCursor: string }, edges?: Array<{ __typename?: 'SettingsConnectionEdges', cursor: string, node?: { __typename: 'Settings', id: string, title: string, description?: string | null, _sys: { __typename?: 'SystemInfo', filename: string, basename: string, hasReferences?: boolean | null, breadcrumbs: Array<string>, path: string, relativePath: string, extension: string }, site?: { __typename: 'SettingsSite', name: string, description?: string | null, url?: string | null, logo?: string | null, giscus?: { __typename: 'SettingsSiteGiscus', repo?: string | null, repoId?: string | null, category?: string | null, categoryId?: string | null, mapping?: string | null, reactionsEnabled?: boolean | null, emitMetadata?: boolean | null, inputPosition?: string | null, lang?: string | null, loading?: string | null } | null } | null, categories?: { __typename: 'SettingsCategories', defaultColor?: string | null, categoryMappings?: Array<{ __typename: 'SettingsCategoriesCategoryMappings', name?: string | null, slug?: string | null, color?: string | null, description?: string | null, icon?: string | null, theme?: string | null } | null> | null } | null, uiText?: { __typename: 'SettingsUiText', audioAvailableLabel?: string | null, audioTitle?: string | null, audioSubtitle?: string | null, noAudioText?: string | null, byAuthorPrefix?: string | null, aboutAuthorTitle?: string | null, shareLabel?: string | null, shareArticleTitle?: string | null, continueReadingTitle?: string | null, continueReadingSubtitle?: string | null, previousArticleLabel?: string | null, nextArticleLabel?: string | null, reachedBeginningText?: string | null, readAllText?: string | null, browseAllArticlesText?: string | null, tocTitle?: string | null, topicsTitle?: string | null, readingProgressTitle?: string | null, imageCreditText?: string | null, readingTimePrefix?: string | null, defaultCategoryLabel?: string | null, discussionTitle?: string | null, discussionSubtitle?: string | null, relatedTitle?: string | null, relatedSubtitle?: string | null } | null, community?: { __typename: 'SettingsCommunity', stats?: Array<{ __typename: 'SettingsCommunityStats', number?: string | null, label?: string | null, icon?: string | null } | null> | null, platforms?: Array<{ __typename: 'SettingsCommunityPlatforms', name?: string | null, description?: string | null, icon?: string | null, link?: string | null, members?: string | null, activity?: string | null, color?: string | null } | null> | null } | null, research?: { __typename: 'SettingsResearch', stats?: Array<{ __typename: 'SettingsResearchStats', number?: string | null, label?: string | null, icon?: string | null } | null> | null, reports?: Array<{ __typename: 'SettingsResearchReports', title?: string | null, description?: string | null, date?: string | null, type?: string | null, pages?: number | null, downloads?: string | null, downloadUrl?: string | null, coverImage?: string | null, featured?: boolean | null, tags?: Array<string | null> | null } | null> | null } | null, newsletter?: { __typename: 'SettingsNewsletter', title?: string | null, subtitle?: string | null, frequency?: string | null, subscriberCount?: string | null, signupFormId?: string | null, confirmationMessage?: string | null } | null, social?: { __typename: 'SettingsSocial', defaultShareText?: string | null, platforms?: Array<{ __typename: 'SettingsSocialPlatforms', name?: string | null, url?: string | null, username?: string | null, showInFooter?: boolean | null, enableSharing?: boolean | null } | null> | null } | null, analytics?: { __typename: 'SettingsAnalytics', googleAnalyticsId?: string | null, googleTagManagerId?: string | null, enableCookieConsent?: boolean | null, cookieConsentMessage?: string | null } | null, performance?: { __typename: 'SettingsPerformance', enableImageOptimization?: boolean | null, enableLazyLoading?: boolean | null, enableServiceWorker?: boolean | null, cacheMaxAge?: number | null } | null } | null } | null> | null } };

export const BlogPartsFragmentDoc = gql`
    fragment BlogParts on Blog {
  __typename
  editorial {
    __typename
    status
    assignedEditor
    editorNotes
  }
  title
  excerpt
  pubDate
  updatedDate
  authorInfo {
    __typename
    name
    bio
    avatar
    role
    social {
      __typename
      twitter
      linkedin
      github
      website
    }
  }
  heroImage {
    __typename
    imageType
    uploadedImage
    externalUrl
    alt
    caption
  }
  image
  imageAlt
  category
  storyType
  tags
  featured
  trending
  draft
  readTime
  hasAudio
  audioUrl
  audioDuration
  audioTranscript
  seo {
    __typename
    customSEO
    title
    description
    canonical
    noindex
  }
  body
}
    `;
export const NewsletterPartsFragmentDoc = gql`
    fragment NewsletterParts on Newsletter {
  __typename
  title
  issueNumber
  newsletterType
  excerpt
  subscriberOnly
  previewContent
  publishDate
  status
  featured
  coverImage
  highlights {
    __typename
    title
    description
    link
  }
  trackStats
  stats {
    __typename
    subscribers
    openRate
    clickRate
  }
  tags
  seo {
    __typename
    title
    description
  }
  body
}
    `;
export const AllTopicsPagePartsFragmentDoc = gql`
    fragment AllTopicsPageParts on AllTopicsPage {
  __typename
  hero {
    __typename
    badgeText
    title
    titleAccent
    subtitle
  }
  topics {
    __typename
    name
    href
    description
    audience
  }
  stats {
    __typename
    topicCount
    articleCount
    storiesLabel
  }
  cta {
    __typename
    title
    description
    primaryButtonText
    primaryButtonLink
    secondaryButtonText
    secondaryButtonLink
  }
}
    `;
export const PodcastPartsFragmentDoc = gql`
    fragment PodcastParts on Podcast {
  __typename
  title
  episode
  description
  pubDate
  status
  duration
  audioUrl
  downloadable
  image
  guests {
    __typename
    name
    role
    company
    bio
    photo
    social {
      __typename
      twitter
      linkedin
    }
  }
  tags
  featured
  transcript
  seo {
    __typename
    title
    description
    canonical
  }
  body
}
    `;
export const ContactPartsFragmentDoc = gql`
    fragment ContactParts on Contact {
  __typename
  title
  description
  pubDate
  hero {
    __typename
    title
    titleAccent
    subtitle
    responseTime
    badgeText
  }
  contactMethods {
    __typename
    title
    description
    email
    icon
    color
    featured
  }
  socialLinks {
    __typename
    name
    url
    icon
    color
    showInContact
  }
  faq {
    __typename
    enabled
    title
    titleAccent
    subtitle
    items {
      __typename
      question
      answer
      category
      featured
    }
  }
  cta {
    __typename
    title
    titleAccent
    subtitle
    primaryButton {
      __typename
      text
      link
    }
    secondaryButton {
      __typename
      text
      link
    }
  }
  seo {
    __typename
    title
    description
    canonical
    noindex
  }
  body
}
    `;
export const LegalPartsFragmentDoc = gql`
    fragment LegalParts on Legal {
  __typename
  title
  description
  pubDate
  updatedDate
  effectiveDate
  pageType
  contact {
    __typename
    email
    address
    phone
  }
  seo {
    __typename
    title
    description
    noindex
  }
  body
}
    `;
export const PagesPartsFragmentDoc = gql`
    fragment PagesParts on Pages {
  __typename
  title
  description
  pubDate
  updatedDate
  layout
  hero {
    __typename
    title
    subtitle
    image
  }
  seo {
    __typename
    title
    description
    canonical
    noindex
  }
  body
}
    `;
export const CategoriesPartsFragmentDoc = gql`
    fragment CategoriesParts on Categories {
  __typename
  name
  slug
  description
  theme
  icon
  color
  featured
  sortOrder
  seo {
    __typename
    title
    description
  }
  body
}
    `;
export const AuthorsPartsFragmentDoc = gql`
    fragment AuthorsParts on Authors {
  __typename
  name
  bio
  avatar
  role
  company
  email
  social {
    __typename
    twitter
    linkedin
    github
    website
  }
  featured
  body
}
    `;
export const SettingsPartsFragmentDoc = gql`
    fragment SettingsParts on Settings {
  __typename
  title
  description
  site {
    __typename
    name
    description
    url
    logo
    giscus {
      __typename
      repo
      repoId
      category
      categoryId
      mapping
      reactionsEnabled
      emitMetadata
      inputPosition
      lang
      loading
    }
  }
  categories {
    __typename
    defaultColor
    categoryMappings {
      __typename
      name
      slug
      color
      description
      icon
      theme
    }
  }
  uiText {
    __typename
    audioAvailableLabel
    audioTitle
    audioSubtitle
    noAudioText
    byAuthorPrefix
    aboutAuthorTitle
    shareLabel
    shareArticleTitle
    continueReadingTitle
    continueReadingSubtitle
    previousArticleLabel
    nextArticleLabel
    reachedBeginningText
    readAllText
    browseAllArticlesText
    tocTitle
    topicsTitle
    readingProgressTitle
    imageCreditText
    readingTimePrefix
    defaultCategoryLabel
    discussionTitle
    discussionSubtitle
    relatedTitle
    relatedSubtitle
  }
  community {
    __typename
    stats {
      __typename
      number
      label
      icon
    }
    platforms {
      __typename
      name
      description
      icon
      link
      members
      activity
      color
    }
  }
  research {
    __typename
    stats {
      __typename
      number
      label
      icon
    }
    reports {
      __typename
      title
      description
      date
      type
      pages
      downloads
      downloadUrl
      coverImage
      featured
      tags
    }
  }
  newsletter {
    __typename
    title
    subtitle
    frequency
    subscriberCount
    signupFormId
    confirmationMessage
  }
  social {
    __typename
    platforms {
      __typename
      name
      url
      username
      showInFooter
      enableSharing
    }
    defaultShareText
  }
  analytics {
    __typename
    googleAnalyticsId
    googleTagManagerId
    enableCookieConsent
    cookieConsentMessage
  }
  performance {
    __typename
    enableImageOptimization
    enableLazyLoading
    enableServiceWorker
    cacheMaxAge
  }
}
    `;
export const BlogDocument = gql`
    query blog($relativePath: String!) {
  blog(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...BlogParts
  }
}
    ${BlogPartsFragmentDoc}`;
export const BlogConnectionDocument = gql`
    query blogConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: BlogFilter) {
  blogConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...BlogParts
      }
    }
  }
}
    ${BlogPartsFragmentDoc}`;
export const NewsletterDocument = gql`
    query newsletter($relativePath: String!) {
  newsletter(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...NewsletterParts
  }
}
    ${NewsletterPartsFragmentDoc}`;
export const NewsletterConnectionDocument = gql`
    query newsletterConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: NewsletterFilter) {
  newsletterConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...NewsletterParts
      }
    }
  }
}
    ${NewsletterPartsFragmentDoc}`;
export const AllTopicsPageDocument = gql`
    query allTopicsPage($relativePath: String!) {
  allTopicsPage(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AllTopicsPageParts
  }
}
    ${AllTopicsPagePartsFragmentDoc}`;
export const AllTopicsPageConnectionDocument = gql`
    query allTopicsPageConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AllTopicsPageFilter) {
  allTopicsPageConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AllTopicsPageParts
      }
    }
  }
}
    ${AllTopicsPagePartsFragmentDoc}`;
export const PodcastDocument = gql`
    query podcast($relativePath: String!) {
  podcast(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PodcastParts
  }
}
    ${PodcastPartsFragmentDoc}`;
export const PodcastConnectionDocument = gql`
    query podcastConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PodcastFilter) {
  podcastConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PodcastParts
      }
    }
  }
}
    ${PodcastPartsFragmentDoc}`;
export const ContactDocument = gql`
    query contact($relativePath: String!) {
  contact(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...ContactParts
  }
}
    ${ContactPartsFragmentDoc}`;
export const ContactConnectionDocument = gql`
    query contactConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: ContactFilter) {
  contactConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...ContactParts
      }
    }
  }
}
    ${ContactPartsFragmentDoc}`;
export const LegalDocument = gql`
    query legal($relativePath: String!) {
  legal(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...LegalParts
  }
}
    ${LegalPartsFragmentDoc}`;
export const LegalConnectionDocument = gql`
    query legalConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: LegalFilter) {
  legalConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...LegalParts
      }
    }
  }
}
    ${LegalPartsFragmentDoc}`;
export const PagesDocument = gql`
    query pages($relativePath: String!) {
  pages(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...PagesParts
  }
}
    ${PagesPartsFragmentDoc}`;
export const PagesConnectionDocument = gql`
    query pagesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: PagesFilter) {
  pagesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...PagesParts
      }
    }
  }
}
    ${PagesPartsFragmentDoc}`;
export const CategoriesDocument = gql`
    query categories($relativePath: String!) {
  categories(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...CategoriesParts
  }
}
    ${CategoriesPartsFragmentDoc}`;
export const CategoriesConnectionDocument = gql`
    query categoriesConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: CategoriesFilter) {
  categoriesConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...CategoriesParts
      }
    }
  }
}
    ${CategoriesPartsFragmentDoc}`;
export const AuthorsDocument = gql`
    query authors($relativePath: String!) {
  authors(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...AuthorsParts
  }
}
    ${AuthorsPartsFragmentDoc}`;
export const AuthorsConnectionDocument = gql`
    query authorsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: AuthorsFilter) {
  authorsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...AuthorsParts
      }
    }
  }
}
    ${AuthorsPartsFragmentDoc}`;
export const SettingsDocument = gql`
    query settings($relativePath: String!) {
  settings(relativePath: $relativePath) {
    ... on Document {
      _sys {
        filename
        basename
        hasReferences
        breadcrumbs
        path
        relativePath
        extension
      }
      id
    }
    ...SettingsParts
  }
}
    ${SettingsPartsFragmentDoc}`;
export const SettingsConnectionDocument = gql`
    query settingsConnection($before: String, $after: String, $first: Float, $last: Float, $sort: String, $filter: SettingsFilter) {
  settingsConnection(
    before: $before
    after: $after
    first: $first
    last: $last
    sort: $sort
    filter: $filter
  ) {
    pageInfo {
      hasPreviousPage
      hasNextPage
      startCursor
      endCursor
    }
    totalCount
    edges {
      cursor
      node {
        ... on Document {
          _sys {
            filename
            basename
            hasReferences
            breadcrumbs
            path
            relativePath
            extension
          }
          id
        }
        ...SettingsParts
      }
    }
  }
}
    ${SettingsPartsFragmentDoc}`;
export type Requester<C= {}> = <R, V>(doc: DocumentNode, vars?: V, options?: C) => Promise<R>
  export function getSdk<C>(requester: Requester<C>) {
    return {
      blog(variables: BlogQueryVariables, options?: C): Promise<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}> {
        return requester<{data: BlogQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogQueryVariables, query: string}, BlogQueryVariables>(BlogDocument, variables, options);
      },
    blogConnection(variables?: BlogConnectionQueryVariables, options?: C): Promise<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}> {
        return requester<{data: BlogConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: BlogConnectionQueryVariables, query: string}, BlogConnectionQueryVariables>(BlogConnectionDocument, variables, options);
      },
    newsletter(variables: NewsletterQueryVariables, options?: C): Promise<{data: NewsletterQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsletterQueryVariables, query: string}> {
        return requester<{data: NewsletterQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsletterQueryVariables, query: string}, NewsletterQueryVariables>(NewsletterDocument, variables, options);
      },
    newsletterConnection(variables?: NewsletterConnectionQueryVariables, options?: C): Promise<{data: NewsletterConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsletterConnectionQueryVariables, query: string}> {
        return requester<{data: NewsletterConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: NewsletterConnectionQueryVariables, query: string}, NewsletterConnectionQueryVariables>(NewsletterConnectionDocument, variables, options);
      },
    allTopicsPage(variables: AllTopicsPageQueryVariables, options?: C): Promise<{data: AllTopicsPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AllTopicsPageQueryVariables, query: string}> {
        return requester<{data: AllTopicsPageQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AllTopicsPageQueryVariables, query: string}, AllTopicsPageQueryVariables>(AllTopicsPageDocument, variables, options);
      },
    allTopicsPageConnection(variables?: AllTopicsPageConnectionQueryVariables, options?: C): Promise<{data: AllTopicsPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AllTopicsPageConnectionQueryVariables, query: string}> {
        return requester<{data: AllTopicsPageConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AllTopicsPageConnectionQueryVariables, query: string}, AllTopicsPageConnectionQueryVariables>(AllTopicsPageConnectionDocument, variables, options);
      },
    podcast(variables: PodcastQueryVariables, options?: C): Promise<{data: PodcastQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PodcastQueryVariables, query: string}> {
        return requester<{data: PodcastQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PodcastQueryVariables, query: string}, PodcastQueryVariables>(PodcastDocument, variables, options);
      },
    podcastConnection(variables?: PodcastConnectionQueryVariables, options?: C): Promise<{data: PodcastConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PodcastConnectionQueryVariables, query: string}> {
        return requester<{data: PodcastConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PodcastConnectionQueryVariables, query: string}, PodcastConnectionQueryVariables>(PodcastConnectionDocument, variables, options);
      },
    contact(variables: ContactQueryVariables, options?: C): Promise<{data: ContactQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactQueryVariables, query: string}> {
        return requester<{data: ContactQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactQueryVariables, query: string}, ContactQueryVariables>(ContactDocument, variables, options);
      },
    contactConnection(variables?: ContactConnectionQueryVariables, options?: C): Promise<{data: ContactConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactConnectionQueryVariables, query: string}> {
        return requester<{data: ContactConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: ContactConnectionQueryVariables, query: string}, ContactConnectionQueryVariables>(ContactConnectionDocument, variables, options);
      },
    legal(variables: LegalQueryVariables, options?: C): Promise<{data: LegalQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LegalQueryVariables, query: string}> {
        return requester<{data: LegalQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LegalQueryVariables, query: string}, LegalQueryVariables>(LegalDocument, variables, options);
      },
    legalConnection(variables?: LegalConnectionQueryVariables, options?: C): Promise<{data: LegalConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LegalConnectionQueryVariables, query: string}> {
        return requester<{data: LegalConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: LegalConnectionQueryVariables, query: string}, LegalConnectionQueryVariables>(LegalConnectionDocument, variables, options);
      },
    pages(variables: PagesQueryVariables, options?: C): Promise<{data: PagesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesQueryVariables, query: string}> {
        return requester<{data: PagesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesQueryVariables, query: string}, PagesQueryVariables>(PagesDocument, variables, options);
      },
    pagesConnection(variables?: PagesConnectionQueryVariables, options?: C): Promise<{data: PagesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesConnectionQueryVariables, query: string}> {
        return requester<{data: PagesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: PagesConnectionQueryVariables, query: string}, PagesConnectionQueryVariables>(PagesConnectionDocument, variables, options);
      },
    categories(variables: CategoriesQueryVariables, options?: C): Promise<{data: CategoriesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesQueryVariables, query: string}> {
        return requester<{data: CategoriesQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesQueryVariables, query: string}, CategoriesQueryVariables>(CategoriesDocument, variables, options);
      },
    categoriesConnection(variables?: CategoriesConnectionQueryVariables, options?: C): Promise<{data: CategoriesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesConnectionQueryVariables, query: string}> {
        return requester<{data: CategoriesConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: CategoriesConnectionQueryVariables, query: string}, CategoriesConnectionQueryVariables>(CategoriesConnectionDocument, variables, options);
      },
    authors(variables: AuthorsQueryVariables, options?: C): Promise<{data: AuthorsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorsQueryVariables, query: string}> {
        return requester<{data: AuthorsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorsQueryVariables, query: string}, AuthorsQueryVariables>(AuthorsDocument, variables, options);
      },
    authorsConnection(variables?: AuthorsConnectionQueryVariables, options?: C): Promise<{data: AuthorsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorsConnectionQueryVariables, query: string}> {
        return requester<{data: AuthorsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: AuthorsConnectionQueryVariables, query: string}, AuthorsConnectionQueryVariables>(AuthorsConnectionDocument, variables, options);
      },
    settings(variables: SettingsQueryVariables, options?: C): Promise<{data: SettingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsQueryVariables, query: string}> {
        return requester<{data: SettingsQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsQueryVariables, query: string}, SettingsQueryVariables>(SettingsDocument, variables, options);
      },
    settingsConnection(variables?: SettingsConnectionQueryVariables, options?: C): Promise<{data: SettingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsConnectionQueryVariables, query: string}> {
        return requester<{data: SettingsConnectionQuery, errors?: { message: string, locations: { line: number, column: number }[], path: string[] }[], variables: SettingsConnectionQueryVariables, query: string}, SettingsConnectionQueryVariables>(SettingsConnectionDocument, variables, options);
      }
    };
  }
  export type Sdk = ReturnType<typeof getSdk>;

// TinaSDK generated code
import { createClient, TinaClient } from "tinacms/dist/client";

const generateRequester = (
  client: TinaClient,
) => {
  const requester: (
    doc: any,
    vars?: any,
    options?: {
      branch?: string,
      /**
       * Aside from `method` and `body`, all fetch options are passed
       * through to underlying fetch request
       */
      fetchOptions?: Omit<Parameters<typeof fetch>[1], 'body' | 'method'>,
    },
    client
  ) => Promise<any> = async (doc, vars, options) => {
    let url = client.apiUrl
    if (options?.branch) {
      const index = client.apiUrl.lastIndexOf('/')
      url = client.apiUrl.substring(0, index + 1) + options.branch
    }
    const data = await client.request({
      query: doc,
      variables: vars,
      url,
    }, options)

    return { data: data?.data, errors: data?.errors, query: doc, variables: vars || {} }
  }

  return requester
}

/**
 * @experimental this class can be used but may change in the future
 **/
export const ExperimentalGetTinaClient = () =>
  getSdk(
    generateRequester(
      createClient({
        url: "http://localhost:4001/graphql",
        queries,
      })
    )
  )

export const queries = (
  client: TinaClient,
) => {
  const requester = generateRequester(client)
  return getSdk(requester)
}

  