---
export interface Props {
  placeholder?: string;
  className?: string;
}

const { placeholder = "SEARCH...", className = "" } = Astro.props;
---

<div class={`max-w-md mx-auto ${className}`}>
  <div class="relative">
    <input
      type="text"
      id="search-input"
      placeholder={placeholder}
      class="w-full px-4 py-3 pl-12 rounded border border-zinc-300 dark:border-zinc-700 bg-white dark:bg-zinc-900 text-zinc-900 dark:text-zinc-100 placeholder-zinc-500 dark:placeholder-zinc-400 focus:ring-2 focus:ring-zinc-500 focus:border-transparent outline-none uppercase tracking-wide text-sm"
    />
    <svg
      xmlns="http://www.w3.org/2000/svg"
      class="h-5 w-5 absolute left-4 top-1/2 transform -translate-y-1/2 text-zinc-400"
      fill="none"
      viewBox="0 0 24 24"
      stroke="currentColor"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        stroke-width="2"
        d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
    </svg>

    <!-- Clear button -->
    <button
      id="clear-search"
      class="absolute right-3 top-1/2 transform -translate-y-1/2 text-zinc-400 hover:text-zinc-600 dark:hover:text-zinc-300 transition-colors hidden"
      aria-label="Clear search"
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        class="h-4 w-4"
        fill="none"
        viewBox="0 0 24 24"
        stroke="currentColor"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M6 18L18 6M6 6l12 12"></path>
      </svg>
    </button>
  </div>

  <!-- Search suggestions dropdown -->
  <div
    id="search-suggestions"
    class="absolute top-full left-0 right-0 bg-white dark:bg-zinc-900 border border-zinc-300 dark:border-zinc-700 rounded-b shadow-lg hidden z-50 max-h-60 overflow-y-auto"
  >
    <!-- Suggestions will be populated here -->
  </div>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const searchInput = document.getElementById(
      "search-input"
    ) as HTMLInputElement;
    const clearButton = document.getElementById("clear-search");
    const suggestionsContainer = document.getElementById("search-suggestions");

    if (!searchInput || !clearButton || !suggestionsContainer) return;

    let searchTimeout: NodeJS.Timeout;

    // Sample search suggestions - replace with actual data
    const sampleSuggestions = [
      "AI Evolution",
      "Product Insights",
      "Tech Culture",
      "Startup Lessons",
      "Quantum Computing",
      "API Design",
      "Remote Work",
    ];

    searchInput.addEventListener("input", (e) => {
      const target = e.target as HTMLInputElement;
      const query = target.value.toLowerCase().trim();

      // Show/hide clear button
      if (query.length > 0) {
        clearButton.classList.remove("hidden");
      } else {
        clearButton.classList.add("hidden");
        suggestionsContainer.classList.add("hidden");
      }

      // Debounce search
      clearTimeout(searchTimeout);
      searchTimeout = setTimeout(() => {
        if (query.length > 1) {
          showSuggestions(query);
        } else {
          suggestionsContainer.classList.add("hidden");
        }
      }, 300);
    });

    clearButton.addEventListener("click", () => {
      searchInput.value = "";
      clearButton.classList.add("hidden");
      suggestionsContainer.classList.add("hidden");
      searchInput.focus();
    });

    function showSuggestions(query: string) {
      const filteredSuggestions = sampleSuggestions.filter((suggestion) =>
        suggestion.toLowerCase().includes(query)
      );

      if (filteredSuggestions.length > 0) {
        suggestionsContainer.innerHTML = filteredSuggestions
          .map(
            (suggestion) => `
            <div class="px-4 py-2 hover:bg-zinc-100 dark:hover:bg-zinc-800 cursor-pointer transition-colors">
              <span class="text-sm text-zinc-700 dark:text-zinc-300 uppercase tracking-wide">${suggestion}</span>
            </div>
          `
          )
          .join("");

        suggestionsContainer.classList.remove("hidden");

        // Add click handlers to suggestions
        suggestionsContainer.querySelectorAll("div").forEach((item) => {
          item.addEventListener("click", () => {
            const suggestion = item.textContent?.trim() || "";
            searchInput.value = suggestion;
            suggestionsContainer.classList.add("hidden");
            // Trigger search
            console.log("Searching for:", suggestion);
          });
        });
      } else {
        suggestionsContainer.classList.add("hidden");
      }
    }

    // Hide suggestions when clicking outside
    document.addEventListener("click", (e) => {
      if (
        !searchInput.contains(e.target as Node) &&
        !suggestionsContainer.contains(e.target as Node)
      ) {
        suggestionsContainer.classList.add("hidden");
      }
    });
  });
</script>
