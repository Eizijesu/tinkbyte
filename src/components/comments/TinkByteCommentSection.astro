---
import { supabase } from "../../lib/supabase";
import { config } from "../../lib/config";
import { COMMENT_CONFIG, REACTION_TYPES } from "../../lib/config/comments";
import { buildCommentTree } from "../../lib/helpers/commentHelpers";
import CommentCard from "./CommentCard.astro";
import CommentForm from "./CommentForm.astro";
import CommentReplies from "./CommentReplies.astro";
import type { CommentWithProfile } from "../../lib/types/comments";

const { articleId, postSlug, postTitle } = Astro.props;

const ENVIRONMENT = config.environment;

const currentUser = null;
interface ArticleAuthor {
  slug: string;
  name: string;
  bio: string | null;
  avatar: string | null;
  is_verified: boolean;
  role: string | null;
  company: string | null;
}

interface ArticleWithAuthor {
  slug: string;
  title: string;
  author_id: string;
  authors: ArticleAuthor | null;
}

let articleWithAuthor: ArticleWithAuthor | null = null;

try {
  const { data: articleData, error: articleError } = await supabase
    .from("articles")
    .select(
      `
      slug, title, author_id,
      authors!articles_author_id_fkey(slug, name, bio, avatar, is_verified, role, company)
    `
    )
    .eq("slug", articleId)
    .single();

  if (!articleError && articleData) {
    articleWithAuthor = {
      slug: articleData.slug,
      title: articleData.title,
      author_id: articleData.author_id,
      authors: Array.isArray(articleData.authors)
        ? articleData.authors[0] || null
        : articleData.authors || null,
    } as ArticleWithAuthor;
  }
} catch (error) {
  console.error("❌ Error loading article author:", error);
}

// **FIXED: Load ALL comments but paginate display**
let totalRootComments = 0;
let allComments: CommentWithProfile[] = [];
let initialDisplayComments: any[] = [];
const COMMENTS_PER_PAGE = 5;

try {
  // Get total count of ROOT comments only
  const { count: rootCount, error: countError } = await supabase
    .from("comments")
    .select("id", { count: "exact", head: true })
    .eq("article_id", articleId)
    .eq("is_deleted", false)
    .eq("environment", ENVIRONMENT)
    .in("moderation_status", ["approved", "auto_approved"])
    .is("parent_id", null);

  if (countError) {
    console.error("❌ Error counting comments:", countError);
    throw countError;
  }

  totalRootComments = rootCount || 0;

  if (totalRootComments > 0) {
    // **CHANGED: Load ALL root comments (remove limit)**
    const { data: rootCommentsData, error: rootCommentsError } = await supabase
      .from("comments")
      .select("*")
      .eq("article_id", articleId)
      .eq("is_deleted", false)
      .eq("environment", "production")
      .in("moderation_status", ["approved", "auto_approved"])
      .is("parent_id", null)
      .order("created_at", { ascending: false });

    if (rootCommentsError) {
      console.error("❌ Error loading root comments:", rootCommentsError);
      throw rootCommentsError;
    }

    if (rootCommentsData && rootCommentsData.length > 0) {
      const rootCommentIds = rootCommentsData.map((c) => c.id);

      // Get ALL replies for ALL root comments
      const { data: repliesData } = await supabase
        .from("comments")
        .select("*")
        .in("parent_id", rootCommentIds)
        .eq("is_deleted", false)
        .eq("environment", ENVIRONMENT)
        .in("moderation_status", ["approved", "auto_approved"])
        .order("created_at", { ascending: true });

      // Combine ALL root comments and replies
      const allCommentsForPage = [...rootCommentsData, ...(repliesData || [])];
      const userIds = [...new Set(allCommentsForPage.map((c) => c.user_id))];

      // Fetch profiles for ALL users
      const { data: profilesData } = await supabase
        .from("profiles")
        .select(
          `
          id, display_name, avatar_type, avatar_preset_id, avatar_url,
          reputation_score, is_admin, membership_type
        `
        )
        .in("id", userIds)
        .eq("environment", ENVIRONMENT);

      // Get interactions for ALL comments
      const allCommentIds = allCommentsForPage.map((c) => c.id);
      const [reactionsResult, likesResult, bookmarksResult] = await Promise.all(
        [
          supabase
            .from("comment_reactions")
            .select("*")
            .in("comment_id", allCommentIds)
            .eq("environment", ENVIRONMENT),
          supabase
            .from("comment_likes")
            .select("*")
            .in("comment_id", allCommentIds)
            .eq("environment", ENVIRONMENT),
          supabase
            .from("comment_bookmarks")
            .select("*")
            .in("comment_id", allCommentIds)
            .eq("environment", ENVIRONMENT),
        ]
      );

      // Combine ALL data
      allComments = allCommentsForPage.map((comment) => ({
        ...comment,
        profiles: profilesData?.find((p) => p.id === comment.user_id) || null,
        comment_reactions:
          reactionsResult.data?.filter((r) => r.comment_id === comment.id) ||
          [],
        comment_likes:
          likesResult.data?.filter((l) => l.comment_id === comment.id) || [],
        comment_bookmarks:
          bookmarksResult.data?.filter((b) => b.comment_id === comment.id) ||
          [],
      }));

      console.log(
        `✅ Loaded ALL comments: ${rootCommentsData.length} root comments with ${(repliesData || []).length} replies`
      );
    }
  }
} catch (error) {
  console.error("❌ Database error loading comments:", error);
  allComments = [];
}

// **NEW: Build comment tree with ALL comments**
const allCommentTree = buildCommentTree(allComments);

// **NEW: Get only first 5 for initial display**
initialDisplayComments = allCommentTree.slice(0, COMMENTS_PER_PAGE);
const loadedRootComments = initialDisplayComments.length;

const reactionTypes = Object.entries(REACTION_TYPES).map(([key, value]) => ({
  name: key,
  emoji: value.emoji,
  label: value.label,
}));
---

<section
  class="tinkbyte-comment-section"
  id="comments-section"
  data-article-id={postSlug}
  data-config={JSON.stringify(COMMENT_CONFIG)}
  data-total-comments={totalRootComments}
  data-loaded-comments={loadedRootComments}
  data-comments-per-page={COMMENTS_PER_PAGE}
  data-all-comments={JSON.stringify(allCommentTree)}
>
  <!-- Thread Header -->
  <div class="thread-header">
    <div class="thread-header-content">
      <div class="thread-info">
        <svg
          width="20"
          height="20"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path
            d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"
          ></path>
        </svg>
        <span class="thread-label">THREAD</span>
        <span class="thread-count" id="total-comments">{totalRootComments}</span
        >
      </div>
      <div class="header-actions">
        <button class="manage-btn" id="tinkbyte-account-btn">
          Manage Your <span class="highlight">TINKBYTE</span> Account
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
            <circle cx="12" cy="7" r="4"></circle>
          </svg>
        </button>
      </div>
    </div>
    <div class="thread-subtitle">
      We want to hear from you! Share your opinions in the thread below and
      remember to keep it respectful.
      {
        articleWithAuthor && articleWithAuthor.authors && (
          <div class="article-author-info">
            <span>Article by: </span>
            <strong>{articleWithAuthor.authors.name}</strong>
            {articleWithAuthor.authors.role && (
              <span class="author-role">
                {" "}
                • {articleWithAuthor.authors.role}
              </span>
            )}
            {articleWithAuthor.authors.company && (
              <span class="author-company">
                {" "}
                at {articleWithAuthor.authors.company}
              </span>
            )}
          </div>
        )
      }
    </div>
  </div>

  <!-- Comment Form Section -->
  <div class="comment-form-section" id="comment-form-section">
    <div class="guest-comment-prompt" id="guest-comment-prompt">
      <div class="guest-avatar">
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
          <circle cx="12" cy="7" r="4"></circle>
        </svg>
      </div>
      <div class="guest-prompt-content">
        <input
          type="text"
          class="guest-comment-input"
          placeholder="Share your thoughts"
          readonly
          onclick="window.location.href='/auth/signin'"
        />
        <div class="guest-prompt-text">
          <a href="/auth/signin" class="auth-link">Sign in</a> to join the conversation
        </div>
      </div>
    </div>

    <div
      class="user-comment-form"
      id="user-comment-form"
      style="display: none;"
    >
      <CommentForm articleId={articleId} />
    </div>
  </div>

  <!-- Sort Options -->
  <div class="sort-section">
    <div class="sort-controls">
      <label for="sort-select">Sort by:</label>
      <select id="sort-select" class="sort-select">
        <option value="newest">Newest</option>
        <option value="oldest">Oldest</option>
        <option value="popular">Popular</option>
      </select>
    </div>
  </div>

  <!-- **UPDATED: Comments Container - Display only first 5** -->
  <div class="comments-container" id="comments-container">
    {
      totalRootComments === 0 ? (
        <div class="empty-state" id="empty-state">
          <div class="empty-content">
            <div class="empty-icon">
              <svg
                width="48"
                height="48"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="1.5"
              >
                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" />
              </svg>
            </div>
            <h3 class="empty-title">No comments yet</h3>
            <p class="empty-description">
              Be the first to share your thoughts on this article.
            </p>
          </div>
        </div>
      ) : (
        <div class="comments-list" id="comments-list">
          <div class="comments-items" id="comments-items">
            {initialDisplayComments.map((comment) => (
              <div class="comment-wrapper" data-comment-id={comment.id}>
                <CommentCard
                  comment={comment}
                  currentUserId={undefined}
                  reactionTypes={reactionTypes}
                  isReply={false}
                />
                {comment.replies && comment.replies.length > 0 && (
                  <CommentReplies
                    replies={comment.replies.slice(0, 3)}
                    currentUserId={undefined}
                    reactionTypes={reactionTypes}
                    maxDepth={4}
                  />
                )}
                {comment.replies && comment.replies.length > 3 && (
                  <div class="load-more-replies">
                    <button
                      class="load-more-replies-btn"
                      data-comment-id={comment.id}
                      data-loaded="3"
                      data-total={comment.replies.length}
                    >
                      <svg
                        width="16"
                        height="16"
                        viewBox="0 0 24 24"
                        fill="none"
                        stroke="currentColor"
                        stroke-width="2"
                      >
                        <polyline points="6,9 12,15 18,9" />
                      </svg>
                      Show {comment.replies.length - 3} more replies
                    </button>
                  </div>
                )}
              </div>
            ))}
          </div>
        </div>
      )
    }
  </div>
</section>

<!-- **UPDATED: Load More Section** -->
<div
  class="load-more-section"
  id="load-more-section"
  style={loadedRootComments >= totalRootComments
    ? "display: none;"
    : "display: block;"}
>
  <div class="load-more-container">
    <div class="load-more-info">
      <span class="showing-count">
        Showing <span id="showing-count">{loadedRootComments}</span> of
        <span id="total-count">{totalRootComments}</span> comments
      </span>
    </div>
    <button class="load-more-btn" id="load-more-btn" type="button">
      <span class="btn-text">
        <svg
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <polyline points="6,9 12,15 18,9"></polyline>
        </svg>
        Load More Comments
      </span>
      <div class="btn-spinner" style="display: none;">
        <div class="loading-spinner"></div>
      </div>
    </button>
  </div>
</div>

<!-- modals and templates... -->
<!-- Delete Modal -->
<div id="delete-modal" class="modal-overlay" style="display: none;">
  <div class="modal-container">
    <div class="modal-header">
      <h3>Delete Comment</h3>
      <button class="modal-close" type="button" id="close-delete-modal"
        >&times;</button
      >
    </div>
    <div class="modal-body">
      <p>
        Are you sure you want to delete this comment? This action cannot be
        undone.
      </p>
      <div class="comment-preview" id="delete-comment-preview"></div>
    </div>
    <div class="modal-actions">
      <button class="btn-secondary" type="button" id="cancel-delete"
        >Cancel</button
      >
      <button class="btn-danger" type="button" id="confirm-delete">
        <span class="btn-text">Delete Comment</span>
        <div class="btn-spinner" style="display: none;">
          <div class="loading-spinner"></div>
        </div>
      </button>
    </div>
  </div>
</div>

<!-- Report Modal -->
<div id="report-modal" class="modal-overlay" style="display: none;">
  <div class="modal-container">
    <div class="modal-header">
      <h3>Report Comment</h3>
      <button class="modal-close" type="button" id="close-report-modal"
        >&times;</button
      >
    </div>
    <div class="modal-body">
      <p>Why are you reporting this comment?</p>
      <div class="report-reasons">
        <label class="report-reason">
          <input type="radio" name="report-reason" value="spam" />
          <span>Spam or promotional content</span>
        </label>
        <label class="report-reason">
          <input type="radio" name="report-reason" value="harassment" />
          <span>Harassment or bullying</span>
        </label>
        <label class="report-reason">
          <input type="radio" name="report-reason" value="inappropriate" />
          <span>Inappropriate content</span>
        </label>
        <label class="report-reason">
          <input type="radio" name="report-reason" value="misinformation" />
          <span>Misinformation</span>
        </label>
        <label class="report-reason">
          <input type="radio" name="report-reason" value="other" />
          <span>Other</span>
        </label>
      </div>
      <textarea
        id="report-details"
        placeholder="Additional details (optional)"
        rows="3"></textarea>
    </div>
    <div class="modal-actions">
      <button class="btn-secondary" type="button" id="cancel-report"
        >Cancel</button
      >
      <button class="btn-danger" type="button" id="confirm-report">
        <span class="btn-text">Report Comment</span>
        <div class="btn-spinner" style="display: none;">
          <div class="loading-spinner"></div>
        </div>
      </button>
    </div>
  </div>
</div>

<!-- Templates -->
<!-- Inline Reply Template -->
<template id="inline-reply-template">
  <div class="inline-reply-form">
    <div class="reply-form-header">
      <div class="reply-context-info">
        <svg
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <polyline points="9,17 4,12 9,7"></polyline>
          <path d="M20 18v-2a4 4 0 0 0-4-4H4"></path>
        </svg>
        <span>Replying to <strong class="reply-author-name"></strong></span>
      </div>
      <button type="button" class="cancel-inline-reply">×</button>
    </div>
    <form class="inline-comment-form">
      <div class="inline-user-info">
        <div class="inline-user-avatar"></div>
        <div class="inline-user-name"></div>
      </div>
      <div class="inline-content-section">
        <div class="inline-formatting-toolbar">
          <div class="inline-format-buttons">
            <button type="button" class="inline-format-btn" data-format="bold">
              <strong>B</strong>
            </button>
            <button
              type="button"
              class="inline-format-btn"
              data-format="italic"
            >
              <em>I</em>
            </button>
            <button type="button" class="inline-format-btn" data-format="code">
              <code>&lt;/&gt;</code>
            </button>
            <button type="button" class="inline-emoji-btn">
              <span>😊</span>
            </button>
          </div>
          <div class="inline-char-count">
            <span class="count">0</span>/{COMMENT_CONFIG.characterLimits.max}
          </div>
        </div>
        <div class="inline-emoji-picker">
          <div class="emoji-grid">
            <button type="button" class="emoji-option" data-emoji="😊"
              >😊</button
            >
            <button type="button" class="emoji-option" data-emoji="😂"
              >😂</button
            >
            <button type="button" class="emoji-option" data-emoji="😍"
              >😍</button
            >
            <button type="button" class="emoji-option" data-emoji="🤔"
              >🤔</button
            >
            <button type="button" class="emoji-option" data-emoji="👍"
              >👍</button
            >
            <button type="button" class="emoji-option" data-emoji="👎"
              >👎</button
            >
            <button type="button" class="emoji-option" data-emoji="❤️"
              >❤️</button
            >
            <button type="button" class="emoji-option" data-emoji="🔥"
              >🔥</button
            >
            <button type="button" class="emoji-option" data-emoji="💡"
              >💡</button
            >
            <button type="button" class="emoji-option" data-emoji="🎉"
              >🎉</button
            >
            <button type="button" class="emoji-option" data-emoji="⚡"
              >⚡</button
            >
            <button type="button" class="emoji-option" data-emoji="✨"
              >✨</button
            >
          </div>
        </div>
        <textarea
          name="content"
          placeholder="Write your reply..."
          rows="3"
          maxlength={COMMENT_CONFIG.characterLimits.max}
          required
          class="inline-textarea"></textarea>
        <div class="inline-form-footer">
          <div class="inline-guidelines">
            Please respect our community guidelines.
          </div>
          <div class="inline-actions">
            <button type="button" class="cancel-inline-btn">Cancel</button>
            <button type="submit" class="submit-inline-btn">
              <span class="btn-text">Reply</span>
              <div class="btn-spinner" style="display: none;">
                <div class="loading-spinner"></div>
              </div>
            </button>
          </div>
        </div>
      </div>
    </form>
  </div>
</template>

<!-- Inline Edit Template -->
<template id="inline-edit-template">
  <div class="inline-edit-form">
    <div class="edit-form-header">
      <span>Edit Comment</span>
      <button type="button" class="cancel-edit-inline">×</button>
    </div>
    <form class="edit-comment-form-inline">
      <div class="edit-formatting-toolbar">
        <div class="edit-format-buttons">
          <button type="button" class="edit-format-btn" data-format="bold">
            <strong>B</strong>
          </button>
          <button type="button" class="edit-format-btn" data-format="italic">
            <em>I</em>
          </button>
          <button type="button" class="edit-format-btn" data-format="code">
            <code>&lt;/&gt;</code>
          </button>
        </div>
        <div class="edit-char-count">
          <span class="count">0</span>/{COMMENT_CONFIG.characterLimits.max}
        </div>
      </div>
      <textarea
        name="content"
        placeholder="Edit your comment..."
        rows="4"
        maxlength={COMMENT_CONFIG.characterLimits.max}
        required
        class="edit-textarea"></textarea>
      <div class="edit-form-footer">
        <select class="edit-reason-select" name="edit_reason">
          <option value="">Select edit reason</option>
          {
            COMMENT_CONFIG.editReasons.map((reason) => (
              <option value={reason}>{reason}</option>
            ))
          }
        </select>
        <div class="edit-actions">
          <button type="button" class="cancel-edit-btn">Cancel</button>
          <button type="submit" class="save-edit-btn">
            <span class="btn-text">Save Changes</span>
            <div class="btn-spinner" style="display: none;">
              <div class="loading-spinner"></div>
            </div>
          </button>
        </div>
      </div>
    </form>
  </div>
</template>

<style is:global>
  @import "../../styles/comments.css";
</style>

<script is:inline>
  // Initialize auth and comments when page loads
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      console.log("🔄 Initializing TinkByte Comments...");

      // Import auth manager
      const { authManager } = await import("/src/lib/auth.js");
      await authManager.initialize();

      // Import supabase and API
      const { supabase, TinkByteAPI } = await import("/src/lib/supabase.js");

      // Make globally available
      window.authManager = {
        authState: {
          currentUser: authManager.getUser(),
          profile: authManager.getProfile(),
          isAuthenticated: !!authManager.getUser(),
        },
        getCurrentUser: () => authManager.getUser(),
        getProfile: () => authManager.getProfile(),
        isUserAuthenticated: () => !!authManager.getUser(),
        onAuthStateChange: (callback) => authManager.onAuthChange(callback),
        initialize: () => Promise.resolve(),
      };

      window.supabase = supabase;
      window.TinkByteAPI = TinkByteAPI;

      // Dispatch ready event
      window.dispatchEvent(
        new CustomEvent("authReady", {
          detail: {
            authManager: window.authManager,
            supabase: window.supabase,
          },
        })
      );

      console.log("✅ TinkByte Comments initialized");
    } catch (error) {
      console.error("❌ Comment initialization failed:", error);

      // Create fallback objects
      window.authManager = {
        authState: { currentUser: null, profile: null, isAuthenticated: false },
        getCurrentUser: () => null,
        getProfile: () => null,
        isUserAuthenticated: () => false,
        onAuthStateChange: () => () => {},
        initialize: () => Promise.resolve(),
      };

      window.TinkByteAPI = {
        addComment: async () => ({
          success: false,
          error: "API not available",
        }),
        updateComment: async () => ({
          success: false,
          error: "API not available",
        }),
        deleteComment: async () => ({
          success: false,
          error: "API not available",
        }),
        toggleCommentLike: async () => ({
          success: false,
          error: "API not available",
        }),
        toggleCommentBookmark: async () => ({
          success: false,
          error: "API not available",
        }),
        saveCommentDraft: async () => ({
          success: false,
          error: "API not available",
        }),
        getCommentDraft: async () => ({
          success: false,
          error: "API not available",
        }),
      };

      window.dispatchEvent(
        new CustomEvent("authReady", {
          detail: {
            authManager: window.authManager,
            supabase: window.supabase,
          },
        })
      );
    }
  });
</script>

<!-- Load comments script after initialization -->
<script src="/scripts/comments.js" is:inline></script>
