---
// Comment list component
import CommentItem from "./CommentItem.astro";
import { supabase } from "../../lib/supabase";

interface Props {
  articleId: string;
  user?: any;
}

const { articleId, user } = Astro.props;

// Fetch comments for the article
const { data: comments } = await supabase
  .from("comments")
  .select(
    `
    *,
    user_profile:profiles(display_name, avatar_type, avatar_preset_id, avatar_url)
  `
  )
  .eq("article_id", articleId)
  .eq("is_deleted", false)
  .in("moderation_status", ["approved", "auto_approved"])
  .order("created_at", { ascending: true });

// Build comment tree
function buildCommentTree(comments: any[]) {
  const commentMap = new Map();
  const rootComments: any[] = [];

  // Create map and calculate thread levels
  comments.forEach((comment) => {
    comment.replies = [];
    comment.thread_level = 0;
    commentMap.set(comment.id, comment);
  });

  // Build tree structure
  comments.forEach((comment) => {
    if (comment.parent_id) {
      const parent = commentMap.get(comment.parent_id);
      if (parent) {
        comment.thread_level = Math.min(parent.thread_level + 1, 3);
        parent.replies.push(comment);
      }
    } else {
      rootComments.push(comment);
    }
  });

  return rootComments;
}

const commentTree = comments ? buildCommentTree(comments) : [];
const totalComments = comments?.length || 0;
---

<div class="comment-list-container">
  {
    totalComments === 0 ? (
      <div class="no-comments">
        <div class="no-comments-icon">
          <svg
            width="48"
            height="48"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="1.5"
          >
            <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" />
            <path d="M8 9h8" />
            <path d="M8 13h6" />
          </svg>
        </div>
        <h3 class="no-comments-title">No comments yet</h3>
        <p class="no-comments-description">
          Be the first to share your thoughts!
        </p>
      </div>
    ) : (
      <div class="comment-list" id="comment-list">
        <div class="comment-list-header">
          <h3 class="comment-count">
            {totalComments} {totalComments === 1 ? "Comment" : "Comments"}
          </h3>
          <div class="comment-sort">
            <select class="sort-select" id="comment-sort">
              <option value="newest">Newest First</option>
              <option value="oldest">Oldest First</option>
              <option value="most-liked">Most Liked</option>
            </select>
          </div>
        </div>

        <div class="comment-items">
          {commentTree.map((comment) => (
            <CommentItem comment={comment} user={user} />
          ))}
        </div>
      </div>
    )
  }

  <!-- Loading state -->
  <div class="loading-state" id="loading-state" style="display: none;">
    <div class="loading-content">
      <svg
        class="loading-spinner"
        width="32"
        height="32"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
      >
        <line x1="12" y1="2" x2="12" y2="6"></line>
        <line x1="12" y1="18" x2="12" y2="22"></line>
        <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line>
        <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line>
        <line x1="2" y1="12" x2="6" y2="12"></line>
        <line x1="18" y1="12" x2="22" y2="12"></line>
        <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line>
        <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>
      </svg>
      <p class="loading-text">Loading comments...</p>
    </div>
  </div>

  <!-- Load more button -->
  <div class="load-more-section" id="load-more-section" style="display: none;">
    <button class="load-more-btn" id="load-more-btn">
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <path d="M12 5v14"></path>
        <path d="M5 12h14"></path>
      </svg>
      Load More Comments
    </button>
  </div>
</div>

<style>
  .comment-list-container {
    margin-top: 2rem;
  }

  /* No Comments State */
  .no-comments {
    background: #0d1117;
    border: 1px solid #21262d;
    padding: 4rem 2rem;
    text-align: center;
    margin-bottom: 2rem;
  }

  .no-comments-icon {
    margin: 0 auto 1.5rem;
    opacity: 0.6;
  }

  .no-comments-icon svg {
    color: #8b949e;
  }

  .no-comments-title {
    color: #f0f6fc;
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
  }

  .no-comments-description {
    color: #8b949e;
    font-size: 0.875rem;
    margin: 0;
    line-height: 1.5;
  }

  /* Comment List */
  .comment-list {
    background: #0d1117;
    border: 1px solid #21262d;
    margin-bottom: 2rem;
  }

  .comment-list-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.5rem;
    border-bottom: 1px solid #21262d;
    background: #161b22;
  }

  .comment-count {
    color: #f0f6fc;
    font-size: 1rem;
    font-weight: 600;
    margin: 0;
  }

  .comment-sort {
    display: flex;
    align-items: center;
  }

  .sort-select {
    background: #21262d;
    border: 1px solid #30363d;
    color: #f0f6fc;
    padding: 0.5rem 0.75rem;
    font-size: 0.875rem;
    cursor: pointer;
    font-family: inherit;
  }

  .sort-select:focus {
    outline: none;
    border-color: #4285f4;
  }

  .comment-items {
    display: flex;
    flex-direction: column;
  }

  /* Loading State */
  .loading-state {
    background: #0d1117;
    border: 1px solid #21262d;
    padding: 3rem;
    margin-bottom: 2rem;
  }

  .loading-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
  }

  .loading-spinner {
    margin-bottom: 1rem;
    stroke: #4285f4;
    animation: spin 1s linear infinite;
  }

  .loading-text {
    color: #8b949e;
    font-size: 0.875rem;
    margin: 0;
  }

  /* Load More */
  .load-more-section {
    text-align: center;
    margin-bottom: 2rem;
  }

  .load-more-btn {
    background: #21262d;
    border: 1px solid #30363d;
    color: #f0f6fc;
    padding: 0.75rem 1.5rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    transition: all 0.2s ease;
    font-family: inherit;
  }

  .load-more-btn:hover {
    background: #30363d;
    border-color: #4285f4;
  }

  .load-more-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Light mode styles */
  :global(.light) .no-comments {
    background: white;
    border-color: #e2e8f0;
  }

  :global(.light) .no-comments-icon svg {
    color: #6b7280;
  }

  :global(.light) .no-comments-title {
    color: #374151;
  }

  :global(.light) .no-comments-description {
    color: #6b7280;
  }

  :global(.light) .comment-list {
    background: white;
    border-color: #e2e8f0;
  }

  :global(.light) .comment-list-header {
    background: #f8f9fa;
    border-bottom-color: #e2e8f0;
  }

  :global(.light) .comment-count {
    color: #374151;
  }

  :global(.light) .sort-select {
    background: white;
    border-color: #d1d5db;
    color: #374151;
  }

  :global(.light) .sort-select:focus {
    border-color: #243788;
  }

  :global(.light) .loading-state {
    background: white;
    border-color: #e2e8f0;
  }

  :global(.light) .loading-spinner {
    stroke: #243788;
  }

  :global(.light) .loading-text {
    color: #6b7280;
  }

  :global(.light) .load-more-btn {
    background: white;
    border-color: #d1d5db;
    color: #374151;
  }

  :global(.light) .load-more-btn:hover {
    background: #f9fafb;
    border-color: #243788;
  }

  /* Animations */
  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Mobile responsive */
  @media (max-width: 640px) {
    .comment-list-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .comment-sort {
      width: 100%;
    }

    .sort-select {
      width: 100%;
    }

    .no-comments {
      padding: 2rem 1rem;
    }

    .loading-state {
      padding: 2rem;
    }
  }
</style>

<script>
  import { supabase } from "../../lib/supabase";

  document.addEventListener("DOMContentLoaded", () => {
    const commentList = document.getElementById("comment-list");
    const loadingState = document.getElementById("loading-state");
    const loadMoreSection = document.getElementById("load-more-section");
    const loadMoreBtn = document.getElementById("load-more-btn");
    const sortSelect = document.getElementById(
      "comment-sort"
    ) as HTMLSelectElement;

    if (!commentList) return;

    // Set up real-time subscription for new comments
    const articleId = window.location.pathname.split("/").pop();

    if (articleId) {
      const subscription = supabase
        .channel(`comments:${articleId}`)
        .on(
          "postgres_changes",
          {
            event: "INSERT",
            schema: "public",
            table: "comments",
            filter: `article_id=eq.${articleId}`,
          },
          (payload) => {
            console.log("New comment received:", payload);
            // Show a subtle notification instead of full reload
            showNewCommentNotification();
          }
        )
        .subscribe();

      // Cleanup on page unload
      window.addEventListener("beforeunload", () => {
        subscription.unsubscribe();
      });
    }

    // Sort functionality
    if (sortSelect) {
      sortSelect.addEventListener("change", (e) => {
        const sortValue = (e.target as HTMLSelectElement).value;
        sortComments(sortValue);
      });
    }

    // Load more functionality
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener("click", () => {
        loadMoreComments();
      });
    }

    // Helper functions
    function showNewCommentNotification() {
      // Create and show a notification
      const notification = document.createElement("div");
      notification.className = "new-comment-notification";
      notification.innerHTML = `
        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"/>
        </svg>
        <span>New comment posted</span>
        <button onclick="this.parentElement.remove()">×</button>
      `;

      // Add styles
      notification.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: #4285f4;
        color: white;
        padding: 0.75rem 1rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        font-size: 0.875rem;
        z-index: 1000;
        animation: slideIn 0.3s ease;
      `;

      document.body.appendChild(notification);

      // Auto remove after 5 seconds
      setTimeout(() => {
        if (notification.parentElement) {
          notification.remove();
        }
      }, 5000);
    }

    function sortComments(sortType: string) {
      if (loadingState) {
        loadingState.style.display = "flex";
      }

      // Simulate sorting (in real implementation, this would refetch data)
      setTimeout(() => {
        console.log("Sorting comments by:", sortType);
        if (loadingState) {
          loadingState.style.display = "none";
        }
        // Refresh with new sort order
        window.location.reload();
      }, 500);
    }

    function loadMoreComments() {
      if (loadMoreBtn) {
        // Cast to HTMLButtonElement to access button-specific properties
        (loadMoreBtn as HTMLButtonElement).disabled = true;
        loadMoreBtn.innerHTML = `
      <svg class="loading-spinner" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor">
        <line x1="12" y1="2" x2="12" y2="6"/>
        <line x1="12" y1="18" x2="12" y2="22"/>
        <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"/>
        <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"/>
        <line x1="2" y1="12" x2="6" y2="12"/>
        <line x1="18" y1="12" x2="22" y2="12"/>
        <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"/>
        <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"/>
      </svg>
      Loading...
    `;

        // Simulate loading more comments
        setTimeout(() => {
          console.log("Loading more comments...");
          window.location.reload();
        }, 1000);
      }
    }

    // Add slide-in animation styles
    if (!document.getElementById("comment-animations")) {
      const style = document.createElement("style");
      style.id = "comment-animations";
      style.textContent = `
        @keyframes slideIn {
          from { transform: translateX(100%); opacity: 0; }
          to { transform: translateX(0); opacity: 1; }
        }
      `;
      document.head.appendChild(style);
    }
  });
</script>
