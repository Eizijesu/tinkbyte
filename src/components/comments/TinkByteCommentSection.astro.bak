---
// src/components/comments/TinkByteCommentSection.astro
import { supabase } from "../../lib/supabase";
import { COMMENT_CONFIG } from "../../lib/config/comments";

const { articleId, postSlug, postTitle } = Astro.props;

// Get comments - VISIBLE TO EVERYONE
let totalComments = 0;
let initialComments: CommentWithProfile[] = [];

try {
  const { data, error, count } = await supabase
    .from("comments")
    .select(
      `
      *,
      profiles:user_id(
        id,
        display_name,
        avatar_type,
        avatar_preset_id,
        avatar_url,
        reputation_score,
        is_admin
      )
    `,
      { count: "exact" }
    )
    .eq("article_id", articleId)
    .eq("is_deleted", false)
    .in("status", ["approved", "auto_approved"])
    .order("created_at", { ascending: false });

  totalComments = count || 0;
  initialComments = data || [];
} catch (error) {
  console.error("Error loading comments:", error);
  initialComments = [];
}

// Helper functions
function formatDateHelper(dateString: string): string {
  const date = new Date(dateString);
  const now = new Date();
  const diff = now.getTime() - date.getTime();
  const minutes = Math.floor(diff / 60000);
  const hours = Math.floor(diff / 3600000);
  const days = Math.floor(diff / 86400000);

  if (minutes < 1) return "just now";
  if (minutes < 60) return `${minutes}m ago`;
  if (hours < 24) return `${hours}h ago`;
  if (days < 7) return `${days}d ago`;
  return date.toLocaleDateString();
}

function formatContentHelper(content: string): string {
  const mentionPattern = /@(\w+)/g;
  return content
    .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
    .replace(/\*(.*?)\*/g, "<em>$1</em>")
    .replace(/`(.*?)`/g, "<code>$1</code>")
    .replace(mentionPattern, '<span class="mention">@$1</span>')
    .replace(/\n/g, "<br>");
}

function getUserAvatarHelper(profile: any): string {
  if (!profile) return "/images/avatars/preset-1.svg";

  if (profile.avatar_type === "uploaded" && profile.avatar_url) {
    return profile.avatar_url;
  }

  const presetId = profile.avatar_preset_id || 1;
  return `/images/avatars/preset-${presetId}.svg`;
}

function getReactionIconHelper(type: string): string {
  const icons: Record<string, string> = {
    helpful: "üëç",
    insightful: "üí°",
    great: "üî•",
    love: "‚ù§Ô∏è",
    thinking: "ü§î",
  };
  return icons[type] || "üëç"
}

// Build comment tree with proper thread level calculation for 5 levels (0-4)
function buildCommentTreeHelper(comments: CommentWithProfile[]): CommentWithProfile[] {
  const commentMap = new Map<string, CommentWithProfile>();
  const rootComments: CommentWithProfile[] = [];

  // First pass: create all comments with initial structure
  comments.forEach((comment) => {
    const processedComment: CommentWithProfile = {
      ...comment,
      user_profile: comment.profiles,
      replies: [],
      thread_level: 0,
    };
    commentMap.set(comment.id, processedComment);
  });

  // Second pass: build tree and calculate proper thread levels
  comments.forEach((comment) => {
    const processedComment = commentMap.get(comment.id);
    if (!processedComment) return;

    if (comment.parent_id) {
      const parent = commentMap.get(comment.parent_id);
      if (parent) {
        // Calculate thread level based on parent (max 4 levels deep)
        processedComment.thread_level = Math.min((parent.thread_level || 0) + 1, 4);
        
        // Allow up to 5 levels of threading (0-4)
        if (processedComment.thread_level <= 4) {
          parent.replies = parent.replies || [];
          parent.replies.push(processedComment);
        } else {
          // If exceeds 5 levels, add to root with max level
          processedComment.thread_level = 4;
          rootComments.push(processedComment);
        }
      } else {
        // Parent not found, treat as root comment
        rootComments.push(processedComment);
      }
    } else {
      // Root level comment
      rootComments.push(processedComment);
    }
  });

  // Recursive function to sort all replies
  function sortRepliesRecursively(comment: CommentWithProfile) {
    if (comment.replies && comment.replies.length > 0) {
      comment.replies.sort((a, b) => 
        new Date(a.created_at).getTime() - new Date(b.created_at).getTime()
      );
      // Recursively sort nested replies
      comment.replies.forEach(sortRepliesRecursively);
    }
  }

  // Sort root comments and all nested replies
  rootComments.sort((a, b) => {
    if (a.is_pinned !== b.is_pinned) {
      return a.is_pinned ? -1 : 1;
    }
    return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();
  });

  rootComments.forEach(sortRepliesRecursively);
  return rootComments;
}

const commentTree = buildCommentTreeHelper(initialComments);
const reactionTypes = ["helpful", "insightful", "great", "love", "thinking"];
---

<section 
  class="tinkbyte-comment-section" 
  id="comments-section"
  data-article-id={articleId}
  data-config={JSON.stringify(COMMENT_CONFIG)}
>
  <!-- Thread Header -->
  <div class="thread-header">
    <div class="thread-header-content">
      <div class="thread-info">
        <svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
        </svg>
        <span class="thread-label">THREAD</span>
        <span class="thread-count">{totalComments}</span>
      </div>
      <div class="header-actions">
        <button class="manage-btn" id="tinkbyte-account-btn">
          Manage Your <span class="highlight">TINKBYTE</span> Account
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path>
            <circle cx="12" cy="7" r="4"></circle>
          </svg>
        </button>
      </div>
    </div>
    <div class="thread-subtitle">
      We want to hear from you! Share your opinions in the thread below and remember to keep it respectful.
    </div>
  </div>

  <!-- Comment Form Section -->
  <div class="comment-form-section" id="comment-form-section">
    <!-- Guest State (Not Signed In) -->
    <div class="guest-comment-prompt" id="guest-comment-prompt">
      <div class="guest-avatar">
        <svg width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"/>
          <circle cx="12" cy="7" r="4"/>
        </svg>
      </div>
      <div class="guest-prompt-content">
        <input 
          type="text" 
          class="guest-comment-input" 
          placeholder="Reply / Post"
          readonly
          onclick="window.location.href='/auth/signin'"
        />
        <div class="guest-prompt-text">
          <a href="/auth/signin" class="auth-link">Sign in</a> to join the conversation
        </div>
      </div>
    </div>

    <!-- User Comment Form (Signed In) -->
    <div class="user-comment-form" id="user-comment-form" style="display: none;">
      <div class="comment-form-container">
        <!-- Reply Context -->
        <div class="reply-context" id="reply-context" style="display: none;">
          <div class="reply-header">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <polyline points="9,17 4,12 9,7"></polyline>
              <path d="M20 18v-2a4 4 0 0 0-4-4H4"></path>
            </svg>
            <span>Replying to <strong id="reply-author"></strong></span>
            <button type="button" class="cancel-reply-btn" id="cancel-reply">√ó</button>
          </div>
          <div class="reply-preview" id="reply-preview"></div>
        </div>

        <form class="comment-form" id="comment-form" data-article-id={articleId}>
          <!-- User Info -->
          <div class="user-info">
            <div class="user-avatar" id="user-avatar">
              <!-- Will be populated by JavaScript -->
            </div>
            <div class="user-details">
              <div class="user-name" id="user-name">Loading...</div>
            </div>
          </div>

          <!-- Comment Content -->
          <div class="comment-input-section">
            <div class="formatting-toolbar">
              <div class="format-buttons">
                <button type="button" class="format-btn" data-format="bold" title="Bold">
                  <strong>B</strong>
                </button>
                <button type="button" class="format-btn" data-format="italic" title="Italic">
                  <em>I</em>
                </button>
                <button type="button" class="format-btn" data-format="code" title="Code">
                  <code>&lt;/&gt;</code>
                </button>
                <button type="button" class="mention-btn" title="Mention User">
                  <span>@</span>
                </button>
                <button type="button" class="emoji-btn" title="Add Emoji">
                  <span>üòä</span>
                </button>
              </div>
              <div class="character-count">
                <span class="count" id="character-count">0</span>/{COMMENT_CONFIG.characterLimits.max}
              </div>
            </div>

            <!-- Enhanced Emoji picker -->
            <div class="emoji-picker" id="emoji-picker">
              <div class="emoji-categories">
                <button type="button" class="emoji-category active" data-category="recent">Recent</button>
                <button type="button" class="emoji-category" data-category="smileys">üòä</button>
                <button type="button" class="emoji-category" data-category="objects">üéØ</button>
                <button type="button" class="emoji-category" data-category="symbols">‚ù§Ô∏è</button>
              </div>
              <div class="emoji-grid" id="emoji-grid">
                <!-- Smileys & Emotion -->
                <button type="button" class="emoji-option" data-emoji="üòä" data-category="smileys">üòä</button>
                <button type="button" class="emoji-option" data-emoji="üòÇ" data-category="smileys">üòÇ</button>
                <button type="button" class="emoji-option" data-emoji="üòç" data-category="smileys">üòç</button>
                <button type="button" class="emoji-option" data-emoji="ü§î" data-category="smileys">ü§î</button>
                <button type="button" class="emoji-option" data-emoji="üò¢" data-category="smileys">üò¢</button>
                <button type="button" class="emoji-option" data-emoji="üòÖ" data-category="smileys">üòÖ</button>
                <button type="button" class="emoji-option" data-emoji="üòé" data-category="smileys">üòé</button>
                <button type="button" class="emoji-option" data-emoji="ü§Ø" data-category="smileys">ü§Ø</button>
                <!-- Objects -->
                <button type="button" class="emoji-option" data-emoji="üëç" data-category="objects">üëç</button>
                <button type="button" class="emoji-option" data-emoji="üëé" data-category="objects">üëé</button>
                <button type="button" class="emoji-option" data-emoji="üî•" data-category="objects">üî•</button>
                <button type="button" class="emoji-option" data-emoji="üí°" data-category="objects">üí°</button>
                <button type="button" class="emoji-option" data-emoji="üéâ" data-category="objects">üéâ</button>
                <button type="button" class="emoji-option" data-emoji="‚ö°" data-category="objects">‚ö°</button>
                <!-- Symbols -->
                <button type="button" class="emoji-option" data-emoji="‚ù§Ô∏è" data-category="symbols">‚ù§Ô∏è</button>
                <button type="button" class="emoji-option" data-emoji="üíØ" data-category="symbols">üíØ</button>
                <button type="button" class="emoji-option" data-emoji="‚ú®" data-category="symbols">‚ú®</button>
                <button type="button" class="emoji-option" data-emoji="üöÄ" data-category="symbols">üöÄ</button>
              </div>
            </div>

            <!-- @mention suggestions -->
            <div class="mention-suggestions" id="mention-suggestions">
              <div class="mention-list" id="mention-list">
                <!-- Populated dynamically -->
              </div>
            </div>

            <textarea 
              name="content" 
              class="comment-textarea" 
              placeholder="Share your thoughts, use @ to mention users"
              rows="4" 
              maxlength={COMMENT_CONFIG.characterLimits.max} 
              required 
              id="comment-textarea"
            ></textarea>

            <div class="form-footer">
              <div class="form-guidelines">
                Please respect our <a href="/terms#community-guidelines" target="_blank">community guidelines</a>. No links, inappropriate language, or spam.
              </div>
              <div class="form-actions">
                <button type="button" class="cancel-btn" id="cancel-comment">Cancel</button>
                <button type="submit" class="submit-btn" id="submit-comment">
                  <span class="btn-text">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <line x1="22" y1="2" x2="11" y2="13"></line>
                      <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
                    </svg>
                    Post
                  </span>
                  <div class="btn-spinner" style="display: none;">
                    <div class="loading-spinner"></div>
                  </div>
                </button>
              </div>
            </div>
          </div>
        </form>

        <!-- Messages -->
        <div class="error-message" id="error-message" style="display: none;">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
            <line x1="12" y1="9" x2="12" y2="13"></line>
            <line x1="12" y1="17" x2="12.01" y2="17"></line>
          </svg>
          <span class="error-text"></span>
        </div>
      </div>
    </div>
  </div>

  <!-- Sort Options -->
  <div class="sort-section">
    <div class="sort-controls">
      <label for="sort-select">Sort by:</label>
      <select id="sort-select" class="sort-select">
        <option value="popular">Popular</option>
        <option value="newest">Newest</option>
        <option value="oldest">Oldest</option>
      </select>
    </div>
  </div>

  <!-- Comments List -->
  <div class="comments-container">
    {totalComments === 0 ? (
      <div class="empty-state" id="empty-state">
        <div class="empty-content">
          <div class="empty-icon">
            <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="1.5">
              <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z" />
            </svg>
          </div>
          <h3 class="empty-title">No comments yet</h3>
          <p class="empty-description">
            Be the first to share your thoughts on this article.
          </p>
        </div>
      </div>
    ) : (
      <div class="comments-list" id="comments-list">
        <div class="comments-items" id="comments-items">
          {commentTree.map((comment) => (
            <div class="comment-card" data-comment-id={comment.id} data-user-id={comment.user_id || ''} data-thread-level={comment.thread_level || 0}>
              <div class="comment-content-wrapper">
                <!-- Comment Header -->
                <div class="comment-header">
                  <div class="comment-user-info">
                    <div class="comment-avatar">
                      <img src={getUserAvatarHelper(comment.user_profile)} alt={comment.user_profile?.display_name || comment.guest_name || "Anonymous"} />
                      {comment.user_profile?.is_admin && <div class="admin-badge">üëë</div>}
                    </div>
                    <div class="comment-meta">
                      <div class="user-details">
                        <span class={`username ${comment.user_profile?.is_admin ? "admin" : ""}`}>
                          {comment.user_profile?.display_name || comment.guest_name || "Anonymous"}
                        </span>
                        <span class="comment-time" title={new Date(comment.created_at).toLocaleString()}>
                          {formatDateHelper(comment.created_at)}
                        </span>
                        {comment.is_edited && (
                          <span class="edit-indicator" title="This comment has been edited">
                            (edited)
                          </span>
                        )}
                      </div>
                    </div>
                  </div>
                  
                  <div class="comment-actions-menu">
                    <button class="menu-btn" data-comment-id={comment.id} title="More options">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <circle cx="12" cy="12" r="1"></circle>
                        <circle cx="19" cy="12" r="1"></circle>
                        <circle cx="5" cy="12" r="1"></circle>
                      </svg>
                    </button>
                    <div class="dropdown-menu" id={`dropdown-${comment.id}`}>
                      <button class="dropdown-item edit-comment-btn" data-comment-id={comment.id} style="display: none;">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                          <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                        </svg>
                        Edit
                      </button>
                      <button class="dropdown-item delete-comment-btn" data-comment-id={comment.id} style="display: none;">
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <polyline points="3,6 5,6 21,6"></polyline>
                          <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                        </svg>
                        Delete
                      </button>
                      <button class="dropdown-item report-btn" data-comment-id={comment.id}>
                        <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"></path>
                          <line x1="4" y1="22" x2="4" y2="15"></line>
                        </svg>
                        Report
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Comment Content -->
                <div class="comment-content">
                  <div class="comment-text" set:html={formatContentHelper(comment.content)} />
                </div>

                <!-- Comment Footer -->
                <div class="comment-footer">
                  <!-- Voting -->
                  <div class="comment-voting">
                    <button class="vote-btn upvote-btn" data-comment-id={comment.id} title="Upvote">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M7 14l5-5 5 5"/>
                      </svg>
                      <span class="vote-count">{comment.like_count || 0}</span>
                    </button>
                    <button class="vote-btn downvote-btn" data-comment-id={comment.id} title="Downvote">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M17 10l-5 5-5-5"/>
                      </svg>
                    </button>
                  </div>

                  <!-- Reactions -->
                  <div class="comment-reactions">
                    {reactionTypes.map((reaction) => (
                      <button 
                        class="reaction-btn"
                        data-reaction={reaction} 
                        data-comment-id={comment.id} 
                        title={`React with ${reaction}`}
                      >
                        <span class="reaction-emoji">{getReactionIconHelper(reaction)}</span>
                        <span class="reaction-count">{comment.reaction_counts?.[reaction] || 0}</span>
                      </button>
                    ))}
                  </div>

                  <!-- Actions -->
                  <div class="comment-actions">
                    {comment.thread_level < 4 && (
                      <button class="action-btn reply-btn" data-comment-id={comment.id} data-author={comment.user_profile?.display_name || comment.guest_name || "Anonymous"} title="Reply to this comment">
                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                          <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"/>
                        </svg>
                        Reply
                      </button>
                    )}
                    
                    <button class="action-btn bookmark-btn" data-comment-id={comment.id} title="Bookmark this comment">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
                      </svg>
                    </button>

                    <button class="action-btn copy-btn" data-comment-id={comment.id} title="Copy comment text">
                      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
                        <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
                      </svg>
                    </button>
                  </div>
                </div>

                <!-- Inline Reply Container -->
                <div class="inline-reply-container" data-comment-id={comment.id} style="display: none;"></div>
              </div>

              <!-- Render replies recursively -->
              {comment.replies && comment.replies.length > 0 && (
                <div class="comment-replies" data-parent-id={comment.id}>
                  {comment.replies.map((reply) => (
                    <Fragment>
                      <!-- Recursive Reply Component -->
                      <div class="comment-card reply-card" data-comment-id={reply.id} data-thread-level={reply.thread_level || 0} data-user-id={reply.user_id || ''}>
                        <div class="reply-indicator"></div>
                        
                        <div class="reply-content">
                          <div class="comment-header">
                            <div class="comment-user-info">
                              <div class="comment-avatar">
                                <img src={getUserAvatarHelper(reply.user_profile)} alt={reply.user_profile?.display_name || reply.guest_name || "Anonymous"} />
                                {reply.user_profile?.is_admin && <div class="admin-badge">üëë</div>}
                              </div>
                              <div class="comment-meta">
                                <div class="user-details">
                                  <span class={`username ${reply.user_profile?.is_admin ? "admin" : ""}`}>
                                    {reply.user_profile?.display_name || reply.guest_name || "Anonymous"}
                                  </span>
                                  <span class="comment-time">
                                    {formatDateHelper(reply.created_at)}
                                  </span>
                                  {reply.is_edited && (
                                    <span class="edit-indicator">
                                      (edited)
                                    </span>
                                  )}
                                </div>
                              </div>
                            </div>
                            
                            <div class="comment-actions-menu">
                              <button class="menu-btn" data-comment-id={reply.id}>
                                <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                  <circle cx="12" cy="12" r="1"></circle>
                                  <circle cx="19" cy="12" r="1"></circle>
                                  <circle cx="5" cy="12" r="1"></circle>
                                </svg>
                              </button>
                              <div class="dropdown-menu" id={`dropdown-${reply.id}`}>
                                <button class="dropdown-item edit-comment-btn" data-comment-id={reply.id} style="display: none;">
                                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                                    <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                                  </svg>
                                  Edit
                                </button>
                                <button class="dropdown-item delete-comment-btn" data-comment-id={reply.id} style="display: none;">
                                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <polyline points="3,6 5,6 21,6"></polyline>
                                    <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                                  </svg>
                                  Delete
                                </button>
                                <button class="dropdown-item report-btn" data-comment-id={reply.id}>
                                  <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"></path>
                                    <line x1="4" y1="22" x2="4" y2="15"></line>
                                  </svg>
                                  Report
                                </button>
                              </div>
                            </div>
                          </div>

                          <div class="comment-content">
                            <div class="comment-text" set:html={formatContentHelper(reply.content)} />
                          </div>

                          <div class="comment-footer">
                            <div class="comment-voting">
                              <button class="vote-btn upvote-btn" data-comment-id={reply.id} title="Upvote">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                  <path d="M7 14l5-5 5 5"/>
                                </svg>
                                <span class="vote-count">{reply.like_count || 0}</span>
                              </button>
                              <button class="vote-btn downvote-btn" data-comment-id={reply.id} title="Downvote">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                  <path d="M17 10l-5 5-5-5"/>
                                </svg>
                              </button>
                            </div>

                            <div class="comment-reactions">
                              {reactionTypes.map((reaction) => (
                                <button 
                                  class="reaction-btn"
                                  data-reaction={reaction} 
                                  data-comment-id={reply.id} 
                                  title={`React with ${reaction}`}
                                >
                                  <span class="reaction-emoji">{getReactionIconHelper(reaction)}</span>
                                  <span class="reaction-count">{reply.reaction_counts?.[reaction] || 0}</span>
                                </button>
                              ))}
                            </div>

                            <div class="comment-actions">
                              {(reply.thread_level || 0) < 4 && (
                                <button class="action-btn reply-btn" data-comment-id={reply.id} data-author={reply.user_profile?.display_name || reply.guest_name || "Anonymous"} title="Reply to this comment">
                                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                    <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"/>
                                  </svg>
                                  Reply
                                </button>
                              )}
                              <button class="action-btn bookmark-btn" data-comment-id={reply.id} title="Bookmark this comment">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                  <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
                                </svg>
                              </button>
                              <button class="action-btn copy-btn" data-comment-id={reply.id} title="Copy comment text">
                                <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                  <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
                                  <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
                                </svg>
                              </button>
                            </div>
                          </div>

                          <div class="inline-reply-container" data-comment-id={reply.id} style="display: none;"></div>
                        </div>
                        
                        <!-- Nested replies (limited to 5 levels) -->
                        {reply.replies && reply.replies.length > 0 && (reply.thread_level || 0) < 4 && (
                          <div class="comment-replies" data-parent-id={reply.id}>
                            {reply.replies.map((nestedReply) => (
                              <!-- This would continue recursively, but for simplicity, we'll limit to 2 levels here -->
                              <div class="comment-card reply-card" data-comment-id={nestedReply.id} data-thread-level={nestedReply.thread_level || 0}>
                                <div class="reply-indicator"></div>
                                <div class="reply-content">
                                  <div class="comment-header">
                                    <div class="comment-user-info">
                                      <div class="comment-avatar">
                                        <img src={getUserAvatarHelper(nestedReply.user_profile)} alt={nestedReply.user_profile?.display_name || nestedReply.guest_name || "Anonymous"} />
                                        {nestedReply.user_profile?.is_admin && <div class="admin-badge">üëë</div>}
                                      </div>
                                      <div class="comment-meta">
                                        <div class="user-details">
                                          <span class={`username ${nestedReply.user_profile?.is_admin ? "admin" : ""}`}>
                                            {nestedReply.user_profile?.display_name || nestedReply.guest_name || "Anonymous"}
                                          </span>
                                          <span class="comment-time">
                                            {formatDateHelper(nestedReply.created_at)}
                                          </span>
                                        </div>
                                      </div>
                                    </div>
                                  </div>
                                  <div class="comment-content">
                                    <div class="comment-text" set:html={formatContentHelper(nestedReply.content)} />
                                  </div>
                                  <div class="comment-footer">
                                    <div class="comment-voting">
                                      <button class="vote-btn upvote-btn" data-comment-id={nestedReply.id}>
                                        <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                                          <path d="M7 14l5-5 5 5"/>
                                        </svg>
                                        <span class="vote-count">{nestedReply.like_count || 0}</span>
                                      </button>
                                    </div>
                                    <div class="comment-reactions">
                                      {reactionTypes.map((reaction) => (
                                        <button 
                                          class="reaction-btn"
                                          data-reaction={reaction} 
                                          data-comment-id={nestedReply.id}
                                        >
                                          <span class="reaction-emoji">{getReactionIconHelper(reaction)}</span>
                                          <span class="reaction-count">{nestedReply.reaction_counts?.[reaction] || 0}</span>
                                        </button>
                                      ))}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            ))}
                          </div>
                        )}
                      </div>
                    </Fragment>
                  ))}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    )}
  </div>

  <!-- Delete Modal -->
  <div id="delete-modal" class="modal-overlay" style="display: none;">
    <div class="modal-container">
      <div class="modal-header">
        <h3>Delete Comment</h3>
        <button class="modal-close" type="button">&times;</button>
      </div>
      <div class="modal-body">
        <p>Are you sure you want to delete this comment? This action cannot be undone.</p>
        <div class="comment-preview" id="delete-comment-preview"></div>
      </div>
      <div class="modal-actions">
        <button class="btn-secondary" type="button" id="cancel-delete">Cancel</button>
        <button class="btn-danger" type="button" id="confirm-delete">
          <span class="btn-text">Delete Comment</span>
          <div class="btn-spinner" style="display: none;">
            <div class="loading-spinner"></div>
          </div>
        </button>
      </div>
    </div>
  </div>

  <!-- Inline Reply Template -->
  <template id="inline-reply-template">
    <div class="inline-reply-form">
      <div class="reply-form-header">
        <div class="reply-context-info">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="9,17 4,12 9,7"></polyline>
            <path d="M20 18v-2a4 4 0 0 0-4-4H4"></path>
          </svg>
          <span>Replying to <strong class="reply-author-name"></strong></span>
          <button type="button" class="cancel-inline-reply">√ó</button>
        </div>
      </div>
      <form class="inline-comment-form">
        <div class="inline-user-info">
          <div class="inline-user-avatar"></div>
          <div class="inline-user-name"></div>
        </div>
        <div class="inline-content-section">
          <div class="inline-formatting-toolbar">
            <div class="inline-format-buttons">
              <button type="button" class="inline-format-btn" data-format="bold">
                <strong>B</strong>
              </button>
              <button type="button" class="inline-format-btn" data-format="italic">
                <em>I</em>
              </button>
              <button type="button" class="inline-format-btn" data-format="code">
                <code>&lt;/&gt;</code>
              </button>
              <button type="button" class="inline-emoji-btn">
                <span>üòä</span>
              </button>
            </div>
            <div class="inline-char-count">
              <span class="count">0</span>/1000
            </div>
          </div>
          <div class="inline-emoji-picker">
            <div class="emoji-grid">
              <button type="button" class="emoji-option" data-emoji="üòä">üòä</button>
              <button type="button" class="emoji-option" data-emoji="üòÇ">üòÇ</button>
              <button type="button" class="emoji-option" data-emoji="üòç">üòç</button>
              <button type="button" class="emoji-option" data-emoji="ü§î">ü§î</button>
              <button type="button" class="emoji-option" data-emoji="üëç">üëç</button>
              <button type="button" class="emoji-option" data-emoji="üëé">üëé</button>
              <button type="button" class="emoji-option" data-emoji="‚ù§Ô∏è">‚ù§Ô∏è</button>
              <button type="button" class="emoji-option" data-emoji="üî•">üî•</button>
              <button type="button" class="emoji-option" data-emoji="üí°">üí°</button>
              <button type="button" class="emoji-option" data-emoji="üéâ">üéâ</button>
              <button type="button" class="emoji-option" data-emoji="‚ö°">‚ö°</button>
              <button type="button" class="emoji-option" data-emoji="‚ú®">‚ú®</button>
            </div>
          </div>
          <textarea 
            name="content" 
            placeholder="Write your reply..." 
            rows="3" 
            maxlength="1000" 
            required 
            class="inline-textarea"
          ></textarea>
          <div class="inline-form-footer">
            <div class="inline-guidelines">
              Please respect our community guidelines.
            </div>
            <div class="inline-actions">
              <button type="button" class="cancel-inline-btn">Cancel</button>
              <button type="submit" class="submit-inline-btn">
                <span class="btn-text">Reply</span>
                <div class="btn-spinner" style="display: none;">
                  <div class="loading-spinner"></div>
                </div>
              </button>
            </div>
          </div>
        </div>
      </form>
    </div>
  </template>
</section>

<style>
  /* Base CSS Variables */
  :root {
    --primary-bg: #0f1419;
    --secondary-bg: #1a1f29;
    --tertiary-bg: #252d3a;
    --border-color: #2d3748;
    --text-primary: #e2e8f0;
    --text-secondary: #94a3b8;
    --text-muted: #64748b;
    --accent-primary: #3b82f6;
    --accent-secondary: #2563eb;
    --success-color: #10b981;
    --warning-color: #f59e0b;
    --error-color: #ef4444;
    --upvote-color: #10b981;
    --downvote-color: #ef4444;
    --admin-color: #8b5cf6;
    --mention-color: #3b82f6;
    --mention-bg: rgba(59, 130, 246, 0.1);
    --border-radius: 0px;
    --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
    --transition: all 0.2s ease;
  }

  /* Light Theme Variables */
  [data-theme="light"] {
    --primary-bg: #ffffff;
    --secondary-bg: #f8fafc;
    --tertiary-bg: #e2e8f0;
    --border-color: #cbd5e1;
    --text-primary: #1e293b;
    --text-secondary: #475569;
    --text-muted: #64748b;
    --accent-primary: #3b82f6;
    --accent-secondary: #2563eb;
    --success-color: #059669;
    --warning-color: #d97706;
    --error-color: #dc2626;
    --upvote-color: #059669;
    --downvote-color: #dc2626;
    --admin-color: #7c3aed;
    --mention-color: #3b82f6;
    --mention-bg: rgba(59, 130, 246, 0.1);
    --box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  /* Main Comment Section */
  .tinkbyte-comment-section {
    max-width: 900px;
    margin: 2rem auto;
    padding: 0 1rem;
    font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Roboto", sans-serif;
    background-color: var(--primary-bg);
    color: var(--text-primary);
    line-height: 1.6;
  }

  /* Thread Header */
  .thread-header {
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    padding: 1.5rem;
    margin-bottom: 1rem;
    border-radius: var(--border-radius);
  }

  .thread-header-content {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 1rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .thread-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .thread-info svg {
    color: var(--accent-primary);
    flex-shrink: 0;
  }

  .thread-label {
    font-weight: 700;
    font-size: 0.875rem;
    letter-spacing: 0.1em;
    color: var(--text-primary);
  }

  .thread-count {
    background: var(--accent-primary);
    color: white;
    padding: 0.25rem 0.5rem;
    border-radius: var(--border-radius);
    font-size: 0.75rem;
    font-weight: 600;
    min-width: 1.5rem;
    text-align: center;
  }

  .header-actions {
    display: flex;
    align-items: center;
  }

  .manage-btn {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    background: transparent;
    border: 1px solid var(--border-color);
    color: var(--text-secondary);
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    cursor: pointer;
    transition: var(--transition);
    font-family: inherit;
    border-radius: var(--border-radius);
  }

  .manage-btn:hover {
    background: var(--tertiary-bg);
    border-color: var(--accent-primary);
    color: var(--text-primary);
  }

  .manage-btn .highlight {
    color: var(--accent-primary);
    font-weight: 700;
  }

  .manage-btn svg {
    flex-shrink: 0;
    opacity: 0.7;
  }

  .thread-subtitle {
    color: var(--text-secondary);
    font-size: 0.875rem;
    line-height: 1.5;
    margin-top: 0;
  }

  /* Comment Form Section */
  .comment-form-section {
    margin-bottom: 1.5rem;
  }

  /* Guest Comment Prompt */
  .guest-comment-prompt {
    display: flex;
    align-items: center;
    gap: 1rem;
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    padding: 1rem;
    margin-bottom: 1rem;
    border-radius: var(--border-radius);
  }

  .guest-avatar {
    width: 40px;
    height: 40px;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    color: var(--text-secondary);
    flex-shrink: 0;
  }

  .guest-prompt-content {
    flex: 1;
  }

  .guest-comment-input {
    width: 100%;
    padding: 0.75rem 1rem;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    color: var(--text-secondary);
    font-size: 0.875rem;
    cursor: pointer;
    transition: var(--transition);
    font-family: inherit;
  }

  .guest-comment-input:hover {
    border-color: var(--accent-primary);
  }

  .guest-prompt-text {
    margin-top: 0.5rem;
    font-size: 0.75rem;
    color: var(--text-muted);
  }

  .auth-link {
    color: var(--accent-primary);
    text-decoration: none;
    font-weight: 500;
  }

  .auth-link:hover {
    text-decoration: underline;
  }

  /* User Comment Form */
  .user-comment-form {
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
  }

  .comment-form-container {
    padding: 1rem;
  }

  /* Reply Context */
  .reply-context {
    background: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 0.75rem 1rem;
    margin-bottom: 1rem;
  }

  .reply-header {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
    font-size: 0.875rem;
  }

  .cancel-reply-btn {
    margin-left: auto;
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 1.25rem;
    padding: 0.25rem;
    border-radius: var(--border-radius);
    transition: var(--transition);
  }

  .cancel-reply-btn:hover {
    background: var(--tertiary-bg);
    color: var(--error-color);
  }

  .reply-preview {
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 0.75rem;
    margin-top: 0.5rem;
    font-size: 0.8125rem;
    color: var(--text-secondary);
    max-height: 60px;
    overflow: hidden;
  }

  /* User Info */
  .user-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
  }

  .user-avatar {
    width: 40px;
    height: 40px;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .user-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .user-details {
    flex: 1;
  }

  .user-name {
    font-weight: 600;
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  /* Comment Input Section */
  .comment-input-section {
    display: flex;
    flex-direction: column;
  }

  .formatting-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-bottom: none;
    border-radius: var(--border-radius) var(--border-radius) 0 0;
    position: relative;
  }

  .format-buttons {
    display: flex;
    gap: 0.25rem;
  }

  .format-btn,
  .mention-btn,
  .emoji-btn {
    width: 32px;
    height: 32px;
    border: 1px solid var(--border-color);
    background: var(--tertiary-bg);
    color: var(--text-primary);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    transition: var(--transition);
    border-radius: var(--border-radius);
  }

  .format-btn:hover,
  .mention-btn:hover,
  .emoji-btn:hover {
    background: var(--border-color);
    border-color: var(--accent-primary);
    transform: translateY(-1px);
  }

  .format-btn.active {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    color: white;
  }

  .character-count {
    font-size: 0.75rem;
    color: var(--text-secondary);
    font-weight: 500;
  }

  /* Emoji Picker */
  .emoji-picker,
  .inline-emoji-picker {
    position: absolute !important;
    top: 100% !important;
    left: 0 !important;
    right: 0 !important;
    background: var(--secondary-bg) !important;
    border: 1px solid var(--border-color) !important;
    border-radius: var(--border-radius) !important;
    padding: 0.75rem !important;
    z-index: 1000 !important;
    max-height: 300px !important;
    overflow-y: auto !important;
    box-shadow: var(--box-shadow) !important;
    display: none !important;
    margin-top: 4px !important;
  }

  .emoji-picker.show,
  .inline-emoji-picker.show {
    display: block !important;
  }

  .emoji-categories {
    display: flex;
    gap: 0.5rem;
    padding-bottom: 0.75rem;
    border-bottom: 1px solid var(--border-color);
    margin-bottom: 0.75rem;
  }

  .emoji-category {
    padding: 0.5rem;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    color: var(--text-secondary);
    cursor: pointer;
    transition: var(--transition);
    border-radius: var(--border-radius);
    font-size: 0.875rem;
  }

  .emoji-category:hover,
  .emoji-category.active {
    background: var(--accent-primary);
    color: white;
    border-color: var(--accent-primary);
  }

  .emoji-grid {
    display: grid !important;
    grid-template-columns: repeat(8, 1fr) !important;
    gap: 0.5rem !important;
  }

  .emoji-option {
    width: 32px !important;
    height: 32px !important;
    border: none !important;
    background: transparent !important;
    cursor: pointer !important;
    display: flex !important;
    align-items: center !important;
    justify-content: center !important;
    font-size: 1.2rem !important;
    transition: background-color 0.2s ease !important;
    border-radius: var(--border-radius) !important;
  }

  .emoji-option:hover {
    background: var(--tertiary-bg) !important;
  }

  /* Mention Suggestions */
  .mention-suggestions {
    position: absolute;
    top: 100%;
    left: 0;
    right: 0;
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    max-height: 200px;
    overflow-y: auto;
    z-index: 1000;
    display: none;
    box-shadow: var(--box-shadow);
  }

  .mention-suggestions.show {
    display: block;
  }

  .mention-list {
    padding: 0.5rem 0;
  }

  .mention-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.5rem 1rem;
    cursor: pointer;
    transition: var(--transition);
    border: none;
    background: none;
    width: 100%;
    text-align: left;
    color: var(--text-primary);
  }

  .mention-item:hover,
  .mention-item.selected {
    background: var(--tertiary-bg);
  }

  .mention-item-avatar {
    width: 24px;
    height: 24px;
    border-radius: 50%;
    background: var(--tertiary-bg);
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
  }

  .mention-item-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .mention-item-info {
    flex: 1;
  }

  .mention-item-name {
    font-weight: 600;
    font-size: 0.875rem;
    color: var(--text-primary);
  }

  .mention-item-handle {
    font-size: 0.75rem;
    color: var(--text-secondary);
  }

  /* Comment Textarea */
  .comment-textarea {
    width: 100%;
    min-height: 120px;
    padding: 1rem;
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0 0 var(--border-radius) var(--border-radius);
    background: var(--secondary-bg);
    color: var(--text-primary);
    font-size: 0.875rem;
    font-family: inherit;
    resize: vertical;
    box-sizing: border-box;
    line-height: 1.5;
  }

  .comment-textarea:focus {
    outline: none;
    background: var(--tertiary-bg);
    border-color: var(--accent-primary);
  }

  .comment-textarea::placeholder {
    color: var(--text-secondary);
  }

  /* Form Footer */
  .form-footer {
    background: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0 0 var(--border-radius) var(--border-radius);
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .form-guidelines {
    font-size: 0.75rem;
    color: var(--text-muted);
  }

  .form-guidelines a {
    color: var(--accent-primary);
    text-decoration: none;
  }

  .form-guidelines a:hover {
    text-decoration: underline;
  }

  .form-actions {
    display: flex;
    gap: 0.5rem;
  }

  .cancel-btn,
  .submit-btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    background: var(--tertiary-bg);
    color: var(--text-primary);
    cursor: pointer;
    font-size: 0.875rem;
    transition: var(--transition);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: inherit;
    border-radius: var(--border-radius);
  }

  .cancel-btn:hover {
    background: var(--border-color);
    color: var(--error-color);
    border-color: var(--error-color);
  }

  .submit-btn {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    color: white;
  }

  .submit-btn:hover:not(:disabled) {
    background: var(--accent-secondary);
    border-color: var(--accent-secondary);
    transform: translateY(-1px);
  }

  .submit-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Sort Section */
  .sort-section {
    margin-bottom: 1rem;
    padding: 1rem;
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
  }

  .sort-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .sort-controls label {
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 500;
  }

  .sort-select {
    padding: 0.5rem;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    color: var(--text-primary);
    font-size: 0.875rem;
    font-family: inherit;
  }

  .sort-select:focus {
    outline: none;
    border-color: var(--accent-primary);
  }

  /* Empty State */
  .empty-state {
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 3rem 2rem;
    text-align: center;
  }

  .empty-content {
    max-width: 400px;
    margin: 0 auto;
  }

  .empty-icon {
    margin-bottom: 1.5rem;
    opacity: 0.6;
  }

  .empty-icon svg {
    color: var(--text-secondary);
  }

  .empty-title {
    color: var(--text-primary);
    font-size: 1.25rem;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
  }

  .empty-description {
    color: var(--text-secondary);
    font-size: 0.875rem;
    margin: 0;
    line-height: 1.5;
  }

  /* Comments List */
  .comments-list {
    background: var(--primary-bg);
  }

  /* Comment Cards */
  .comment-card {
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    margin-bottom: 1rem;
    transition: var(--transition);
  }

  .comment-card:hover {
    border-color: var(--accent-primary);
  }

  /* Comment Header */
  .comment-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    padding: 1rem 1rem 0.5rem 1rem;
    border-bottom: 1px solid var(--border-color);
  }

  .comment-user-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .comment-avatar {
    width: 32px;
    height: 32px;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    flex-shrink: 0;
    position: relative;
  }

  .comment-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .admin-badge {
    position: absolute;
    top: -2px;
    right: -2px;
    font-size: 0.75rem;
    background: var(--admin-color);
    border-radius: 50%;
    width: 16px;
    height: 16px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .comment-meta {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
  }

  .user-details {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .username {
    font-weight: 600;
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  .username.admin {
    color: var(--admin-color);
  }

  .comment-time {
    font-size: 0.75rem;
    color: var(--text-secondary);
  }

  .edit-indicator {
    font-size: 0.75rem;
    color: var(--text-muted);
    font-style: italic;
  }

  /* Comment Actions Menu */
  .comment-actions-menu {
    position: relative;
  }

  .menu-btn {
    width: 24px;
    height: 24px;
    background: transparent;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    color: var(--text-secondary);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: var(--transition);
  }

  .menu-btn:hover {
    background: var(--tertiary-bg);
    color: var(--text-primary);
    border-color: var(--accent-primary);
  }

  .dropdown-menu {
    position: absolute;
    top: calc(100% + 4px);
    right: 0;
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    box-shadow: var(--box-shadow);
    min-width: 140px;
    z-index: 1000;
    display: none;
    overflow: hidden;
  }

  .dropdown-menu.show {
    display: block;
  }

  .dropdown-item {
    width: 100%;
    padding: 8px 12px;
    background: none;
    border: none;
    color: var(--text-primary);
    font-size: 0.875rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 8px;
    transition: background-color 0.2s ease;
    font-family: inherit;
    justify-content: flex-start;
    text-align: left;
  }

  .dropdown-item:hover {
    background: var(--tertiary-bg);
  }

  .dropdown-item.edit-comment-btn:hover {
    background: rgba(59, 130, 246, 0.1);
    color: var(--accent-primary);
  }

  .dropdown-item.delete-comment-btn:hover {
    background: rgba(239, 68, 68, 0.1);
    color: var(--error-color);
  }

  .dropdown-item.report-btn:hover {
    background: rgba(245, 158, 11, 0.1);
    color: var(--warning-color);
  }

  .dropdown-item svg {
    flex-shrink: 0;
  }

  /* Comment Content */
  .comment-content {
    padding: 1rem;
  }

  .comment-text {
    color: var(--text-primary);
    line-height: 1.6;
    font-size: 0.875rem;
    word-wrap: break-word;
    margin-bottom: 0.5rem;
  }

  .comment-text strong {
    font-weight: 600;
    color: var(--text-primary);
  }

  .comment-text em {
    font-style: italic;
  }

  .comment-text code {
    background: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 2px 4px;
    font-family: "SF Mono", Monaco, "Cascadia Code", "Roboto Mono", Consolas, "Courier New", monospace;
    font-size: 0.8125rem;
    color: var(--text-primary);
  }

  .mention {
    color: var(--mention-color);
    font-weight: 500;
    background: var(--mention-bg);
    padding: 0 4px;
    border-radius: var(--border-radius);
    cursor: pointer;
    transition: var(--transition);
  }

  .mention:hover {
    background: var(--accent-primary);
    color: white;
  }

  /* Comment Footer */
  .comment-footer {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background: var(--primary-bg);
    border-top: 1px solid var(--border-color);
    flex-wrap: wrap;
    gap: 1rem;
  }

  /* Voting */
  .comment-voting {
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .vote-btn {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    background: transparent;
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    transition: var(--transition);
    font-family: inherit;
  }

  .vote-btn:hover {
    background: var(--tertiary-bg);
    color: var(--text-primary);
    transform: translateY(-1px);
  }

  .upvote-btn.active {
    background: var(--upvote-color);
    color: white;
    border-color: var(--upvote-color);
  }

  .downvote-btn.active {
    background: var(--downvote-color);
    color: white;
    border-color: var(--downvote-color);
  }

  .vote-count {
    font-weight: 500;
    min-width: 12px;
    text-align: center;
  }

  /* Reactions */
  .comment-reactions {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
  }

  .reaction-btn {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    transition: var(--transition);
    font-family: inherit;
    min-width: 44px;
    justify-content: center;
  }

  .reaction-btn:hover {
    background: var(--border-color);
    color: var(--text-primary);
    border-color: var(--accent-primary);
    transform: translateY(-1px);
  }

  .reaction-btn.active {
    background: var(--accent-primary);
    color: white;
    border-color: var(--accent-primary);
  }

  .reaction-emoji {
    font-size: 1rem;
  }

  .reaction-count {
    font-weight: 500;
    min-width: 16px;
    text-align: center;
  }

  /* Comment Actions */
  .comment-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .action-btn {
    display: flex;
    align-items: center;
    gap: 0.25rem;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    color: var(--text-secondary);
    cursor: pointer;
    padding: 0.25rem 0.5rem;
    font-size: 0.75rem;
    transition: var(--transition);
    font-family: inherit;
  }

  .action-btn:hover {
    background: var(--border-color);
    color: var(--text-primary);
    border-color: var(--accent-primary);
    transform: translateY(-1px);
  }

  .bookmark-btn.active {
    background: var(--warning-color);
    color: white;
    border-color: var(--warning-color);
  }

  /* Threading and Replies */
  .comment-replies {
    margin-top: 1rem;
    position: relative;
  }

  .reply-card {
    margin-left: 2rem;
    margin-bottom: 1rem;
    position: relative;
    border-left: 2px solid var(--border-color);
    padding-left: 1rem;
  }

  .reply-card[data-thread-level="1"] {
    margin-left: 2rem;
    border-left-color: #818cf8;
  }

  .reply-card[data-thread-level="2"] {
    margin-left: 4rem;
    border-left-color: #34d399;
  }

  .reply-card[data-thread-level="3"] {
    margin-left: 6rem;
    border-left-color: #fbbf24;
  }

  .reply-card[data-thread-level="4"] {
    margin-left: 8rem;
    border-left-color: #f87171;
  }

  .reply-indicator {
    position: absolute;
    left: -1rem;
    top: 1rem;
    width: 1rem;
    height: 2px;
    background: var(--border-color);
  }

  .reply-indicator::before {
    content: "";
    position: absolute;
    left: -2px;
    top: -1rem;
    width: 2px;
    height: 1rem;
    background: var(--border-color);
  }

  .reply-content {
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
  }

  /* Inline Reply Forms */
  .inline-reply-container {
    margin: 1rem 0;
    padding: 0;
    display: block;
    width: 100%;
    height: auto;
    border-radius: 0;
    background: transparent;
    border: none;
    position: static;
  }

  .inline-reply-form {
    margin: 1rem 0;
    background: var(--secondary-bg);
    border: 1px solid var(--accent-primary);
    border-radius: var(--border-radius);
    overflow: hidden;
    animation: slideDown 0.3s ease-out;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    display: block;
    width: 100%;
    height: auto;
    position: static;
  }

  .reply-form-header {
    padding: 0.75rem 1rem;
    background: var(--primary-bg);
    border-bottom: 1px solid var(--border-color);
    display: flex;
    justify-content: space-between;
    align-items: center;
    width: 100%;
    height: auto;
    border-radius: 0;
  }

  .reply-context-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    color: var(--text-secondary);
    font-size: 0.875rem;
    flex: 1;
  }

  .reply-context-info svg {
    color: var(--accent-primary);
    flex-shrink: 0;
  }

  .reply-author-name {
    color: var(--accent-primary);
    font-weight: 600;
  }

  .cancel-inline-reply {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 1.125rem;
    padding: 0.25rem 0.5rem;
    border-radius: var(--border-radius);
    transition: var(--transition);
    margin-left: auto;
    flex-shrink: 0;
  }

  .cancel-inline-reply:hover {
    background: var(--tertiary-bg);
    color: var(--error-color);
  }

  .inline-comment-form {
    padding: 1rem;
    background: var(--secondary-bg);
    width: 100%;
    height: auto;
    border-radius: 0;
    display: block;
    position: static;
  }

  .inline-user-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid var(--border-color);
    width: 100%;
    height: auto;
    border-radius: 0;
  }

  .inline-user-avatar {
    width: 40px;
    height: 40px;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    overflow: hidden;
    flex-shrink: 0;
  }

  .inline-user-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .inline-user-name {
    font-weight: 600;
    color: var(--text-primary);
    font-size: 0.875rem;
  }

  .inline-content-section {
    position: relative;
    width: 100%;
    height: auto;
    border-radius: 0;
  }

  .inline-formatting-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-bottom: none;
    border-radius: var(--border-radius) var(--border-radius) 0 0;
    width: 100%;
    height: auto;
    box-sizing: border-box;
  }

  .inline-format-buttons {
    display: flex;
    gap: 0.25rem;
    flex-wrap: wrap;
  }

  .inline-format-btn,
  .inline-emoji-btn {
    width: 32px;
    height: 32px;
    border: 1px solid var(--border-color);
    background: var(--tertiary-bg);
    color: var(--text-primary);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.875rem;
    transition: var(--transition);
    border-radius: var(--border-radius);
    flex-shrink: 0;
  }

  .inline-format-btn:hover,
  .inline-emoji-btn:hover {
    background: var(--border-color);
    border-color: var(--accent-primary);
    transform: translateY(-1px);
  }

  .inline-format-btn.active {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    color: white;
  }

  .inline-char-count {
    font-size: 0.75rem;
    color: var(--text-secondary);
    font-weight: 500;
    flex-shrink: 0;
  }

  .inline-textarea {
    width: 100%;
    padding: 1rem;
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0;
    color: var(--text-primary);
    font-size: 0.875rem;
    resize: vertical;
    min-height: 100px;
    font-family: inherit;
    box-sizing: border-box;
    line-height: 1.5;
    display: block;
    height: auto;
    position: static;
  }

  .inline-textarea:focus {
    outline: none;
    border-color: var(--accent-primary);
    background: var(--tertiary-bg);
  }

  .inline-textarea::placeholder {
    color: var(--text-secondary);
  }

  .inline-form-footer {
    background: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0 0 var(--border-radius) var(--border-radius);
    padding: 1rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 1rem;
    width: 100%;
    height: auto;
    box-sizing: border-box;
  }

  .inline-guidelines {
    font-size: 0.75rem;
    color: var(--text-muted);
    flex: 1;
  }

  .inline-actions {
    display: flex;
    gap: 0.5rem;
    flex-shrink: 0;
  }

  .cancel-inline-btn,
  .submit-inline-btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    background: var(--tertiary-bg);
    color: var(--text-primary);
    cursor: pointer;
    font-size: 0.875rem;
    transition: var(--transition);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: inherit;
    border-radius: var(--border-radius);
    height: auto;
    width: auto;
    position: static;
  }

  .cancel-inline-btn:hover {
    background: var(--border-color);
    color: var(--error-color);
    border-color: var(--error-color);
  }

  .submit-inline-btn {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    color: white;
  }

  .submit-inline-btn:hover:not(:disabled) {
    background: var(--accent-secondary);
    border-color: var(--accent-secondary);
    transform: translateY(-1px);
  }

  .submit-inline-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Inline Edit Form Styles */
  .inline-edit-form {
    background: var(--secondary-bg);
    border: 1px solid var(--accent-primary);
    border-radius: var(--border-radius);
    margin: 1rem 0;
    animation: slideDown 0.3s ease-out;
    overflow: hidden;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
  }

  .edit-form-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem 1rem;
    background: var(--primary-bg);
    border-bottom: 1px solid var(--border-color);
    font-size: 0.875rem;
    color: var(--text-secondary);
    font-weight: 600;
  }

  .cancel-edit-inline {
    background: none;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 1.125rem;
    padding: 0.25rem 0.5rem;
    border-radius: var(--border-radius);
    transition: var(--transition);
  }

  .cancel-edit-inline:hover {
    background: var(--tertiary-bg);
    color: var(--error-color);
  }

  .edit-comment-form-inline {
    padding: 1rem;
  }

  .edit-formatting-toolbar {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem;
    background: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-bottom: none;
    border-radius: var(--border-radius) var(--border-radius) 0 0;
  }

  .edit-format-buttons {
    display: flex;
    gap: 0.25rem;
  }

  .edit-format-btn {
    width: 28px;
    height: 28px;
    border: 1px solid var(--border-color);
    background: var(--tertiary-bg);
    color: var(--text-primary);
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    transition: var(--transition);
    border-radius: var(--border-radius);
  }

  .edit-format-btn:hover {
    background: var(--border-color);
    border-color: var(--accent-primary);
  }

  .edit-format-btn.active {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    color: white;
  }

  .edit-char-count {
    font-size: 0.75rem;
    color: var(--text-secondary);
    font-weight: 500;
  }

  .edit-textarea {
    width: 100%;
    padding: 0.75rem;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0 0 var(--border-radius) var(--border-radius);
    color: var(--text-primary);
    font-size: 0.875rem;
    resize: vertical;
    min-height: 100px;
    font-family: inherit;
    box-sizing: border-box;
    line-height: 1.5;
  }

  .edit-textarea:focus {
    outline: none;
    border-color: var(--accent-primary);
  }

  .edit-form-footer {
    background: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-top: none;
    border-radius: 0 0 var(--border-radius) var(--border-radius);
    padding: 0.75rem;
    display: flex;
    justify-content: space-between;
    align-items: center;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .edit-reason-select {
    padding: 0.5rem;
    background: var(--tertiary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    color: var(--text-primary);
    font-size: 0.875rem;
    font-family: inherit;
  }

  .edit-reason-select:focus {
    outline: none;
    border-color: var(--accent-primary);
  }

  .edit-actions {
    display: flex;
    gap: 0.5rem;
  }

  .cancel-edit-btn,
  .save-edit-btn {
    padding: 0.5rem 1rem;
    border: 1px solid var(--border-color);
    background: var(--tertiary-bg);
    color: var(--text-primary);
    cursor: pointer;
    font-size: 0.875rem;
    transition: var(--transition);
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-family: inherit;
    border-radius: var(--border-radius);
  }

  .cancel-edit-btn:hover {
    background: var(--border-color);
    color: var(--error-color);
    border-color: var(--error-color);
  }

  .save-edit-btn {
    background: var(--accent-primary);
    border-color: var(--accent-primary);
    color: white;
  }

  .save-edit-btn:hover:not(:disabled) {
    background: var(--accent-secondary);
    border-color: var(--accent-secondary);
  }

  .save-edit-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Modal Styles */
  .modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
    z-index: 1000;
    animation: fadeIn 0.2s ease-out;
  }

  .modal-container {
    background: var(--secondary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    width: 90%;
    max-width: 500px;
    max-height: 80vh;
    overflow-y: auto;
    box-shadow: var(--box-shadow);
    animation: slideInFromTop 0.3s ease-out;
  }

  .modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem 1.25rem;
    border-bottom: 1px solid var(--border-color);
  }

  .modal-header h3 {
    color: var(--text-primary);
    font-size: 1.125rem;
    font-weight: 600;
    margin: 0;
  }

  .modal-close {
    background: transparent;
    border: none;
    color: var(--text-secondary);
    cursor: pointer;
    font-size: 1.5rem;
    padding: 0.25rem;
    border-radius: var(--border-radius);
    transition: var(--transition);
  }

  .modal-close:hover {
    background: var(--tertiary-bg);
    color: var(--error-color);
  }

  .modal-body {
    padding: 1.25rem;
  }

  .modal-body p {
    color: var(--text-primary);
    margin: 0 0 1rem 0;
    line-height: 1.5;
  }

  .comment-preview {
    background: var(--primary-bg);
    border: 1px solid var(--border-color);
    border-radius: var(--border-radius);
    padding: 0.75rem;
    margin: 0.75rem 0;
    color: var(--text-secondary);
    font-size: 0.875rem;
    max-height: 100px;
    overflow-y: auto;
    font-style: italic;
  }

  .modal-actions {
    display: flex;
    justify-content: flex-end;
    gap: 0.75rem;
    padding: 1rem 1.25rem;
    border-top: 1px solid var(--border-color);
    background: var(--primary-bg);
  }

  /* Button Styles */
  .btn-primary,
  .btn-secondary,
  .btn-danger {
    padding: 0.5rem 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    transition: var(--transition);
    font-family: inherit;
    border-radius: var(--border-radius);
  }

  .btn-primary {
    background: var(--accent-primary);
    border: 1px solid var(--accent-primary);
    color: white;
  }

  .btn-primary:hover:not(:disabled) {
    background: var(--accent-secondary);
    border-color: var(--accent-secondary);
  }

  .btn-secondary {
    background: transparent;
    border: 1px solid var(--border-color);
    color: var(--text-primary);
  }

  .btn-secondary:hover {
    background: var(--tertiary-bg);
    border-color: var(--accent-primary);
  }

  .btn-danger {
    background: var(--error-color);
    border: 1px solid var(--error-color);
    color: white;
  }

  .btn-danger:hover:not(:disabled) {
    background: #dc2626;
    border-color: #dc2626;
  }

  .btn-primary:disabled,
  .btn-secondary:disabled,
  .btn-danger:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Loading Spinner */
  .loading-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid var(--border-color);
    border-top: 2px solid var(--accent-primary);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  /* Success notification */
  .comment-success-indicator {
    position: fixed;
    top: 20px;
    right: 20px;
    background: rgba(16, 185, 129, 0.9);
    color: white;
    padding: 8px 12px;
    border-radius: var(--border-radius);
    font-size: 0.875rem;
    z-index: 1000;
    animation: slideInRight 0.3s ease-out, fadeOut 0.3s ease-out 2.7s forwards;
    backdrop-filter: blur(4px);
  }

  /* Error Messages */
  .error-message {
    padding: 0.75rem;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1rem;
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid var(--error-color);
    border-radius: var(--border-radius);
    color: var(--error-color);
  }

  /* New comment highlight */
  .comment-card.new-comment {
    animation: slideInFromTop 0.5s ease-out;
    border-color: var(--success-color);
  }

  .comment-card.new-comment .comment-header {
    background: rgba(16, 185, 129, 0.05);
  }

  /* Animations */
  @keyframes slideDown {
    from {
      opacity: 0;
      transform: translateY(-10px);
      max-height: 0;
    }
    to {
      opacity: 1;
      transform: translateY(0);
      max-height: 500px;
    }
  }

  @keyframes slideInRight {
    from {
      opacity: 0;
      transform: translateX(100%);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }

  @keyframes fadeOut {
    to {
      opacity: 0;
      transform: translateX(100%);
    }
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes slideInFromTop {
    from {
      opacity: 0;
      transform: translateY(-20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .tinkbyte-comment-section {
      padding: 0 0.5rem;
      margin: 1rem auto;
    }

    .thread-header {
      padding: 1rem;
    }

    .thread-header-content {
      flex-direction: column;
      align-items: flex-start;
    }

    .manage-btn {
      width: 100%;
      justify-content: center;
      padding: 0.75rem 1rem;
    }

    .comment-footer {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .comment-voting,
    .comment-reactions,
    .comment-actions {
      width: 100%;
      justify-content: flex-start;
    }

    .reply-card {
      margin-left: 1rem;
    }

    .reply-card[data-thread-level="1"] {
      margin-left: 1rem;
    }

    .reply-card[data-thread-level="2"] {
      margin-left: 2rem;
    }

    .reply-card[data-thread-level="3"] {
      margin-left: 3rem;
    }

    .reply-card[data-thread-level="4"] {
      margin-left: 4rem;
    }

    .form-footer {
      flex-direction: column;
      align-items: flex-start;
    }

    .form-actions {
      width: 100%;
      justify-content: flex-end;
    }

    .inline-form-footer {
      flex-direction: column;
      align-items: flex-start;
    }

    .inline-actions {
      width: 100%;
      justify-content: flex-end;
    }

    .emoji-grid {
      grid-template-columns: repeat(6, 1fr);
    }

    .modal-container {
      width: 95%;
      margin: 10px;
    }

    .modal-actions {
      flex-direction: column;
    }

    .btn-primary,
    .btn-secondary,
    .btn-danger {
      width: 100%;
      justify-content: center;
    }
  }

  @media (max-width: 480px) {
    .comment-header {
      flex-direction: column;
      gap: 0.75rem;
      align-items: flex-start;
    }

    .comment-user-info {
      width: 100%;
    }

    .reply-card,
    .reply-card[data-thread-level="1"],
    .reply-card[data-thread-level="2"],
    .reply-card[data-thread-level="3"],
    .reply-card[data-thread-level="4"] {
      margin-left: 0.5rem;
    }

    .emoji-grid {
      grid-template-columns: repeat(5, 1fr);
    }

    .comment-success-indicator {
      top: 10px;
      right: 10px;
      left: 10px;
      text-align: center;
    }
  }

   /* Additional styles for the recursive reply system */
  .comment-card[data-thread-level="0"] {
    border-left: 3px solid var(--accent-primary);
  }

  .comment-card[data-thread-level="1"] {
    border-left: 3px solid #818cf8;
  }

  .comment-card[data-thread-level="2"] {
    border-left: 3px solid #34d399;
  }

  .comment-card[data-thread-level="3"] {
    border-left: 3px solid #fbbf24;
  }

  .comment-card[data-thread-level="4"] {
    border-left: 3px solid #f87171;
  }

  /* Threading visual indicators */
  .reply-card[data-thread-level="1"] .reply-indicator {
    background: #818cf8;
  }

  .reply-card[data-thread-level="2"] .reply-indicator {
    background: #34d399;
  }

  .reply-card[data-thread-level="3"] .reply-indicator {
    background: #fbbf24;
  }

  .reply-card[data-thread-level="4"] .reply-indicator {
    background: #f87171;
  }

  /* Nested reply spacing adjustments */
  .comment-replies .comment-replies {
    margin-left: 0.5rem;
  }

  /* Deep threading visual cues */
  .comment-card[data-thread-level="3"] .comment-header,
  .comment-card[data-thread-level="4"] .comment-header {
    background: rgba(var(--accent-primary-rgb), 0.02);
  }

  /* Compact mode for deep replies */
  .comment-card[data-thread-level="3"] .comment-avatar,
  .comment-card[data-thread-level="4"] .comment-avatar {
    width: 28px;
    height: 28px;
  }

  .comment-card[data-thread-level="3"] .comment-footer,
  .comment-card[data-thread-level="4"] .comment-footer {
    padding: 0.5rem 1rem;
  }

  .comment-card[data-thread-level="4"] .comment-reactions {
    display: none; /* Hide reactions at max depth to save space */
  }

  /* Loading states */
  .comment-card.loading {
    opacity: 0.6;
    pointer-events: none;
  }

  .comment-card.loading::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(90deg, transparent, rgba(255,255,255,0.1), transparent);
    animation: shimmer 1.5s infinite;
  }

  @keyframes shimmer {
    0% { transform: translateX(-100%); }
    100% { transform: translateX(100%); }
  }

  /* Enhanced hover effects */
  .comment-card:hover {
    transform: translateY(-1px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
  }

  .reply-card:hover {
    transform: translateX(2px);
  }

  /* Smooth transitions for all interactive elements */
  .comment-card,
  .reply-card,
  .vote-btn,
  .reaction-btn,
  .action-btn,
  .dropdown-item {
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Focus states for accessibility */
  .vote-btn:focus,
  .reaction-btn:focus,
  .action-btn:focus,
  .menu-btn:focus {
    outline: 2px solid var(--accent-primary);
    outline-offset: 2px;
  }

  /* Success states */
  .comment-card.success {
    border-left-color: var(--success-color);
    animation: successPulse 0.6s ease-out;
  }

  @keyframes successPulse {
    0% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0.4); }
    70% { box-shadow: 0 0 0 10px rgba(16, 185, 129, 0); }
    100% { box-shadow: 0 0 0 0 rgba(16, 185, 129, 0); }
  }

  /* Error states */
  .comment-card.error {
    border-left-color: var(--error-color);
    animation: errorShake 0.5s ease-out;
  }

  @keyframes errorShake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-5px); }
    75% { transform: translateX(5px); }
  }
</style>

<script>
  import { supabase } from "../../lib/supabase";

  document.addEventListener("DOMContentLoaded", async () => {
    const section = document.getElementById("comments-section") as HTMLElement;
    const config = JSON.parse(section?.dataset.config || "{}");
    const articleId = section?.dataset.articleId;

    if (!articleId) {
      console.error("Article ID not found");
      return;
    }

    let isAuthenticated = false;
    let currentUser: any = null;
    let currentUserProfile: any = null;
    let currentReplyTo: string | null = null;
    let activeInlineForm: HTMLElement | null = null;
    let activeEditForm: HTMLElement | null = null;
    let mentionUsers: any[] = [];
    let currentMentionIndex = -1;
    let deleteModal: HTMLElement | null = null;
    let deleteCommentId: string | null = null;

    console.log("üöÄ TinkByte Comment System Initializing...");

    // DOM Elements
    const guestPrompt = document.getElementById("guest-comment-prompt") as HTMLElement;
    const userForm = document.getElementById("user-comment-form") as HTMLElement;
    const userAvatar = document.getElementById("user-avatar") as HTMLElement;
    const userName = document.getElementById("user-name") as HTMLElement;
    const tinkbyteAccountBtn = document.getElementById("tinkbyte-account-btn") as HTMLButtonElement;
    const commentForm = document.getElementById("comment-form") as HTMLFormElement;
    const textarea = document.getElementById("comment-textarea") as HTMLTextAreaElement;
    const submitBtn = document.getElementById("submit-comment") as HTMLButtonElement;
    const cancelBtn = document.getElementById("cancel-comment") as HTMLButtonElement;
    const countElement = document.getElementById("character-count") as HTMLElement;
    const errorMessage = document.getElementById("error-message") as HTMLElement;
    const errorText = document.querySelector(".error-text") as HTMLElement;
    const replyContext = document.getElementById("reply-context") as HTMLElement;
    const cancelReplyBtn = document.getElementById("cancel-reply") as HTMLButtonElement;
    const emojiBtn = document.querySelector(".emoji-btn") as HTMLButtonElement;
    const emojiPicker = document.getElementById("emoji-picker") as HTMLElement;
    const mentionBtn = document.querySelector(".mention-btn") as HTMLButtonElement;
    const mentionSuggestions = document.getElementById("mention-suggestions") as HTMLElement;
    const mentionList = document.getElementById("mention-list") as HTMLElement;
    const sortSelect = document.getElementById("sort-select") as HTMLSelectElement;
    const commentsItems = document.getElementById("comments-items") as HTMLElement;

    // Authentication functions
    async function checkAuthStatus(): Promise<boolean> {
      try {
        console.log("üîç Checking authentication status...");

        const { data: { session }, error: sessionError } = await supabase.auth.getSession();

        if (sessionError) {
          console.error("‚ùå Session error:", sessionError);
          return false;
        }

        if (session?.user) {
          currentUser = session.user;
          isAuthenticated = true;

          console.log("‚úÖ User authenticated:", currentUser.email);

          const { data: profile, error: profileError } = await supabase
            .from("profiles")
            .select("*")
            .eq("id", currentUser.id)
            .single();

          if (profileError) {
            if (profileError.code === "PGRST116") {
              console.log("‚ö†Ô∏è No profile found, user may need to complete setup");
            } else {
              console.error("‚ùå Profile fetch error:", profileError);
            }
          } else if (profile) {
            currentUserProfile = profile;
            console.log("‚úÖ Profile loaded:", profile.display_name || profile.email);
          }

          return true;
        } else {
          console.log("‚ùå No user session found");
          return false;
        }
      } catch (error) {
        console.error("‚ùå Auth check failed:", error);
        return false;
      }
    }

    function updateAuthUI(): void {
      console.log("üîÑ Updating auth UI, authenticated:", isAuthenticated);

      if (isAuthenticated && currentUser) {
        if (guestPrompt) guestPrompt.style.display = "none";
        if (userForm) userForm.style.display = "block";

        const displayName = currentUserProfile?.display_name || currentUser.email || "User";
        const avatarUrl = getUserAvatarUrl(currentUserProfile);

        if (userAvatar) {
          userAvatar.innerHTML = `<img src="${avatarUrl}" alt="${displayName}" style="width: 100%; height: 100%; object-fit: cover;">`;
        }

        if (userName) {
          userName.textContent = displayName;
        }

        updateCommentEditButtons();
        console.log("‚úÖ User UI updated for:", displayName);
      } else {
        if (guestPrompt) guestPrompt.style.display = "flex";
        if (userForm) userForm.style.display = "none";
        console.log("‚úÖ Guest UI displayed");
      }
    }

    function updateCommentEditButtons(): void {
      if (!isAuthenticated || !currentUser) return;

      const commentCards = document.querySelectorAll(".comment-card");
      commentCards.forEach((card) => {
        const commentUserId = card.getAttribute("data-user-id");
        const dropdown = card.querySelector(".dropdown-menu") as HTMLElement;

        if (dropdown && commentUserId === currentUser.id) {
          const editBtn = dropdown.querySelector(".edit-comment-btn") as HTMLElement;
          const deleteBtn = dropdown.querySelector(".delete-comment-btn") as HTMLElement;

          if (editBtn) editBtn.style.display = "flex";
          if (deleteBtn) deleteBtn.style.display = "flex";
        }
      });
    }

    function getUserAvatarUrl(profile: any): string {
      if (!profile) return "/images/avatars/preset-1.svg";

      if (profile.avatar_type === "uploaded" && profile.avatar_url) {
        return profile.avatar_url;
      }

      const presetId = profile.avatar_preset_id || 1;
      return `/images/avatars/preset-${presetId}.svg`;
    }

    // Utility functions
    function showError(message: string): void {
      if (errorText && errorMessage) {
        errorText.textContent = message;
        errorMessage.style.display = "flex";
        setTimeout(() => {
          errorMessage.style.display = "none";
        }, 5000);
      }
    }

    function hideMessages(): void {
      if (errorMessage) {
        errorMessage.style.display = "none";
      }
    }

    function showSubtleSuccess(message: string): void {
      const existing = document.querySelector(".comment-success-indicator");
      if (existing) {
        existing.remove();
      }

      const indicator = document.createElement("div");
      indicator.className = "comment-success-indicator";
      indicator.textContent = message;
      indicator.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        background: rgba(16, 185, 129, 0.9);
        color: white;
        padding: 8px 12px;
        border-radius: 4px;
        font-size: 0.875rem;
        z-index: 1000;
        animation: slideInRight 0.3s ease-out, fadeOut 0.3s ease-out 2.7s forwards;
        backdrop-filter: blur(4px);
      `;
      document.body.appendChild(indicator);

      setTimeout(() => {
        if (indicator.parentNode) {
          indicator.parentNode.removeChild(indicator);
        }
      }, 3000);
    }

    function setSubmitButtonState(isSubmitting: boolean): void {
      if (submitBtn) {
        const btnText = submitBtn.querySelector(".btn-text") as HTMLElement;
        const btnSpinner = submitBtn.querySelector(".btn-spinner") as HTMLElement;

        submitBtn.disabled = isSubmitting;
        if (btnText) btnText.style.display = isSubmitting ? "none" : "flex";
        if (btnSpinner) btnSpinner.style.display = isSubmitting ? "flex" : "none";
      }
    }

    function updateCharacterCount(): void {
      if (textarea && countElement) {
        const count = textarea.value.length;
        countElement.textContent = count.toString();

        const maxChars = config.characterLimits?.max || 1000;
        const warningChars = config.characterLimits?.warning || 800;

        if (count > warningChars) {
          countElement.style.color = "var(--error-color)";
        } else if (count > warningChars * 0.8) {
          countElement.style.color = "var(--warning-color)";
        } else {
          countElement.style.color = "var(--text-secondary)";
        }
      }
    }

    function cancelReply(): void {
      currentReplyTo = null;

      if (replyContext) {
        replyContext.style.display = "none";
      }

      if (activeInlineForm) {
        activeInlineForm.style.display = "none";
        activeInlineForm.innerHTML = "";
        activeInlineForm = null;
      }
    }

    function resetForm(): void {
      if (commentForm) {
        commentForm.reset();
      }
      if (countElement) {
        countElement.textContent = "0";
      }
      cancelReply();
      hideMessages();
    }

    // Date formatting function
    function formatDate(dateString: string): string {
      const date = new Date(dateString);
      const now = new Date();
      const diff = now.getTime() - date.getTime();
      const minutes = Math.floor(diff / 60000);
      const hours = Math.floor(diff / 3600000);
      const days = Math.floor(diff / 86400000);

      if (minutes < 1) return "just now";
      if (minutes < 60) return `${minutes}m ago`;
      if (hours < 24) return `${hours}h ago`;
      if (days < 7) return `${days}d ago`;
      return date.toLocaleDateString();
    }

    // @Mention functionality
    async function loadMentionUsers(): Promise<void> {
      try {
        const { data, error } = await supabase
          .from("profiles")
          .select("id, display_name, avatar_type, avatar_preset_id, avatar_url")
          .eq("is_public", true)
          .limit(50);

        if (error) throw error;

        mentionUsers = data || [];
        console.log("‚úÖ Mention users loaded:", mentionUsers.length);
      } catch (error) {
        console.error("‚ùå Failed to load mention users:", error);
      }
    }

    function showMentionSuggestions(query: string): void {
      if (!mentionUsers.length || !mentionList) return;

      const filtered = mentionUsers
        .filter((user) =>
          user.display_name?.toLowerCase().includes(query.toLowerCase())
        )
        .slice(0, 10);

      if (filtered.length === 0) {
        hideMentionSuggestions();
        return;
      }

      mentionList.innerHTML = filtered
        .map(
          (user, index) => `
        <button class="mention-item ${index === currentMentionIndex ? "selected" : ""}" 
                data-user-id="${user.id}" 
                data-display-name="${user.display_name}">
          <div class="mention-item-avatar">
            <img src="${getUserAvatarUrl(user)}" alt="${user.display_name}">
          </div>
          <div class="mention-item-info">
            <div class="mention-item-name">${user.display_name}</div>
            <div class="mention-item-handle">@${user.display_name?.toLowerCase().replace(/\s+/g, "")}</div>
          </div>
        </button>
      `
        )
        .join("");

      if (mentionSuggestions) {
        mentionSuggestions.classList.add("show");
      }

      mentionList.querySelectorAll(".mention-item").forEach((item) => {
        item.addEventListener("click", (e) => {
          const displayName = (e.currentTarget as HTMLElement).dataset.displayName;
          if (displayName) {
            insertMention(displayName);
          }
        });
      });
    }

    function hideMentionSuggestions(): void {
      if (mentionSuggestions) {
        mentionSuggestions.classList.remove("show");
      }
      currentMentionIndex = -1;
    }

    function insertMention(displayName: string): void {
      if (!textarea) return;

      const cursorPos = textarea.selectionStart;
      const textBefore = textarea.value.substring(0, cursorPos);
      const textAfter = textarea.value.substring(cursorPos);

      const atIndex = textBefore.lastIndexOf("@");
      if (atIndex === -1) return;

      const beforeAt = textBefore.substring(0, atIndex);
      const mention = `@${displayName}`;

      textarea.value = beforeAt + mention + " " + textAfter;
      textarea.focus();
      textarea.setSelectionRange(
        beforeAt.length + mention.length + 1,
        beforeAt.length + mention.length + 1
      );

      hideMentionSuggestions();
      updateCharacterCount();
    }

    function updateMentionSelection(): void {
      const items = mentionList.querySelectorAll(".mention-item");
      items.forEach((item, index) => {
        if (index === currentMentionIndex) {
          item.classList.add("selected");
        } else {
          item.classList.remove("selected");
        }
      });
    }

    // Emoji functionality
    function initializeEmojiPicker(): void {
      console.log("üé≠ Initializing emoji picker...");
      
      const emojiBtn = document.querySelector(".emoji-btn") as HTMLButtonElement;
      const emojiPicker = document.getElementById("emoji-picker") as HTMLElement;
      
      if (emojiBtn && emojiPicker) {
        emojiBtn.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          // Hide all other pickers first
          document.querySelectorAll(".emoji-picker, .inline-emoji-picker").forEach(picker => {
            if (picker !== emojiPicker) {
              (picker as HTMLElement).classList.remove("show");
            }
          });
          
          // Toggle current picker
          const isVisible = emojiPicker.classList.contains("show");
          if (isVisible) {
            emojiPicker.classList.remove("show");
          } else {
            emojiPicker.classList.add("show");
          }
        });
        
        // Handle emoji selection for main picker
        const emojiOptions = emojiPicker.querySelectorAll(".emoji-option");
        emojiOptions.forEach(option => {
          option.addEventListener("click", (e) => {
            e.preventDefault();
            e.stopPropagation();
            
            const target = e.target as HTMLElement;
            const emoji = target.dataset.emoji;
            const textarea = document.getElementById("comment-textarea") as HTMLTextAreaElement;
            
            if (emoji && textarea) {
              insertAtCursor(textarea, emoji);
              emojiPicker.classList.remove("show");
              updateCharacterCount();
            }
          });
        });
      }
      
      // Handle emoji category switching
      const emojiCategories = document.querySelectorAll(".emoji-category");
      emojiCategories.forEach(category => {
        category.addEventListener("click", (e) => {
          e.preventDefault();
          
          // Remove active class from all categories
          emojiCategories.forEach(cat => cat.classList.remove("active"));
          
          // Add active class to clicked category
          category.classList.add("active");
          
          // Filter emojis by category
          const categoryType = (category as HTMLElement).dataset.category;
          filterEmojisByCategory(categoryType);
        });
      });
      
      console.log("‚úÖ Emoji picker initialized");
    }

    function filterEmojisByCategory(category: string | undefined): void {
      const emojiGrid = document.getElementById("emoji-grid");
      if (!emojiGrid) return;
      
      const allEmojis = emojiGrid.querySelectorAll(".emoji-option");
      
      allEmojis.forEach(emoji => {
        const emojiCategory = (emoji as HTMLElement).dataset.category;
        
        if (category === "recent" || !category || emojiCategory === category) {
          (emoji as HTMLElement).style.display = "flex";
        } else {
          (emoji as HTMLElement).style.display = "none";
        }
      });
    }

    function handleEmojiButtonClick(button: HTMLElement): void {
      const isInline = button.classList.contains("inline-emoji-btn");
      let picker: HTMLElement | null;
      let textarea: HTMLTextAreaElement | null;
      
      console.log("üé≠ Emoji button clicked, isInline:", isInline);
      
      if (isInline) {
        const container = button.closest(".inline-content-section") || 
                         button.closest(".inline-reply-form") || 
                         button.closest(".edit-comment-form-inline");
        picker = container?.querySelector(".inline-emoji-picker") as HTMLElement;
        textarea = (container?.querySelector(".inline-textarea") || 
                   container?.querySelector(".edit-textarea")) as HTMLTextAreaElement;
      } else {
        picker = document.getElementById("emoji-picker");
        textarea = document.getElementById("comment-textarea") as HTMLTextAreaElement;
      }
      
      if (!picker) {
        console.warn("üé≠ Emoji picker not found");
        return;
      }
      
      // Hide all other pickers
      document.querySelectorAll(".emoji-picker, .inline-emoji-picker").forEach(p => {
        if (p !== picker) (p as HTMLElement).classList.remove("show");
      });
      
      // Toggle current picker
      const isVisible = picker.classList.contains("show");
      if (isVisible) {
        picker.classList.remove("show");
      } else {
        picker.classList.add("show");
      }
      
      // Add event listeners to emoji options
      const emojiOptions = picker.querySelectorAll(".emoji-option");
      emojiOptions.forEach(option => {
        const newOption = option.cloneNode(true) as HTMLElement;
        option.parentNode?.replaceChild(newOption, option);
        
        newOption.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          
          const target = e.target as HTMLElement;
          const emoji = target.dataset.emoji || 
                       target.closest(".emoji-option")?.getAttribute("data-emoji");
          
          console.log("üé≠ Emoji selected:", emoji);
          
          if (emoji && textarea) {
            insertAtCursor(textarea, emoji);
            picker.classList.remove("show");
            
            // Update character count
            if (textarea.id === "comment-textarea") {
              updateCharacterCount();
            } else {
              const charCount = textarea.closest(".inline-content-section")?.querySelector(".inline-char-count .count") as HTMLElement ||
                               textarea.closest(".edit-comment-form-inline")?.querySelector(".edit-char-count .count") as HTMLElement;
              if (charCount) {
                charCount.textContent = textarea.value.length.toString();
              }
            }
          }
        });
      });
    }

    function hideEmojiPicker(): void {
      if (emojiPicker) {
        emojiPicker.classList.remove("show");
      }
    }

    // Formatting functions
    function applyFormatting(format: string, targetTextarea: HTMLTextAreaElement): void {
      const start = targetTextarea.selectionStart;
      const end = targetTextarea.selectionEnd;
      const selectedText = targetTextarea.value.substring(start, end);

      let formattedText = "";
      let cursorOffset = 0;

      switch (format) {
        case "bold":
          formattedText = `**${selectedText}**`;
          cursorOffset = selectedText ? 0 : 2;
          break;
        case "italic":
          formattedText = `*${selectedText}*`;
          cursorOffset = selectedText ? 0 : 1;
          break;
        case "code":
          formattedText = `\`${selectedText}\``;
          cursorOffset = selectedText ? 0 : 1;
          break;
        default:
          return;
      }

      targetTextarea.value =
        targetTextarea.value.substring(0, start) +
        formattedText +
        targetTextarea.value.substring(end);
      targetTextarea.focus();

      const newPosition = start + formattedText.length - cursorOffset;
      targetTextarea.setSelectionRange(newPosition, newPosition);
      updateCharacterCount();
    }

    function insertAtCursor(targetTextarea: HTMLTextAreaElement, text: string): void {
      const start = targetTextarea.selectionStart;
      const end = targetTextarea.selectionEnd;

      targetTextarea.value =
        targetTextarea.value.substring(0, start) +
        text +
        targetTextarea.value.substring(end);
      targetTextarea.focus();
      targetTextarea.setSelectionRange(start + text.length, start + text.length);
      updateCharacterCount();
    }

    // Hide all dropdowns function
    function hideAllDropdowns(): void {
      document.querySelectorAll(".dropdown-menu").forEach((menu) => {
        (menu as HTMLElement).classList.remove("show");
      });
      document.querySelectorAll(".emoji-picker, .inline-emoji-picker").forEach((picker) => {
        (picker as HTMLElement).classList.remove("show");
      });
      hideMentionSuggestions();
    }

    // Delete functionality
    function initializeDeleteFunctionality(): void {
      deleteModal = document.getElementById("delete-modal");
      const cancelDeleteBtn = document.getElementById("cancel-delete");
      const confirmDeleteBtn = document.getElementById("confirm-delete");
      const modalClose = deleteModal?.querySelector(".modal-close");

      // Close modal handlers
      [cancelDeleteBtn, modalClose].forEach(btn => {
        btn?.addEventListener("click", closeDeleteModal);
      });

      // Confirm delete handler
      confirmDeleteBtn?.addEventListener("click", handleDeleteConfirm);

      // Close modal when clicking overlay
      deleteModal?.addEventListener("click", (e) => {
        if (e.target === deleteModal) {
          closeDeleteModal();
        }
      });
    }

    function showDeleteModal(commentId: string): void {
      deleteCommentId = commentId;
      
      // Get comment text for preview
      const commentText = document.querySelector(
        `[data-comment-id="${commentId}"] .comment-text`
      )?.textContent || "";
      
      const preview = document.getElementById("delete-comment-preview");
      if (preview) {
        preview.textContent = commentText.substring(0, 200) + (commentText.length > 200 ? "..." : "");
      }
      
      if (deleteModal) {
        deleteModal.style.display = "flex";
        document.body.style.overflow = "hidden";
      }
    }

    function closeDeleteModal(): void {
      if (deleteModal) {
        deleteModal.style.display = "none";
        document.body.style.overflow = "";
      }
      deleteCommentId = null;
    }

    async function handleDeleteConfirm(): Promise<void> {
      if (!deleteCommentId || !isAuthenticated) return;

      const confirmBtn = document.getElementById("confirm-delete") as HTMLButtonElement;
      const btnText = confirmBtn?.querySelector(".btn-text") as HTMLElement;
      const btnSpinner = confirmBtn?.querySelector(".btn-spinner") as HTMLElement;

      // Set loading state
      if (confirmBtn) confirmBtn.disabled = true;
      if (btnText) btnText.style.display = "none";
      if (btnSpinner) btnSpinner.style.display = "flex";

      try {
        const { data: { session } } = await supabase.auth.getSession();

        if (!session?.access_token) {
          throw new Error("Please sign in to delete comments");
        }

        const response = await fetch(`/api/comments/delete?id=${deleteCommentId}`, {
          method: "DELETE",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${session.access_token}`,
          },
        });

        if (!response.ok) {
          const result = await response.json();
          throw new Error(result.error || "Failed to delete comment");
        }

        // Remove comment from DOM
        const commentElement = document.querySelector(`[data-comment-id="${deleteCommentId}"]`);
        if (commentElement) {
          commentElement.remove();
        }

        closeDeleteModal();
        showSubtleSuccess("Comment deleted successfully!");

      } catch (error) {
        console.error("Error deleting comment:", error);
        showSubtleSuccess((error as Error).message || "Failed to delete comment");
      } finally {
        // Reset loading state
        if (confirmBtn) confirmBtn.disabled = false;
        if (btnText) btnText.style.display = "flex";
        if (btnSpinner) btnSpinner.style.display = "none";
      }
    }

    // Edit functionality
    function createInlineEditForm(commentId: string, currentContent: string): HTMLElement {
      const editForm = document.createElement("div");
      editForm.className = "inline-edit-form";
      
      editForm.innerHTML = `
        <div class="edit-form-header">
          <span>Edit Comment</span>
          <button type="button" class="cancel-edit-inline">&times;</button>
        </div>
        <form class="edit-comment-form-inline">
          <div class="edit-formatting-toolbar">
            <div class="edit-format-buttons">
              <button type="button" class="edit-format-btn" data-format="bold">
                <strong>B</strong>
              </button>
              <button type="button" class="edit-format-btn" data-format="italic">
                <em>I</em>
              </button>
              <button type="button" class="edit-format-btn" data-format="code">
                <code>&lt;/&gt;</code>
              </button>
            </div>
            <div class="edit-char-count">
              <span class="count">${currentContent.length}</span>/1000
            </div>
          </div>
          <textarea 
            name="content" 
            class="edit-textarea" 
            placeholder="Edit your comment..." 
            maxlength="1000" 
            required
          ></textarea>
          <div class="edit-form-footer">
            <select class="edit-reason-select" name="edit_reason">
              <option value="typo">Fix typo</option>
              <option value="clarity">Improve clarity</option>
              <option value="addition">Add information</option>
              <option value="other">Other</option>
            </select>
            <div class="edit-actions">
              <button type="button" class="cancel-edit-btn">Cancel</button>
              <button type="submit" class="save-edit-btn">
                <span class="btn-text">Save Changes</span>
                <div class="btn-spinner" style="display: none;">
                  <div class="loading-spinner"></div>
                </div>
              </button>
            </div>
          </div>
        </form>
      `;

      // Set textarea value after creating the element
      const textarea = editForm.querySelector(".edit-textarea") as HTMLTextAreaElement;
      if (textarea) {
        textarea.value = currentContent;
      }

      // Add event listeners
      const cancelButtons = editForm.querySelectorAll(".cancel-edit-inline, .cancel-edit-btn");
      cancelButtons.forEach(btn => {
        btn.addEventListener("click", () => closeInlineEditForm(commentId));
      });

      const form = editForm.querySelector(".edit-comment-form-inline") as HTMLFormElement;
      form.addEventListener("submit", (e) => handleEditSubmission(e, commentId));

      // Character count
      const charCount = editForm.querySelector(".edit-char-count .count") as HTMLElement;
      if (textarea && charCount) {
        textarea.addEventListener("input", () => {
          charCount.textContent = textarea.value.length.toString();
        });
      }

      // Format buttons
      const formatButtons = editForm.querySelectorAll(".edit-format-btn");
      formatButtons.forEach(btn => {
        btn.addEventListener("click", (e) => {
          e.preventDefault();
          const format = (btn as HTMLElement).dataset.format;
          if (format && textarea) {
            applyFormatting(format, textarea);
          }
        });
      });

      return editForm;
    }

    function showInlineEditForm(commentId: string): void {
      // Close any existing edit form
      if (activeEditForm) {
        activeEditForm.remove();
        activeEditForm = null;
      }

      // Get current comment content
      const commentTextEl = document.querySelector(
        `[data-comment-id="${commentId}"] .comment-text`
      );
      
      if (!commentTextEl) return;

      // Extract plain text from HTML content
      const currentContent = commentTextEl.textContent || "";
      
      // Create edit form
      const editForm = createInlineEditForm(commentId, currentContent);
      
      // Find comment content container and replace with edit form
      const commentContent = document.querySelector(
        `[data-comment-id="${commentId}"] .comment-content`
      ) as HTMLElement;
      
      if (commentContent) {
        commentContent.style.display = "none";
        commentContent.parentNode?.insertBefore(editForm, commentContent.nextSibling);
        activeEditForm = editForm;
        
        // Focus on textarea
        setTimeout(() => {
          const textarea = editForm.querySelector(".edit-textarea") as HTMLTextAreaElement;
          if (textarea) {
            textarea.focus();
            textarea.setSelectionRange(textarea.value.length, textarea.value.length);
          }
        }, 100);
      }
    }

    function closeInlineEditForm(commentId: string): void {
      if (activeEditForm) {
        activeEditForm.remove();
        activeEditForm = null;
      }
      
      // Show original comment content
      const commentContent = document.querySelector(
        `[data-comment-id="${commentId}"] .comment-content`
      ) as HTMLElement;
      
      if (commentContent) {
        commentContent.style.display = "block";
      }
    }

    async function handleEditSubmission(e: Event, commentId: string): Promise<void> {
      e.preventDefault();

      if (!isAuthenticated) return;

      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const content = formData.get("content") as string;
      const editReason = formData.get("edit_reason") as string;

      if (!content?.trim()) {
        showSubtleSuccess("Please enter comment content");
        return;
      }

      const saveBtn = form.querySelector(".save-edit-btn") as HTMLButtonElement;
      const btnText = saveBtn.querySelector(".btn-text") as HTMLElement;
      const btnSpinner = saveBtn.querySelector(".btn-spinner") as HTMLElement;

      // Set loading state
      saveBtn.disabled = true;
      if (btnText) btnText.style.display = "none";
      if (btnSpinner) btnSpinner.style.display = "flex";

      try {
        const { data: { session } } = await supabase.auth.getSession();

        if (!session?.access_token) {
          throw new Error("Please sign in to edit comments");
        }

        const response = await fetch(`/api/comments/edit?id=${commentId}`, {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${session.access_token}`,
          },
          body: JSON.stringify({
            content: content.trim(),
            edit_reason: editReason,
          }),
        });

        if (!response.ok) {
          const result = await response.json();
          throw new Error(result.error || "Failed to update comment");
        }

        // Update comment in DOM
        const commentTextEl = document.querySelector(
          `[data-comment-id="${commentId}"] .comment-text`
        );
        
        if (commentTextEl) {
          commentTextEl.innerHTML = formatCommentContent(content);
        }

        // Add edit indicator
        const commentMeta = document.querySelector(
          `[data-comment-id="${commentId}"] .comment-meta .user-details`
        );
        
        if (commentMeta && !commentMeta.querySelector(".edit-indicator")) {
          const editIndicator = document.createElement("span");
          editIndicator.className = "edit-indicator";
          editIndicator.textContent = "(edited)";
          editIndicator.title = "This comment has been edited";
          commentMeta.appendChild(editIndicator);
        }

        closeInlineEditForm(commentId);
        showSubtleSuccess("Comment updated successfully!");

      } catch (error) {
        console.error("Error updating comment:", error);
        showSubtleSuccess((error as Error).message || "Failed to update comment");
      } finally {
        // Reset loading state
        saveBtn.disabled = false;
        if (btnText) btnText.style.display = "flex";
        if (btnSpinner) btnSpinner.style.display = "none";
      }
    }

    // Reply functionality
    async function handleReplyClick(button: HTMLElement): Promise<void> {
      const commentId = button.getAttribute("data-comment-id");
      const authorName = button.getAttribute("data-author");

      if (!commentId || !authorName) return;

      if (!isAuthenticated) {
        showSubtleSuccess("Sign in to reply");
        return;
      }

      // Close any existing inline forms
      if (activeInlineForm) {
        activeInlineForm.style.display = "none";
        activeInlineForm.innerHTML = "";
      }

      // Create new inline form
      const inlineForm = createInlineReplyForm(commentId, authorName);
      const container = document.querySelector(
        `[data-comment-id="${commentId}"] .inline-reply-container`
      ) as HTMLElement;

      if (container && inlineForm) {
        container.innerHTML = "";
        container.appendChild(inlineForm);
        container.style.display = "block";
        activeInlineForm = container;

        // Focus on textarea
        setTimeout(() => {
          const textarea = container.querySelector(".inline-textarea") as HTMLTextAreaElement;
          if (textarea) {
            textarea.focus();
          }
        }, 100);
      }
    }

    // Create inline reply form
    function createInlineReplyForm(commentId: string, authorName: string): HTMLElement {
      const template = document.getElementById("inline-reply-template") as HTMLTemplateElement;
      if (!template) {
        console.error("Inline reply template not found");
        return document.createElement("div");
      }

      const clone = template.content.cloneNode(true) as DocumentFragment;
      const form = clone.querySelector(".inline-reply-form") as HTMLElement;

      // Set author name
      const authorNameEl = form.querySelector(".reply-author-name") as HTMLElement;
      if (authorNameEl) {
        authorNameEl.textContent = authorName;
      }

      // Set user info
      const avatarEl = form.querySelector(".inline-user-avatar") as HTMLElement;
      const nameEl = form.querySelector(".inline-user-name") as HTMLElement;

      if (avatarEl && nameEl) {
        const displayName = currentUserProfile?.display_name || currentUser?.email || "User";
        const avatarUrl = getUserAvatarUrl(currentUserProfile);

        avatarEl.innerHTML = `<img src="${avatarUrl}" alt="${displayName}">`;
        nameEl.textContent = displayName;
      }

      // Add event listeners
      const cancelButtons = form.querySelectorAll(".cancel-inline-reply, .cancel-inline-btn");
      cancelButtons.forEach((btn) => {
        btn.addEventListener("click", () => {
          const container = document.querySelector(`[data-comment-id="${commentId}"] .inline-reply-container`) as HTMLElement;
          if (container) {
            container.style.display = "none";
            container.innerHTML = "";
          }
          activeInlineForm = null;
        });
      });

      // Form submission
      const inlineForm = form.querySelector(".inline-comment-form") as HTMLFormElement;
      inlineForm.addEventListener("submit", async (e) => {
        e.preventDefault();
        await handleInlineReplySubmission(e, commentId);
      });

      // Character count
      const inlineTextarea = form.querySelector(".inline-textarea") as HTMLTextAreaElement;
      const inlineCharCount = form.querySelector(".inline-char-count .count") as HTMLElement;

      if (inlineTextarea && inlineCharCount) {
        inlineTextarea.addEventListener("input", () => {
          inlineCharCount.textContent = inlineTextarea.value.length.toString();
        });
      }

      // Emoji functionality for inline form
      const inlineEmojiBtn = form.querySelector(".inline-emoji-btn") as HTMLElement;
      if (inlineEmojiBtn) {
        inlineEmojiBtn.addEventListener("click", (e) => {
          e.preventDefault();
          e.stopPropagation();
          handleEmojiButtonClick(inlineEmojiBtn);
        });
      }

      // Format buttons for inline form
      const inlineFormatButtons = form.querySelectorAll(".inline-format-btn");
      inlineFormatButtons.forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.preventDefault();
          const format = (btn as HTMLElement).dataset.format;
          if (format && inlineTextarea) {
            applyFormatting(format, inlineTextarea);
          }
        });
      });

      return form;
    }

    // Handle inline reply submission
    async function handleInlineReplySubmission(e: Event, parentId: string): Promise<void> {
      e.preventDefault();

      if (!isAuthenticated) return;

      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      const content = formData.get("content") as string;

      if (!content?.trim()) {
        showSubtleSuccess("Please enter a reply");
        return;
      }

      const submitBtn = form.querySelector(".submit-inline-btn") as HTMLButtonElement;
      const btnText = submitBtn.querySelector(".btn-text") as HTMLElement;
      const btnSpinner = submitBtn.querySelector(".btn-spinner") as HTMLElement;

      // Set loading state
      if (btnText && btnSpinner) {
        btnText.style.display = "none";
        btnSpinner.style.display = "block";
      }
      submitBtn.disabled = true;

      try {
        const { data: { session } } = await supabase.auth.getSession();

        if (!session?.access_token) {
          throw new Error("Please sign in to reply");
        }

        const requestBody = {
          article_id: articleId,
          content: content.trim(),
          parent_id: parentId,
        };

        const response = await fetch("/api/comments/create", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${session.access_token}`,
          },
          body: JSON.stringify(requestBody),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || "Failed to post reply");
        }

        // Calculate thread level for the new reply
        const parentElement = document.querySelector(`[data-comment-id="${parentId}"]`);
        const parentThreadLevel = parseInt(parentElement?.getAttribute("data-thread-level") || "0");
        const newThreadLevel = parentThreadLevel + 1;

        // Ensure the reply has proper profile data
        const replyWithProfile = {
          ...result.data,
          profiles: currentUserProfile,
          user_profile: currentUserProfile,
          thread_level: newThreadLevel
        };

        // Add reply to DOM
        if (parentElement) {
          let repliesContainer = parentElement.querySelector(".comment-replies");
          if (!repliesContainer) {
            repliesContainer = document.createElement("div");
            repliesContainer.className = "comment-replies";
            repliesContainer.setAttribute("data-parent-id", parentId);
            parentElement.appendChild(repliesContainer);
          }

          // Create reply element with proper thread level
          const replyHtml = renderCommentRecursively(replyWithProfile, newThreadLevel);
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = replyHtml;
          const replyElement = tempDiv.firstElementChild;
          
          if (replyElement) {
            repliesContainer.insertBefore(replyElement, repliesContainer.firstChild);
          }
        }

        // Hide inline form
        const container = document.querySelector(`[data-comment-id="${parentId}"] .inline-reply-container`) as HTMLElement;
        if (container) {
          container.style.display = "none";
          container.innerHTML = "";
        }
        activeInlineForm = null;

        showSubtleSuccess("Reply posted!");
      } catch (error) {
        console.error("Error posting reply:", error);
        showSubtleSuccess((error as Error).message || "Failed to post reply");
      } finally {
        // Reset loading state
        if (btnText && btnSpinner) {
          btnText.style.display = "block";
          btnSpinner.style.display = "none";
        }
        submitBtn.disabled = false;
      }
    }

    // Initialize comment interactions with event delegation
    function initializeCommentInteractions(): void {
      // Use event delegation for all comment interactions
      document.addEventListener("click", async (e) => {
        const target = e.target as HTMLElement;
        const button = target.closest("button") as HTMLButtonElement;
        if (!button) return;

        // Handle dropdown menu toggles
        if (button.classList.contains("menu-btn")) {
          e.preventDefault();
          e.stopPropagation();

          const commentId = button.getAttribute("data-comment-id");
          const dropdown = document.getElementById(`dropdown-${commentId}`) as HTMLElement;

          hideAllDropdowns();

          if (dropdown) {
            dropdown.classList.add("show");
          }
        }

        // Handle reply buttons (including dynamically created ones)
        else if (button.classList.contains("reply-btn")) {
          e.preventDefault();
          await handleReplyClick(button);
        }

        // Handle emoji buttons (including inline ones)
        else if (button.classList.contains("emoji-btn") || button.classList.contains("inline-emoji-btn")) {
          e.preventDefault();
          e.stopPropagation();
          handleEmojiButtonClick(button);
        }

        // Handle emoji options
        else if (button.classList.contains("emoji-option")) {
          e.preventDefault();
          e.stopPropagation();
          handleEmojiOptionClick(button);
        }

        // Handle reaction buttons
        else if (button.classList.contains("reaction-btn")) {
          e.preventDefault();
          const commentId = button.getAttribute("data-comment-id");
          const reactionType = button.getAttribute("data-reaction");
          if (commentId && reactionType) {
            await handleReaction(commentId, reactionType, button);
          }
        }

        // Handle delete buttons
        else if (button.classList.contains("delete-comment-btn")) {
          e.preventDefault();
          const commentId = button.getAttribute("data-comment-id");
          if (commentId) {
            showDeleteModal(commentId);
          }
        }

        // Handle edit buttons
        else if (button.classList.contains("edit-comment-btn")) {
          e.preventDefault();
          const commentId = button.getAttribute("data-comment-id");
          if (commentId) {
            showInlineEditForm(commentId);
          }
        }

        // Handle bookmark buttons
        else if (button.classList.contains("bookmark-btn")) {
          e.preventDefault();
          const commentId = button.getAttribute("data-comment-id");
          if (commentId) {
            await handleBookmark(commentId, button);
          }
        }

        // Handle copy buttons
        else if (button.classList.contains("copy-btn")) {
          e.preventDefault();
          const commentId = button.getAttribute("data-comment-id");
          await handleCopy(commentId || "");
        }
      });
    }

    function handleEmojiOptionClick(button: HTMLElement): void {
      const emoji = button.dataset.emoji;
      if (!emoji) return;
      
      // Find the appropriate textarea
      const picker = button.closest(".emoji-picker, .inline-emoji-picker");
      let textarea: HTMLTextAreaElement | null = null;
      
      if (picker?.classList.contains("inline-emoji-picker")) {
        textarea = picker.closest(".inline-content-section")?.querySelector(".inline-textarea") as HTMLTextAreaElement;
      } else {
        textarea = document.getElementById("comment-textarea") as HTMLTextAreaElement;
      }
      
      if (textarea) {
        insertAtCursor(textarea, emoji);
        picker?.classList.remove("show");
      }
    }

    // Comment submission
    async function handleCommentSubmission(e: Event): Promise<void> {
      e.preventDefault();

      if (!isAuthenticated) {
        showError("Please sign in to comment");
        return;
      }

      if (!commentForm) return;

      const formData = new FormData(commentForm);
      const content = formData.get("content") as string;

      if (!content?.trim()) {
        showError("Please enter a comment");
        return;
      }

      const minChars = config.characterLimits?.min || 2;
      if (content.trim().length < minChars) {
        showError(`Comment must be at least ${minChars} characters`);
        return;
      }

      setSubmitButtonState(true);
      hideMessages();

      try {
        const { data: { session } } = await supabase.auth.getSession();

        if (!session?.access_token) {
          throw new Error("Please sign in to comment");
        }

        const requestBody = {
          article_id: articleId,
          content: content.trim(),
          parent_id: currentReplyTo,
        };

        console.log("üì§ Submitting comment:", requestBody);

        const response = await fetch("/api/comments/create", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${session.access_token}`,
          },
          body: JSON.stringify(requestBody),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || "Failed to post comment");
        }

        console.log("‚úÖ Comment posted successfully:", result);

        // Ensure the comment has proper profile data
        const commentWithProfile = {
          ...result.data,
          profiles: currentUserProfile,
          user_profile: currentUserProfile
        };

        // Add comment to DOM
        await addCommentToDOM(commentWithProfile);

        resetForm();
        showSubtleSuccess("Comment posted successfully!");
      } catch (error) {
        console.error("‚ùå Comment submission failed:", error);
        showError((error as Error).message || "Failed to post comment");
      } finally {
        setSubmitButtonState(false);
      }
    }

    // Render comment recursively
    function renderCommentRecursively(comment: any, level: number = 0): string {
      if (level > 4) return ''; // Max 5 levels (0-4)
      
      const userProfile = comment.profiles || comment.user_profile;
      const displayName = userProfile?.display_name || comment.guest_name || "Anonymous";
      const isAdmin = userProfile?.is_admin || false;
      const avatarUrl = getUserAvatarUrl(userProfile);
      const canEdit = currentUser?.id === comment.user_id;
      
      return `
        <div class="comment-card ${level > 0 ? 'reply-card' : ''}" 
             data-comment-id="${comment.id}" 
             data-thread-level="${level}" 
             data-user-id="${comment.user_id || ''}">
          ${level > 0 ? '<div class="reply-indicator"></div>' : ''}
          
          <div class="comment-content-wrapper">
            <div class="comment-header">
              <div class="comment-user-info">
                <div class="comment-avatar">
                  <img src="${avatarUrl}" alt="${displayName}" />
                  ${isAdmin ? '<div class="admin-badge">üëë</div>' : ''}
                </div>
                <div class="comment-meta">
                  <div class="user-details">
                    <span class="username ${isAdmin ? 'admin' : ''}">${displayName}</span>
                    <span class="comment-time">${formatDate(comment.created_at)}</span>
                    ${comment.is_edited ? '<span class="edit-indicator">(edited)</span>' : ''}
                  </div>
                </div>
              </div>
              
              <div class="comment-actions-menu">
                <button class="menu-btn" data-comment-id="${comment.id}">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <circle cx="12" cy="12" r="1"></circle>
                    <circle cx="19" cy="12" r="1"></circle>
                    <circle cx="5" cy="12" r="1"></circle>
                  </svg>
                </button>
                <div class="dropdown-menu" id="dropdown-${comment.id}">
                  ${canEdit ? `
                    <button class="dropdown-item edit-comment-btn" data-comment-id="${comment.id}">
                      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
                        <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z"></path>
                      </svg>
                      Edit
                    </button>
                    <button class="dropdown-item delete-comment-btn" data-comment-id="${comment.id}">
                      <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                        <polyline points="3,6 5,6 21,6"></polyline>
                        <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
                      </svg>
                      Delete
                    </button>
                  ` : ''}
                  <button class="dropdown-item report-btn" data-comment-id="${comment.id}">
                    <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"></path>
                      <line x1="4" y1="22" x2="4" y2="15"></line>
                    </svg>
                    Report
                  </button>
                </div>
              </div>
            </div>

            <div class="comment-content">
              <div class="comment-text">${formatCommentContent(comment.content)}</div>
            </div>

            <div class="comment-footer">
              <div class="comment-voting">
                <button class="vote-btn upvote-btn" data-comment-id="${comment.id}">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M7 14l5-5 5 5"/>
                  </svg>
                  <span class="vote-count">${comment.like_count || 0}</span>
                </button>
                <button class="vote-btn downvote-btn" data-comment-id="${comment.id}">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M17 10l-5 5-5-5"/>
                  </svg>
                </button>
              </div>

              <div class="comment-reactions">
                <button class="reaction-btn" data-reaction="helpful" data-comment-id="${comment.id}">
                  <span class="reaction-emoji">üëç</span>
                  <span class="reaction-count">${comment.reaction_counts?.helpful || 0}</span>
                </button>
                <button class="reaction-btn" data-reaction="insightful" data-comment-id="${comment.id}">
                  <span class="reaction-emoji">üí°</span>
                  <span class="reaction-count">${comment.reaction_counts?.insightful || 0}</span>
                </button>
                <button class="reaction-btn" data-reaction="great" data-comment-id="${comment.id}">
                  <span class="reaction-emoji">üî•</span>
                  <span class="reaction-count">${comment.reaction_counts?.great || 0}</span>
                </button>
                <button class="reaction-btn" data-reaction="love" data-comment-id="${comment.id}">
                  <span class="reaction-emoji">‚ù§Ô∏è</span>
                  <span class="reaction-count">${comment.reaction_counts?.love || 0}</span>
                </button>
                <button class="reaction-btn" data-reaction="thinking" data-comment-id="${comment.id}">
                  <span class="reaction-emoji">ü§î</span>
                  <span class="reaction-count">${comment.reaction_counts?.thinking || 0}</span>
                </button>
              </div>

              <div class="comment-actions">
                ${level < 4 ? `
                  <button class="action-btn reply-btn" data-comment-id="${comment.id}" data-author="${displayName}">
                    <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                      <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"/>
                    </svg>
                    Reply
                  </button>
                ` : ''}
                
                <button class="action-btn bookmark-btn" data-comment-id="${comment.id}">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M19 21l-7-5-7 5V5a2 2 0 0 1 2-2h10a2 2 0 0 1 2 2z"></path>
                  </svg>
                </button>

                <button class="action-btn copy-btn" data-comment-id="${comment.id}">
                  <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                    <path d="M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2"></path>
                    <rect x="8" y="2" width="8" height="4" rx="1" ry="1"></rect>
                  </svg>
                </button>
              </div>
            </div>

            <div class="inline-reply-container" data-comment-id="${comment.id}" style="display: none;"></div>
          </div>
        </div>
      `;
    }

    // Add comment to DOM
    async function addCommentToDOM(comment: any): Promise<void> {
      if (!commentsItems) return;

      if (currentReplyTo) {
        // Add as reply
        const parentElement = document.querySelector(`[data-comment-id="${currentReplyTo}"]`);
        if (parentElement) {
          let repliesContainer = parentElement.querySelector(".comment-replies");
          if (!repliesContainer) {
            repliesContainer = document.createElement("div");
            repliesContainer.className = "comment-replies";
            repliesContainer.setAttribute("data-parent-id", currentReplyTo);
            parentElement.appendChild(repliesContainer);
          }
          
          const parentLevel = parseInt(parentElement.getAttribute("data-thread-level") || "0");
          const replyHtml = renderCommentRecursively(comment, parentLevel + 1);
          const tempDiv = document.createElement('div');
          tempDiv.innerHTML = replyHtml;
          const replyElement = tempDiv.firstElementChild;
          
          if (replyElement) {
            repliesContainer.insertBefore(replyElement, repliesContainer.firstChild);
          }
        }
      } else {
        // Add as top-level comment
        const commentHtml = renderCommentRecursively(comment, 0);
        
        // Check if there's an empty state and remove it
        const emptyState = document.getElementById('empty-state');
        if (emptyState) {
          emptyState.remove();
        }
        
        // Add to comments list
        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = commentHtml;
        const commentElement = tempDiv.firstElementChild;
        
        if (commentElement) {
          commentsItems.insertBefore(commentElement, commentsItems.firstChild);
        }
      }

      // Highlight new comment
      const newCommentCard = document.querySelector(`[data-comment-id="${comment.id}"]`) as HTMLElement;
      if (newCommentCard) {
        newCommentCard.classList.add("new-comment");
        setTimeout(() => {
          newCommentCard.classList.remove("new-comment");
        }, 3000);
      }
    }

    // Format comment content
    function formatCommentContent(content: string): string {
      return content
        .replace(/\*\*(.*?)\*\*/g, "<strong>$1</strong>")
        .replace(/\*(.*?)\*/g, "<em>$1</em>")
        .replace(/`(.*?)`/g, "<code>$1</code>")
        .replace(/@(\w+)/g, '<span class="mention">@$1</span>')
        .replace(/\n/g, "<br>")
        .replace(
          /(https?:\/\/[^\s]+)/g,
          '<a href="$1" target="_blank" rel="noopener noreferrer">$1</a>'
        );
    }

    // Handle reactions
    async function handleReaction(commentId: string, reactionType: string, button: HTMLElement): Promise<void> {
      if (!isAuthenticated) {
        showSubtleSuccess("Sign in to react to comments");
        return;
      }

      const originalActive = button.classList.contains("active");
      const countElement = button.querySelector(".reaction-count") as HTMLElement;
      const originalCount = parseInt(countElement.textContent || "0");

      // Optimistic update
      button.classList.toggle("active");
      countElement.textContent = (originalCount + (originalActive ? -1 : 1)).toString();

      try {
        const { data: { session } } = await supabase.auth.getSession();

        if (!session?.access_token) {
          throw new Error("Please sign in to react");
        }

        const response = await fetch("/api/comments/react", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${session.access_token}`,
          },
          body: JSON.stringify({
            comment_id: commentId,
            reaction_type: reactionType,
          }),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || "Failed to react");
        }

        // Update with actual count from server
        countElement.textContent = result.count.toString();

        if (result.added) {
          button.classList.add("active");
        } else {
          button.classList.remove("active");
        }
      } catch (error) {
        console.error("Error reacting:", error);
        // Revert optimistic update
        button.classList.toggle("active");
        countElement.textContent = originalCount.toString();
        showSubtleSuccess("Failed to react to comment");
      }
    }

    // Handle bookmark
    async function handleBookmark(commentId: string, button: HTMLElement): Promise<void> {
      if (!isAuthenticated) {
        showSubtleSuccess("Sign in to save comments");
        return;
      }

      const originalActive = button.classList.contains("active");

      // Optimistic update
      button.classList.toggle("active");

      try {
        const { data: { session } } = await supabase.auth.getSession();

        if (!session?.access_token) {
          throw new Error("Please sign in to bookmark");
        }

        const response = await fetch("/api/comments/bookmark", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${session.access_token}`,
          },
          body: JSON.stringify({
            comment_id: commentId,
          }),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || "Failed to bookmark");
        }

        if (result.bookmarked) {
          button.classList.add("active");
          showSubtleSuccess("Comment saved!");
        } else {
          button.classList.remove("active");
          showSubtleSuccess("Save removed!");
        }
      } catch (error) {
        console.error("Error bookmarking:", error);
        // Revert optimistic update
        button.classList.toggle("active");
        showSubtleSuccess("Failed to save comment");
      }
    }

    // Handle copy
    async function handleCopy(commentId: string): Promise<void> {
      const commentText = document.querySelector(
        `[data-comment-id="${commentId}"] .comment-text`
      )?.textContent;

      if (commentText) {
        try {
          await navigator.clipboard.writeText(commentText);
          showSubtleSuccess("Comment copied to clipboard!");
        } catch (error) {
          console.error("Failed to copy:", error);
          showSubtleSuccess("Failed to copy comment");
        }
      }
    }

    // Initialize event listeners
    function initializeEventListeners(): void {
      // TINKBYTE account button
      if (tinkbyteAccountBtn) {
        tinkbyteAccountBtn.addEventListener("click", () => {
          if (isAuthenticated) {
            window.location.href = "/profile";
          } else {
            window.location.href = "/auth/signin";
          }
        });
      }

      // Comment form
      if (commentForm) {
        commentForm.addEventListener("submit", handleCommentSubmission);
      }

      // Cancel button
      if (cancelBtn) {
        cancelBtn.addEventListener("click", resetForm);
      }

      // Cancel reply button
      if (cancelReplyBtn) {
        cancelReplyBtn.addEventListener("click", cancelReply);
      }

      // Character count
      if (textarea) {
        textarea.addEventListener("input", updateCharacterCount);

        // @mention detection
        textarea.addEventListener("input", (e) => {
          const value = textarea.value;
          const cursorPos = textarea.selectionStart;
          const textBeforeCursor = value.substring(0, cursorPos);
          const atIndex = textBeforeCursor.lastIndexOf("@");

          if (atIndex !== -1) {
            const query = textBeforeCursor.substring(atIndex + 1);
            if (query.length > 0 && !query.includes(" ")) {
              showMentionSuggestions(query);
            } else if (query.length === 0) {
              showMentionSuggestions("");
            } else {
              hideMentionSuggestions();
            }
          } else {
            hideMentionSuggestions();
          }
        });

        // Keyboard navigation for mentions
        textarea.addEventListener("keydown", (e) => {
          if (mentionSuggestions?.classList.contains("show")) {
            const items = mentionList.querySelectorAll(".mention-item");

            if (e.key === "ArrowDown") {
              e.preventDefault();
              currentMentionIndex = Math.min(currentMentionIndex + 1, items.length - 1);
              updateMentionSelection();
            } else if (e.key === "ArrowUp") {
              e.preventDefault();
              currentMentionIndex = Math.max(currentMentionIndex - 1, 0);
              updateMentionSelection();
            } else if (e.key === "Enter" && currentMentionIndex >= 0) {
              e.preventDefault();
              const selectedItem = items[currentMentionIndex] as HTMLElement;
              const displayName = selectedItem.dataset.displayName;
              if (displayName) {
                insertMention(displayName);
              }
            } else if (e.key === "Escape") {
              hideMentionSuggestions();
            }
          }
        });
      }

      // Formatting buttons
      const formatButtons = document.querySelectorAll(".format-btn");
      formatButtons.forEach((btn) => {
        btn.addEventListener("click", (e) => {
          e.preventDefault();
          const format = (btn as HTMLElement).dataset.format;
          if (format && textarea) {
            applyFormatting(format, textarea);
          }
        });
      });

      // Mention button
      if (mentionBtn) {
        mentionBtn.addEventListener("click", (e) => {
          e.preventDefault();
          if (textarea) {
            insertAtCursor(textarea, "@");
            textarea.focus();
          }
        });
      }

      // Global click handler
      document.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;

        // Close dropdowns when clicking outside
        if (!target.closest(".dropdown-menu") && !target.closest(".menu-btn")) {
          hideAllDropdowns();
        }

        // Close emoji picker when clicking outside
        if (!target.closest(".emoji-picker") && !target.closest(".emoji-btn") && 
            !target.closest(".inline-emoji-picker") && !target.closest(".inline-emoji-btn")) {
          hideEmojiPicker();
          document.querySelectorAll(".inline-emoji-picker").forEach(picker => {
            picker.classList.remove("show");
          });
        }

        // Close mention suggestions when clicking outside
        if (!target.closest(".mention-suggestions") && !target.closest(".comment-textarea")) {
          hideMentionSuggestions();
        }
      });

      console.log("‚úÖ Event listeners initialized");
    }

    // Initialize everything
    async function initialize(): Promise<void> {
      try {
        console.log("üöÄ Initializing comment system...");

        // Check authentication status
        isAuthenticated = await checkAuthStatus();

        // Update UI based on auth status
        updateAuthUI();

        // Load mention users if authenticated
        if (isAuthenticated) {
          await loadMentionUsers();
        }

        // Initialize all functionality
        initializeEventListeners();
        initializeCommentInteractions();
        initializeDeleteFunctionality();
        initializeEmojiPicker();

        // Listen for auth state changes
        supabase.auth.onAuthStateChange(async (event, session) => {
          console.log("üîÑ Auth state changed:", event);

          if (event === "SIGNED_IN" && session?.user) {
            currentUser = session.user;
            isAuthenticated = true;

            // Get updated profile
            const { data: profile } = await supabase
              .from("profiles")
              .select("*")
              .eq("id", currentUser.id)
              .single();

            if (profile) {
              currentUserProfile = profile;
            }

            // Load mention users
            await loadMentionUsers();

            updateAuthUI();
          } else if (event === "SIGNED_OUT") {
            currentUser = null;
            currentUserProfile = null;
            isAuthenticated = false;
            mentionUsers = [];
            updateAuthUI();
          }
        });

        console.log("‚úÖ Comment system initialized successfully!");
      } catch (error) {
        console.error("‚ùå Failed to initialize comment system:", error);
        showSubtleSuccess("Failed to initialize comment system. Please refresh the page.");
      }
    }

    // Start initialization
    await initialize();
  });
</script>