---
// src/components/blog/TableOfContents.astro - Overlay positioned version
---

<div
  class="toc-container bg-white/95 dark:bg-zinc-900/95 backdrop-blur-sm rounded-xl border border-zinc-200/50 dark:border-zinc-700/50 p-4 shadow-lg"
>
  <div class="flex items-center justify-between mb-3">
    <div class="flex items-center gap-2">
      <svg
        class="w-4 h-4 text-brand-primary"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
      </svg>
      <h3
        class="font-semibold text-zinc-900 dark:text-zinc-100 text-sm uppercase tracking-wide"
      >
        Contents
      </h3>
    </div>

    <!-- Collapse/Expand Toggle -->
    <button
      id="toc-toggle"
      class="text-zinc-500 dark:text-zinc-400 hover:text-zinc-700 dark:hover:text-zinc-300 transition-colors"
      aria-label="Toggle table of contents"
    >
      <svg
        class="w-4 h-4 transform transition-transform"
        id="toc-arrow"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M19 9l-7 7-7-7"></path>
      </svg>
    </button>
  </div>

  <nav id="table-of-contents" class="toc-nav">
    <!-- TOC will be populated by JavaScript -->
  </nav>
</div>

<style>
  .toc-container {
    max-height: 400px;
    overflow: hidden;
    transition: all 0.3s ease;
  }

  .toc-nav {
    max-height: 300px;
    overflow-y: auto;
    transition: max-height 0.3s ease;
  }

  .toc-nav.collapsed {
    max-height: 0;
    overflow: hidden;
  }

  .toc-nav ul {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .toc-nav li {
    margin: 0;
  }

  .toc-nav a {
    display: block;
    padding: 0.375rem 0;
    color: rgb(113 113 122);
    text-decoration: none;
    font-size: 0.8125rem;
    line-height: 1.2;
    border-left: 2px solid transparent;
    padding-left: 0.5rem;
    transition: all 0.2s ease;
    border-radius: 0 4px 4px 0;
  }

  .toc-nav a:hover {
    color: rgb(39 39 42);
    border-left-color: rgb(36 55 136);
    background: rgba(36, 55, 136, 0.05);
  }

  .dark .toc-nav a {
    color: rgb(161 161 170);
  }

  .dark .toc-nav a:hover {
    color: rgb(244 244 245);
    background: rgba(36, 55, 136, 0.1);
  }

  .toc-nav a.active {
    color: rgb(36 55 136);
    border-left-color: rgb(36 55 136);
    font-weight: 600;
    background: rgba(36, 55, 136, 0.1);
  }

  .toc-nav .toc-h3 {
    padding-left: 1rem;
    font-size: 0.75rem;
  }

  .toc-nav .toc-h4 {
    padding-left: 1.5rem;
    font-size: 0.75rem;
  }

  .toc-nav .toc-h5 {
    padding-left: 2rem;
    font-size: 0.6875rem;
  }

  .toc-nav .toc-h6 {
    padding-left: 2.5rem;
    font-size: 0.6875rem;
  }

  /* Custom scrollbar for overlay */
  .toc-nav::-webkit-scrollbar {
    width: 3px;
  }

  .toc-nav::-webkit-scrollbar-track {
    background: transparent;
  }

  .toc-nav::-webkit-scrollbar-thumb {
    background: rgba(161, 161, 170, 0.5);
    border-radius: 2px;
  }

  .dark .toc-nav::-webkit-scrollbar-thumb {
    background: rgba(113, 113, 122, 0.5);
  }

  /* Responsive adjustments */
  @media (max-width: 768px) {
    .toc-container {
      max-height: none;
      position: static !important;
      width: 100% !important;
      max-width: none !important;
      margin-bottom: 1rem;
      background: rgb(250 250 250 / 0.95);
    }

    .dark .toc-container {
      background: rgb(24 24 27 / 0.95);
    }
  }

  /* Animation for overlay appearance */
  .toc-container {
    animation: slideInFromRight 0.3s ease-out;
  }

  @keyframes slideInFromRight {
    from {
      opacity: 0;
      transform: translateX(20px);
    }
    to {
      opacity: 1;
      transform: translateX(0);
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const tocContainer = document.getElementById("table-of-contents");
    const tocNav = document.querySelector(".toc-nav");
    const tocToggle = document.getElementById("toc-toggle");
    const tocArrow = document.getElementById("toc-arrow");

    if (!tocContainer || !tocNav) return;

    // Find all headings in the prose content
    const headings = document.querySelectorAll(
      ".prose h2, .prose h3, .prose h4, .prose h5, .prose h6"
    );

    if (headings.length === 0) {
      const tocElement = document.querySelector(".toc-container");
      if (tocElement) {
        tocElement.style.display = "none";
      }
      return;
    }

    // Generate TOC
    const tocList = document.createElement("ul");

    headings.forEach((heading, index) => {
      // Add ID if it doesn't exist
      if (!heading.id) {
        const slug = heading.textContent
          ?.toLowerCase()
          .replace(/[^\w\s-]/g, "")
          .replace(/\s+/g, "-")
          .trim();
        heading.id = slug || `heading-${index}`;
      }

      const li = document.createElement("li");
      const a = document.createElement("a");

      a.href = `#${heading.id}`;
      a.textContent = heading.textContent || `Heading ${index + 1}`;
      a.className = `toc-${heading.tagName.toLowerCase()}`;

      // Add click tracking and smooth scroll
      a.addEventListener("click", (e) => {
        e.preventDefault();
        const target = document.getElementById(heading.id);
        if (target) {
          target.scrollIntoView({
            behavior: "smooth",
            block: "start",
          });

          // Update URL without triggering scroll
          if (history.pushState) {
            history.pushState(null, null, `#${heading.id}`);
          }
        }
      });

      li.appendChild(a);
      tocList.appendChild(li);
    });

    tocContainer.appendChild(tocList);

    // Toggle functionality
    let isCollapsed = false;
    tocToggle?.addEventListener("click", () => {
      isCollapsed = !isCollapsed;

      if (isCollapsed) {
        tocNav.classList.add("collapsed");
        tocArrow.style.transform = "rotate(-90deg)";
      } else {
        tocNav.classList.remove("collapsed");
        tocArrow.style.transform = "rotate(0deg)";
      }
    });

    // Active section highlighting
    const tocLinks = tocContainer.querySelectorAll("a");

    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          const id = entry.target.id;
          const tocLink = tocContainer.querySelector(`a[href="#${id}"]`);

          if (entry.isIntersecting) {
            tocLinks.forEach((link) => link.classList.remove("active"));
            if (tocLink) {
              tocLink.classList.add("active");
            }
          }
        });
      },
      {
        rootMargin: "-20% 0% -80% 0%",
        threshold: 0.1,
      }
    );

    headings.forEach((heading) => {
      observer.observe(heading);
    });

    // Handle initial hash in URL
    if (window.location.hash) {
      setTimeout(() => {
        const target = document.querySelector(window.location.hash);
        if (target) {
          target.scrollIntoView({ behavior: "smooth" });
        }
      }, 100);
    }

    // Auto-collapse on mobile
    if (window.innerWidth < 768) {
      tocToggle?.click();
    }

    // Handle scroll behavior to show/hide TOC on mobile
    let lastScrollY = window.scrollY;
    let ticking = false;

    const handleScroll = () => {
      const currentScrollY = window.scrollY;
      const tocElement = document.querySelector(".toc-container");

      if (window.innerWidth < 768 && tocElement) {
        if (currentScrollY > lastScrollY && currentScrollY > 100) {
          // Scrolling down - hide TOC
          tocElement.style.transform = "translateY(-100%)";
          tocElement.style.opacity = "0";
        } else {
          // Scrolling up - show TOC
          tocElement.style.transform = "translateY(0)";
          tocElement.style.opacity = "1";
        }
      }

      lastScrollY = currentScrollY;
      ticking = false;
    };

    const requestTick = () => {
      if (!ticking) {
        requestAnimationFrame(handleScroll);
        ticking = true;
      }
    };

    window.addEventListener("scroll", requestTick);
  });
</script>
