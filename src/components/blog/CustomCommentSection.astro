---
// src/components/blog/CustomCommentSection.astro
export interface Props {
  postSlug?: string;
  postTitle?: string;
}

const { postSlug, postTitle } = Astro.props;
---

<section class="comments-section-enhanced">
  <div class="max-w-4xl mx-auto px-4 py-12">
    <div class="comments-header">
      <h3 class="comments-title-enhanced">
        <i class="fas fa-comments mr-3"></i>
        Join the Discussion
      </h3>
      <p class="comments-subtitle">
        Share your thoughts about "{postTitle}"
      </p>
    </div>

    <!-- Comment Form -->
    <div class="comment-form-container">
      <form id="comment-form" class="comment-form">
        <div class="form-grid">
          <div class="form-group">
            <label for="author-name" class="form-label">Name *</label>
            <input 
              type="text" 
              id="author-name" 
              name="authorName" 
              required 
              class="form-input"
              placeholder="Your name"
            />
          </div>
          <div class="form-group">
            <label for="author-email" class="form-label">Email *</label>
            <input 
              type="email" 
              id="author-email" 
              name="authorEmail" 
              required 
              class="form-input"
              placeholder="your@email.com (won't be published)"
            />
          </div>
        </div>
        <div class="form-group">
          <label for="author-website" class="form-label">Website (Optional)</label>
          <input 
            type="url" 
            id="author-website" 
            name="authorWebsite" 
            class="form-input"
            placeholder="https://yourwebsite.com"
          />
        </div>
        <div class="form-group">
          <label for="comment-content" class="form-label">Comment *</label>
          <textarea 
            id="comment-content" 
            name="content" 
            required 
            rows="6"
            class="form-textarea"
            placeholder="Share your thoughts..."
          ></textarea>
        </div>
        <div class="form-actions">
          <button type="submit" class="submit-button">
            <i class="fas fa-paper-plane mr-2"></i>
            Post Comment
          </button>
        </div>
      </form>
    </div>

    <!-- Comments Display -->
    <div id="comments-list" class="comments-list">
      <div class="loading-comments">
        <i class="fas fa-spinner fa-spin mr-2"></i>
        Loading comments...
      </div>
    </div>
  </div>
</section>

<style>
/* Enhanced Comment Form Styling */
.comments-section-enhanced {
  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  border-top: 2px solid #e2e8f0;
  transition: all 0.3s ease;
}

:global(.dark) .comments-section-enhanced {
  background: linear-gradient(135deg, rgb(15, 23, 42) 0%, rgb(30, 41, 59) 100%);
  border-top-color: rgb(51, 65, 85);
}

.comments-header {
  text-align: center;
  margin-bottom: 3rem;
}

.comments-title-enhanced {
  font-size: 2rem;
  font-weight: 700;
  color: rgb(15, 23, 42);
  margin-bottom: 0.5rem;
  transition: color 0.3s ease;
  display: flex;
  align-items: center;
  justify-content: center;
  font-family: "Space Grotesk", sans-serif;
}

:global(.dark) .comments-title-enhanced {
  color: rgb(248, 250, 252);
}

.comments-subtitle {
  color: #64748b;
  font-size: 1rem;
  transition: color 0.3s ease;
}

:global(.dark) .comments-subtitle {
  color: rgb(148, 163, 184);
}

.comment-form-container {
  background: white;
  border-radius: var(--tinkbyte-radius-card, 4px);
  padding: 2.5rem;
  border: 2px solid #e2e8f0;
  margin-bottom: 3rem;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.05);
  transition: all 0.3s ease;
}

:global(.dark) .comment-form-container {
  background: rgb(30, 41, 59);
  border-color: rgb(71, 85, 105);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);
}

.form-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1.5rem;
  margin-bottom: 1.5rem;
}

@media (max-width: 768px) {
  .form-grid {
    grid-template-columns: 1fr;
  }
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-label {
  display: block;
  font-weight: 600;
  color: #374151;
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  transition: color 0.3s ease;
}

:global(.dark) .form-label {
  color: rgb(209, 213, 219);
}

.form-input,
.form-textarea {
  width: 100%;
  padding: 0.875rem 1rem;
  border: 2px solid #e2e8f0;
  border-radius: var(--tinkbyte-radius, 2px);
  font-size: 1rem;
  transition: all 0.3s ease;
  background: #f8fafc;
  color: #374151;
}

:global(.dark) .form-input,
:global(.dark) .form-textarea {
  background: rgb(51, 65, 85);
  border-color: rgb(71, 85, 105);
  color: rgb(248, 250, 252);
}

.form-input:focus,
.form-textarea:focus {
  outline: none;
  border-color: rgb(59, 130, 246);
  background: white;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

:global(.dark) .form-input:focus,
:global(.dark) .form-textarea:focus {
  background: rgb(30, 41, 59);
  border-color: rgb(147, 197, 253);
  box-shadow: 0 0 0 3px rgba(147, 197, 253, 0.1);
}

.form-textarea {
  resize: vertical;
  min-height: 120px;
  font-family: inherit;
  line-height: 1.6;
}

.form-actions {
  display: flex;
  justify-content: flex-end;
  margin-top: 2rem;
}

.submit-button {
  background: linear-gradient(135deg, rgb(59, 130, 246), rgb(37, 99, 235));
  color: white;
  border: none;
  padding: 0.875rem 2rem;
  border-radius: var(--tinkbyte-radius, 2px);
  font-weight: 600;
  font-size: 1rem;
  cursor: pointer;
  transition: all 0.3s ease;
  display: flex;
  align-items: center;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.submit-button:hover {
  background: linear-gradient(135deg, rgb(37, 99, 235), rgb(29, 78, 216));
  transform: translateY(-2px);
  box-shadow: 0 10px 25px rgba(59, 130, 246, 0.3);
}

.submit-button:active {
  transform: translateY(0);
}

.submit-button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

/* Comments Display */
.comments-list {
  space-y: 1.5rem;
}

.comment-item {
  background: white;
  border-radius: var(--tinkbyte-radius-card, 4px);
  padding: 2rem;
  border: 2px solid #e2e8f0;
  transition: all 0.3s ease;
  position: relative;
}

:global(.dark) .comment-item {
  background: rgb(30, 41, 59);
  border-color: rgb(71, 85, 105);
}

.comment-item:hover {
  border-color: rgb(59, 130, 246);
  box-shadow: 0 4px 20px rgba(59, 130, 246, 0.1);
}

.comment-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1rem;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.comment-author {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.comment-avatar {
  width: 40px;
  height: 40px;
  border-radius: var(--tinkbyte-radius-card, 4px);
  background: linear-gradient(135deg, rgb(59, 130, 246), rgb(147, 51, 234));
  display: flex;
  align-items: center;
  justify-content: center;
  color: white;
  font-weight: 700;
  font-size: 1.125rem;
}

.comment-author-info h4 {
  font-weight: 600;
  color: #374151;
  margin: 0;
  font-size: 1rem;
}

:global(.dark) .comment-author-info h4 {
  color: rgb(248, 250, 252);
}

.comment-author-info a {
  color: rgb(59, 130, 246);
  text-decoration: none;
  transition: color 0.3s ease;
}

.comment-author-info a:hover {
  color: rgb(37, 99, 235);
}

.comment-date {
  font-size: 0.875rem;
  color: #64748b;
  transition: color 0.3s ease;
}

:global(.dark) .comment-date {
  color: rgb(148, 163, 184);
}

.comment-content {
  color: #374151;
  line-height: 1.7;
  font-size: 1rem;
  transition: color 0.3s ease;
}

:global(.dark) .comment-content {
  color: rgb(209, 213, 219);
}

.loading-comments {
  text-align: center;
  padding: 3rem;
  color: #64748b;
  font-size: 1.125rem;
}

:global(.dark) .loading-comments {
  color: rgb(148, 163, 184);
}

.no-comments {
  text-align: center;
  padding: 3rem;
  color: #64748b;
  background: #f8fafc;
  border-radius: var(--tinkbyte-radius-card, 4px);
  border: 2px dashed #cbd5e1;
}

:global(.dark) .no-comments {
  background: rgb(51, 65, 85);
  border-color: rgb(100, 116, 139);
  color: rgb(148, 163, 184);
}

/* Success/Error Messages */
.message {
  padding: 1rem 1.5rem;
  border-radius: var(--tinkbyte-radius, 2px);
  margin-bottom: 1.5rem;
  font-weight: 500;
}

.message.success {
  background: #dcfce7;
  color: #166534;
  border: 1px solid #bbf7d0;
}

.message.error {
  background: #fef2f2;
  color: #dc2626;
  border: 1px solid #fecaca;
}

:global(.dark) .message.success {
  background: rgb(20, 83, 45);
  color: rgb(187, 247, 208);
  border-color: rgb(34, 197, 94);
}

:global(.dark) .message.error {
  background: rgb(127, 29, 29);
  color: rgb(254, 202, 202);
  border-color: rgb(239, 68, 68);
}
</style>

<script define:vars={{ postSlug }}>
document.addEventListener("DOMContentLoaded", () => {
  const form = document.getElementById("comment-form");
  const commentsList = document.getElementById("comments-list");
  
  if (!form || !commentsList) return;

  // Load existing comments
  loadComments();

  // Handle form submission
  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    
    const formData = new FormData(form);
    const comment = {
      postSlug: postSlug,
      authorName: formData.get("authorName"),
      authorEmail: formData.get("authorEmail"),
      authorWebsite: formData.get("authorWebsite"),
      content: formData.get("content"),
      timestamp: new Date().toISOString()
    };

    try {
      await submitComment(comment);
      form.reset();
      showMessage("Comment posted successfully!", "success");
      loadComments();
    } catch (error) {
      showMessage("Failed to post comment. Please try again.", "error");
    }
  });

  async function submitComment(comment) {
    // Store in localStorage for demo (replace with your API)
    const comments = JSON.parse(localStorage.getItem(`comments-${postSlug}`) || "[]");
    comments.push({
      ...comment,
      id: Date.now().toString()
    });
    localStorage.setItem(`comments-${postSlug}`, JSON.stringify(comments));
  }

  async function loadComments() {
    try {
      // Load from localStorage for demo (replace with your API)
      const comments = JSON.parse(localStorage.getItem(`comments-${postSlug}`) || "[]");
      displayComments(comments);
    } catch (error) {
      commentsList.innerHTML = '<div class="no-comments">Failed to load comments.</div>';
    }
  }

  function displayComments(comments) {
    if (comments.length === 0) {
      commentsList.innerHTML = `
        <div class="no-comments">
          <i class="fas fa-comments text-2xl mb-4 block"></i>
          <p>No comments yet. Be the first to share your thoughts!</p>
        </div>
      `;
      return;
    }

    const commentsHtml = comments
      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))
      .map(comment => createCommentHtml(comment))
      .join("");

    commentsList.innerHTML = commentsHtml;
  }

  function createCommentHtml(comment) {
    const date = new Date(comment.timestamp).toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit"
    });

    const initials = comment.authorName
      .split(" ")
      .map(n => n[0])
      .join("")
      .toUpperCase()
      .slice(0, 2);

    const websiteLink = comment.authorWebsite 
      ? `<a href="${comment.authorWebsite}" target="_blank" rel="noopener">${comment.authorName}</a>`
      : comment.authorName;

    return `
      <div class="comment-item">
        <div class="comment-header">
          <div class="comment-author">
            <div class="comment-avatar">${initials}</div>
            <div class="comment-author-info">
              <h4>${websiteLink}</h4>
            </div>
          </div>
          <div class="comment-date">${date}</div>
        </div>
        <div class="comment-content">${escapeHtml(comment.content)}</div>
      </div>
    `;
  }

  function escapeHtml(text) {
    const div = document.createElement("div");
    div.textContent = text;
    return div.innerHTML;
  }

  function showMessage(text, type) {
    const existingMessage = document.querySelector(".message");
    if (existingMessage) {
      existingMessage.remove();
    }

    const message = document.createElement("div");
    message.className = `message ${type}`;
    message.textContent = text;
    
    form.parentNode.insertBefore(message, form);
    
    setTimeout(() => {
      message.remove();
    }, 5000);
  }
});
</script>