---
// src/components/blog/CategoryCard.astro
export interface Props {
  name: string;
  description: string;
  count: number;
  image?: string;
  color?: string;
  href: string;
  featured?: boolean;
  size?: 'small' | 'medium' | 'large';
}

const {
  name,
  description,
  count,
  image,
  color = 'blue',
  href,
  featured = false,
  size = 'medium'
} = Astro.props;

// Category icon mapping function
const getCategoryIcon = (category: string): string => {
  const icons: Record<string, string> = {
    'AI Evolution': 'brain',
    'AI & Machine Learning': 'brain',
    'Product Insights': 'lightbulb',
    'Product Strategy': 'lightbulb',
    'Tech Culture': 'users',
    'Startup Lessons': 'rocket',
    'Tools & Resources': 'toolbox',
    'Developer Tools': 'code',
    'Industry News': 'newspaper',
    'Emerging Tech': 'atom',
    'Future Tech': 'atom',
    'Web Development': 'code',
    'Mobile Development': 'mobile-alt',
    'Data Science': 'chart-bar',
    'DevOps': 'server',
    'Cybersecurity': 'shield-alt',
    'Cloud Computing': 'cloud',
    'Blockchain': 'link',
    'IoT': 'wifi',
    'Design': 'palette',
    'Tutorials': 'graduation-cap',
    'Reviews': 'star'
  };
  return icons[category] || 'tag';
};

const colorClasses = {
  blue: 'from-blue-500 to-cyan-500',
  purple: 'from-purple-500 to-pink-500',
  green: 'from-green-500 to-emerald-500',
  orange: 'from-orange-500 to-red-500',
  indigo: 'from-indigo-500 to-purple-500',
  teal: 'from-teal-500 to-blue-500'
};

const sizeClasses = {
  small: 'min-h-[200px]',
  medium: 'min-h-[280px]',
  large: 'min-h-[400px]'
};

const textSizes = {
  small: 'text-xl',
  medium: 'text-2xl lg:text-3xl',
  large: 'text-3xl lg:text-4xl'
};
---

<article 
  class={`group relative overflow-hidden rounded-2xl ${sizeClasses[size]} transition-all duration-500 hover:scale-[1.02] hover:shadow-2xl cursor-pointer`}
  data-href={href}
>
  
  <!-- Background Image or Gradient -->
  {image ? (
    <div class="absolute inset-0 z-0">
      <img 
        src={image} 
        alt={name}
        class="w-full h-full object-cover transition-transform duration-700 group-hover:scale-110"
        loading="lazy"
      />
      <div class="absolute inset-0 bg-gradient-to-br from-black/60 via-black/40 to-transparent"></div>
      <div class={`absolute inset-0 bg-gradient-to-br ${colorClasses[color]} opacity-20 mix-blend-multiply`}></div>
    </div>
  ) : (
    <div class={`absolute inset-0 bg-gradient-to-br ${colorClasses[color]} opacity-90`}>
      <!-- Geometric Pattern Overlay -->
      <div class="absolute inset-0 opacity-10">
        <svg class="w-full h-full" viewBox="0 0 100 100" preserveAspectRatio="none">
          <defs>
            <pattern id={`pattern-${name.replace(/\s+/g, '-')}`} x="0" y="0" width="20" height="20" patternUnits="userSpaceOnUse">
              <circle cx="10" cy="10" r="2" fill="white" opacity="0.3"/>
              <rect x="5" y="15" width="10" height="2" fill="white" opacity="0.2"/>
            </pattern>
          </defs>
          <rect width="100%" height="100%" fill={`url(#pattern-${name.replace(/\s+/g, '-')})`}/>
        </svg>
      </div>
    </div>
  )}

  <!-- Content Container -->
  <div class="relative z-10 h-full flex flex-col justify-between p-6 lg:p-8">
    
    <!-- Top Section -->
    <div class="flex items-start justify-between">
      <!-- Category Icon/Badge -->
      <div class="flex items-center gap-3">
        <div class="w-12 h-12 bg-white/20 backdrop-blur-sm rounded-full flex items-center justify-center border border-white/30">
          <i class={`fas fa-${getCategoryIcon(name)} text-white text-lg`}></i>
        </div>
        {featured && (
          <span class="px-2 py-1 bg-yellow-400 text-black text-xs font-bold uppercase tracking-wider rounded-full">
            Featured
          </span>
        )}
      </div>

      <!-- Article Count -->
      <div class="text-right">
        <div class="text-white/80 text-sm font-medium uppercase tracking-wide">Articles</div>
        <div class="text-white text-2xl font-bold">{count}</div>
      </div>
    </div>

    <!-- Bottom Section -->
    <div>
      <!-- Category Title -->
      <h3 class={`${textSizes[size]} font-bold text-white mb-3 leading-tight group-hover:text-yellow-300 transition-colors duration-300 uppercase tracking-wide`}>
        {name}
      </h3>

      <!-- Description -->
      <p class="text-white/90 mb-6 leading-relaxed text-base lg:text-lg">
        {description}
      </p>

      <!-- CTA Button -->
      <div class="flex items-center justify-between">
        <a 
          href={href}
          class="inline-flex items-center gap-2 px-6 py-3 bg-white/20 backdrop-blur-sm text-white border border-white/30 rounded-full font-medium text-sm transition-all duration-300 hover:bg-white/30 hover:gap-3 group/btn uppercase tracking-wide"
        >
          Explore {name}
          <i class="fas fa-arrow-right text-xs transition-transform duration-300 group-hover/btn:translate-x-1"></i>
        </a>

        <!-- Latest Badge -->
        <div class="text-white/60 text-xs uppercase tracking-wider font-medium">
          Latest Updates
        </div>
      </div>
    </div>
  </div>

  <!-- Hover Effects -->
  <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-300"></div>
  
  <!-- Editorial Accent -->
  <div class={`absolute bottom-0 left-0 w-full h-2 bg-gradient-to-r ${colorClasses[color]} transform scale-x-0 group-hover:scale-x-100 transition-transform duration-500 origin-left`}></div>
</article>

<script define:vars={{ href }}>
  // Make entire card clickable
  document.addEventListener('DOMContentLoaded', () => {
    const card = document.querySelector(`[data-href="${href}"]`);
    if (card) {
      card.addEventListener('click', (e) => {
        // Don't navigate if clicking on a link
        if (e.target.tagName !== 'A') {
          window.location.href = href;
        }
      });
    }
  });
</script>