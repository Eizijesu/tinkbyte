---
// src/components/blog/RelatedPosts.astro - FIXED with proper author handling
import ArticleCard from "./ArticleCard.astro";
import Button from "../ui/Button.astro";
import { getCollection } from 'astro:content';

export interface Props {
  currentSlug: string;
  currentCategory?: string;
  currentTags?: string[];
  maxPosts?: number;
  title?: string;
  className?: string;
}

const { 
  currentSlug, 
  currentCategory, 
  currentTags = [], 
  maxPosts = 3,
  title = "RELATED ARTICLES",
  className = "" 
} = Astro.props;

// Get all published blog posts
const allPosts = await getCollection('blog', ({ data }) => !data.draft);

// Filter out current article and find related posts
const relatedPosts = allPosts
  .filter(post => post.slug !== currentSlug)
  .map(post => {
    let relevanceScore = 0;
    
    // Higher score for same category
    if (currentCategory && post.data.category?.toLowerCase() === currentCategory.toLowerCase()) {
      relevanceScore += 3;
    }
    
    // Score for matching tags
    if (post.data.tags && currentTags.length > 0) {
      const matchingTags = post.data.tags.filter(tag => 
        currentTags.some(currentTag => 
          currentTag.toLowerCase() === tag.toLowerCase()
        )
      );
      relevanceScore += matchingTags.length * 2;
    }
    
    // Add recency bonus (newer posts get slight boost)
    const daysSincePublished = Math.floor(
      (Date.now() - post.data.pubDate.getTime()) / (1000 * 60 * 60 * 24)
    );
    if (daysSincePublished < 30) {
      relevanceScore += 1;
    }
    
    return { 
      post,
      relevanceScore 
    };
  })
  .sort((a, b) => b.relevanceScore - a.relevanceScore)
  .slice(0, maxPosts);

// FIXED: Format posts for ArticleCard component with proper tag handling
const formatPost = (post: any) => {
  let authorData: {
    name: string;
    avatar?: string;
    bio?: string;
    role?: string;
  };

  // Handle author data consistently
  if (post.data.authorInfo && typeof post.data.authorInfo === "object") {
    authorData = {
      name: post.data.authorInfo.name || "TinkByte Team",
      avatar: post.data.authorInfo.avatar,
      bio: post.data.authorInfo.bio,
      role: post.data.authorInfo.role,
    };
  } else if (typeof post.data.author === "string" && post.data.author.trim()) {
    authorData = {
      name: post.data.author,
      avatar: post.data.authorAvatar,
      bio: post.data.authorBio,
      role: post.data.authorRole,
    };
  } else if (typeof post.data.author === "object" && post.data.author !== null) {
    authorData = {
      name: (post.data.author as any).name || "TinkByte Team",
      avatar: (post.data.author as any).avatar || post.data.authorAvatar,
      bio: (post.data.author as any).bio || post.data.authorBio,
      role: (post.data.author as any).role || post.data.authorRole,
    };
  } else {
    authorData = {
      name: "TinkByte Team",
      avatar: post.data.authorAvatar,
      bio: post.data.authorBio,
      role: post.data.authorRole,
    };
  }

  // FIXED: Ensure tags is always an array
  const ensureTagsArray = (tags: any): string[] => {
    if (Array.isArray(tags)) {
      return tags.filter(tag => tag && typeof tag === 'string' && tag.trim());
    }
    return [];
  };

  return {
    title: post.data.title,
    excerpt: post.data.excerpt,
    date: post.data.pubDate.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }),
    readTime: post.data.readTime || "5 min read",
    slug: post.slug,
    image: post.data.image || "https://images.unsplash.com/photo-1677442136019-21780ecad995?w=600&h=400&fit=crop",
    tags: ensureTagsArray(post.data.tags), // FIXED: Always returns string[]
    category: post.data.category,
    author: authorData,
    audioUrl: post.data.audioUrl,
    featured: post.data.featured,
    trending: post.data.trending,
  };
};
---

{relatedPosts.length > 0 && (
  <section class={`related-posts-section ${className}`}>
    <div class="max-w-7xl mx-auto px-4 py-16">
      <!-- Section Header -->
      <div class="section-header">
        <h2 class="section-title">
          <i class="fas fa-link mr-3 text-blue-600"></i>
          {title}
        </h2>
        <p class="section-subtitle">
          Continue exploring with these hand-picked articles that complement your current reading.
        </p>
      </div>
      
      <!-- Related Articles Grid -->
      <div class="related-articles-grid" data-count={relatedPosts.length}>
        {relatedPosts.map(({ post }, index) => (
          <div class="related-article-wrapper" style={`--animation-delay: ${index * 0.1}s`}>
            <ArticleCard {...formatPost(post)} />
          </div>
        ))}
      </div>

      <!-- View More Button -->
      <div class="section-footer">
        <Button variant="outline" href="/blog" className="explore-more-btn">
          <span class="flex items-center gap-2">
            EXPLORE MORE ARTICLES
            <i class="fas fa-arrow-right text-sm transition-transform duration-300 group-hover:translate-x-1"></i>
          </span>
        </Button>
        
        <!-- Category Link -->
        {currentCategory && (
          <div class="category-suggestion">
            <p class="suggestion-text">
              INTERESTED IN MORE {currentCategory.toUpperCase().replace('-', ' ')}? 
              <a href={`/blog/categories/${currentCategory.toLowerCase().replace(/\s+/g, '-')}`} class="category-link">
                VIEW ALL {currentCategory.toUpperCase().replace('-', ' ')} ARTICLES
              </a>
            </p>
          </div>
        )}
      </div>
    </div>
  </section>
)}

<!-- No Related Posts Fallback -->
{relatedPosts.length === 0 && (
  <section class={`related-posts-section empty-state ${className}`}>
    <div class="max-w-4xl mx-auto px-4 py-16 text-center">
      <div class="empty-content">
        <div class="empty-icon">
          <i class="fas fa-compass text-4xl text-blue-600"></i>
        </div>
        <h2 class="empty-title">DISCOVER MORE ARTICLES</h2>
        <p class="empty-description">
          Explore our full collection of tech insights and industry analysis.
        </p>
        <Button variant="primary" href="/blog" className="empty-action-btn">
          <i class="fas fa-newspaper mr-2"></i>
          BROWSE ALL ARTICLES
        </Button>
      </div>
    </div>
  </section>
)}

<style>
  /* CSS Custom Properties for Consistent Design */
  :root {
    --tinkbyte-radius: 0px;
    --tinkbyte-radius-sm: 0px;
    --tinkbyte-radius-md: 0px;
    --tinkbyte-radius-lg: 0px;
    --tinkbyte-radius-card: 0px;
    --tinkbyte-radius-button: 0px;
  }

  /* Related Posts Section */
  .related-posts-section {
    font-family: "Space Grotesk", sans-serif;
    background: var(--color-bg-secondary);
    border-top: 2px solid var(--color-border);
  }

  .related-posts-section.empty-state {
    background: var(--color-bg-primary);
  }

  /* Section Header */
  .section-header {
    text-align: center;
    margin-bottom: 3rem;
  }

  .section-title {
    font-size: 2rem;
    font-weight: 800;
    color: var(--color-text-primary);
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .section-subtitle {
    font-size: 1rem;
    color: var(--color-text-secondary);
    max-width: 2xl;
    margin: 0 auto;
    line-height: 1.6;
  }

  /* Related Articles Grid */
  .related-articles-grid {
    display: grid;
    gap: 2rem;
    margin-bottom: 3rem;
  }

  /* Dynamic grid based on count */
  .related-articles-grid[data-count="1"] {
    grid-template-columns: 1fr;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
  }

  .related-articles-grid[data-count="2"] {
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    max-width: 800px;
    margin-left: auto;
    margin-right: auto;
  }

  .related-articles-grid[data-count="3"],
  .related-articles-grid[data-count="4"],
  .related-articles-grid[data-count="5"],
  .related-articles-grid[data-count="6"] {
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  }

  .related-article-wrapper {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.6s ease forwards;
    animation-delay: var(--animation-delay, 0s);
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Section Footer */
  .section-footer {
    text-align: center;
  }

  .explore-more-btn {
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 700;
    margin-bottom: 2rem;
  }

  .category-suggestion {
    margin-top: 1.5rem;
  }

  .suggestion-text {
    font-size: 0.875rem;
    color: var(--color-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 600;
  }

  .category-link {
    color: var(--color-text-secondary);
    text-decoration: underline;
    transition: color 0.3s ease;
    margin-left: 0.5rem;
  }

  .category-link:hover {
    color: #243788;
  }

  /* Empty State */
  .empty-content {
    background: var(--color-bg-primary);
    border: 2px solid var(--color-border);
    border-radius: var(--tinkbyte-radius-card);
    padding: 3rem 2rem;
    position: relative;
    overflow: hidden;
  }

  .empty-content::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: url('/images/pattern.svg') repeat;
    opacity: 0.03;
    pointer-events: none;
  }

  .empty-icon {
    margin-bottom: 1.5rem;
    position: relative;
    z-index: 1;
  }

  .empty-title {
    font-size: 1.5rem;
    font-weight: 800;
    color: var(--color-text-primary);
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    position: relative;
    z-index: 1;
  }

  .empty-description {
    font-size: 1rem;
    color: var(--color-text-secondary);
    line-height: 1.6;
    margin-bottom: 2rem;
    position: relative;
    z-index: 1;
  }

  .empty-action-btn {
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 700;
    position: relative;
    z-index: 1;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .related-articles-grid {
      grid-template-columns: 1fr !important;
      max-width: none !important;
    }

    .section-title {
      font-size: 1.5rem;
      flex-direction: column;
      gap: 0.5rem;
    }

    .section-title i {
      margin-right: 0;
    }
  }

  /* Hover Effects */
  .related-article-wrapper {
    transition: transform 0.3s ease;
  }

  .related-article-wrapper:hover {
    transform: translateY(-4px);
  }

  /* Button Hover Effects */
  .explore-more-btn:hover .fas.fa-arrow-right {
    transform: translateX(4px);
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Staggered animation for related articles
    const relatedWrappers = document.querySelectorAll('.related-article-wrapper');
    
    relatedWrappers.forEach((wrapper, index) => {
      (wrapper as HTMLElement).style.setProperty('--animation-delay', `${index * 0.1}s`);
    });

    // Intersection Observer for scroll animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px',
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          (entry.target as HTMLElement).style.opacity = '1';
          (entry.target as HTMLElement).style.transform = 'translateY(0)';
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    relatedWrappers.forEach((wrapper) => {
      observer.observe(wrapper);
    });

    // Analytics tracking for related posts
    const relatedLinks = document.querySelectorAll('.related-article-wrapper a[href^="/blog/"]');
    relatedLinks.forEach(link => {
      link.addEventListener('click', () => {
        if (typeof window !== 'undefined' && 'gtag' in window) {
          (window as any).gtag('event', 'related_post_click', {
            event_category: 'engagement',
            event_label: (link as HTMLAnchorElement).href,
          });
        }
      });
    });
  });
</script>