---
export interface Props {
  postSlug: string;
  postTitle: string;
}

const { postSlug, postTitle } = Astro.props;
---

<!-- Floating Reaction Bar - TinkByte Style -->
<div class="reaction-actions-sidebar" id="reaction-actions" data-post-slug={postSlug}>
  <div class="actions-content">
    <button class="action-btn like-btn" data-reaction="like" title="Like this article">
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
        <path d="M8 14s-6-3.5-6-8c0-2.5 2-4.5 4.5-4.5C7.5 1.5 8 2 8 2s.5-.5 1.5-.5C12 1.5 14 3.5 14 6c0 4.5-6 8-6 8z" stroke="currentColor" stroke-width="2" fill="none"/>
      </svg>
      <span class="reaction-count">0</span>
    </button>
    
    <button class="action-btn secondary save-btn" data-reaction="save" title="Save for later">
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
        <path d="M3 2v12l5-3 5 3V2a1 1 0 0 0-1-1H4a1 1 0 0 0-1 1z" stroke="currentColor" stroke-width="2" fill="none"/>
      </svg>
      <span>Save</span>
    </button>
    
    <button class="action-btn secondary share-btn" data-reaction="share" title="Share article">
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
        <path d="M12 5l3 3-3 3M3 8h12M8 1v6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
      </svg>
      <span>Share</span>
    </button>
    
    <button class="action-btn secondary comment-btn" data-reaction="comment" title="Jump to comments">
      <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
        <path d="M14 2H2a1 1 0 0 0-1 1v8a1 1 0 0 0 1 1h3l3 3 3-3h3a1 1 0 0 0 1-1V3a1 1 0 0 0-1-1z" stroke="currentColor" stroke-width="2" fill="none"/>
      </svg>
      <span>Talk</span>
    </button>
  </div>
</div>

<style>
  /* Reaction Actions Sidebar - Matching Quick Actions Style */
  .reaction-actions-sidebar {
    position: fixed;
    right: 2rem;
    top: 50%;
    transform: translateY(-50%);
    z-index: 50;
    background: var(--color-bg-primary);
    border: 2px solid var(--color-border);
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    opacity: 0;
    visibility: hidden;
  }

  .reaction-actions-sidebar.visible {
    opacity: 1;
    visibility: visible;
  }

  /* Updated hidden state - less aggressive */
  .reaction-actions-sidebar.hidden {
    transform: translateY(-50%) translateX(50px);
    opacity: 0.7;
  }

  /* Force visibility during normal reading - desktop only */
  @media (min-width: 1025px) {
    .reaction-actions-sidebar.visible:not(.hidden) {
      opacity: 1 !important;
      visibility: visible !important;
      transform: translateY(-50%) translateX(0) !important;
    }
  }

  :global(.dark) .reaction-actions-sidebar {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .actions-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: center;
  }

  .action-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
    padding: 0.75rem;
    border: 2px solid #243788;
    background: #243788;
    color: white;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: inherit;
    min-width: 60px;
  }

  .action-btn:hover {
    background: white;
    color: #243788;
  }

  .action-btn.secondary {
    background: white;
    color: #243788;
  }

  .action-btn.secondary:hover {
    background: #243788;
    color: white;
  }

  .action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  /* Active states for reactions */
  .like-btn.active {
    background: #ef4444;
    border-color: #ef4444;
    color: white;
  }

  .like-btn.active:hover {
    background: white;
    color: #ef4444;
  }

  .like-btn.active svg path {
    fill: currentColor;
    stroke: currentColor;
  }

  .save-btn.active {
    background: #10b981;
    border-color: #10b981;
    color: white;
  }

  .save-btn.active:hover {
    background: white;
    color: #10b981;
  }

  .save-btn.active svg path {
    fill: currentColor;
    stroke: currentColor;
  }

  .reaction-count {
    font-size: 0.75rem;
    font-weight: 600;
    min-width: 20px;
    text-align: center;
  }

  /* Responsive Design - Fixed */
  @media (max-width: 1024px) {
    .reaction-actions-sidebar {
      position: fixed;
      bottom: 2rem;
      right: 1rem;
      left: 1rem;
      top: auto;
      transform: none;
      flex-direction: row;
      justify-content: center;
      margin-bottom: 0;
      opacity: 1 !important;
      visibility: visible !important;
    }
    
    .actions-content {
      flex-direction: row;
      gap: 1rem;
      width: 100%;
      justify-content: space-around;
    }

    /* Disable hiding on tablet/mobile */
    .reaction-actions-sidebar.hidden {
      transform: none !important;
      opacity: 1 !important;
      visibility: visible !important;
    }
  }

  @media (max-width: 768px) {
    .reaction-actions-sidebar {
      bottom: 1.5rem;
      right: 0.75rem;
      left: 0.75rem;
      padding: 0.75rem;
    }
    
    .actions-content {
      gap: 0.75rem;
    }

    .action-btn {
      min-width: 50px;
      padding: 0.5rem;
      font-size: 0.6875rem;
    }

    .action-btn svg {
      width: 14px;
      height: 14px;
    }
  }

  @media (max-width: 480px) {
    .reaction-actions-sidebar {
      bottom: 1rem;
      right: 0.5rem;
      left: 0.5rem;
      padding: 0.5rem;
    }
    
    .actions-content {
      gap: 0.5rem;
    }

    .action-btn {
      min-width: 45px;
      padding: 0.375rem;
    }

    .action-btn span {
      font-size: 0.625rem;
    }

    .action-btn svg {
      width: 12px;
      height: 12px;
    }
  }

  /* Animation for heart beat */
  @keyframes heartBeat {
    0% { transform: scale(1); }
    25% { transform: scale(1.2); }
    50% { transform: scale(1); }
    75% { transform: scale(1.1); }
    100% { transform: scale(1); }
  }

  .like-btn.animate {
    animation: heartBeat 0.6s ease-in-out;
  }

  /* Toast notification styles */
  .toast-notification {
    position: fixed;
    top: 2rem;
    right: 2rem;
    background: #10b981;
    color: white;
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    z-index: 1002;
    border: 2px solid #10b981;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    animation: slideInRight 0.3s ease;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  :global(.dark) .toast-notification {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const reactionBar = document.querySelector(".reaction-actions-sidebar") as HTMLElement;
    if (!reactionBar) return;

    const postSlug = reactionBar.getAttribute("data-post-slug");
    if (!postSlug) return;

    // Show/hide based on content area only - ALWAYS visible while reading
    const showReactionBar = () => {
      const scrollY = window.scrollY;
      const windowHeight = window.innerHeight;
      const documentHeight = document.documentElement.scrollHeight;
      
      // Find main content area
      const mainContent = document.querySelector('main') || 
                         document.querySelector('article') || 
                         document.querySelector('.post-content') ||
                         document.querySelector('.content');
      
      if (mainContent) {
        const contentRect = mainContent.getBoundingClientRect();
        const contentTop = scrollY + contentRect.top;
        
        // Show when user starts reading content
        const showThreshold = Math.max(200, contentTop - 100);
        // Hide only at very bottom of page
        const hideThreshold = documentHeight - windowHeight - 100;
        
        if (scrollY > showThreshold && scrollY < hideThreshold) {
          reactionBar.classList.add("visible");
        } else {
          reactionBar.classList.remove("visible");
        }
      } else {
        // Fallback
        const showThreshold = 200;
        const hideThreshold = documentHeight - windowHeight - 100;
        
        if (scrollY > showThreshold && scrollY < hideThreshold) {
          reactionBar.classList.add("visible");
        } else {
          reactionBar.classList.remove("visible");
        }
      }
    };

    // Only hide on very fast scrolling, then show again quickly
    let lastScrollY = window.scrollY;
    let scrollTimeout: NodeJS.Timeout;

    window.addEventListener('scroll', () => {
      if (window.innerWidth <= 1024) return;
      
      const currentScrollY = window.scrollY;
      const scrollSpeed = Math.abs(currentScrollY - lastScrollY);
      
      clearTimeout(scrollTimeout);
      
      // Only hide on very fast scrolling
      if (scrollSpeed > 50 && currentScrollY > lastScrollY) {
        reactionBar.classList.add('hidden');
        
        // Show again quickly
        scrollTimeout = setTimeout(() => {
          reactionBar.classList.remove('hidden');
        }, 500);
      } else {
        reactionBar.classList.remove('hidden');
      }
      
      lastScrollY = currentScrollY;
    }, { passive: true });

    // Main visibility control
    showReactionBar();
    window.addEventListener("scroll", showReactionBar, { passive: true });

    // Show immediately if already in content
    setTimeout(showReactionBar, 100);

    // Load saved reactions from localStorage
    const savedReactions = JSON.parse(localStorage.getItem("tinkbyte-reactions") || "{}");
    const postReactions = savedReactions[postSlug] || {};

    // Initialize UI based on saved state
    Object.keys(postReactions).forEach((reaction) => {
      if (postReactions[reaction]) {
        const btn = reactionBar.querySelector(`[data-reaction="${reaction}"]`) as HTMLButtonElement;
        if (btn) {
          btn.classList.add("active");
        }
      }
    });

    // Handle reaction clicks
    reactionBar.addEventListener("click", (e) => {
      const target = e.target as HTMLElement;
      const btn = target.closest(".action-btn") as HTMLButtonElement;
      if (!btn) return;

      const reaction = btn.getAttribute("data-reaction");
      if (!reaction) return;

      const isActive = btn.classList.contains("active");

      // Handle different reaction types
      switch (reaction) {
        case "like":
          toggleLike(btn, isActive);
          break;
        case "save":
          toggleSave(btn, isActive);
          break;
        case "share":
          handleShare();
          break;
        case "comment":
          scrollToComments();
          break;
      }

      // Save state (except for share and comment)
      if (!["share", "comment"].includes(reaction)) {
        saveReactionState(reaction, !isActive);
      }
    });

    function toggleLike(btn: HTMLButtonElement, isActive: boolean) {
      const countEl = btn.querySelector(".reaction-count") as HTMLElement;
      if (!countEl) return;

      let count = parseInt(countEl.textContent || "0") || 0;

      if (isActive) {
        btn.classList.remove("active");
        count = Math.max(0, count - 1);
      } else {
        btn.classList.add("active");
        count += 1;
        
        // Add animation
        btn.classList.add("animate");
        setTimeout(() => btn.classList.remove("animate"), 600);
      }

      countEl.textContent = count.toString();
    }

    function toggleSave(btn: HTMLButtonElement, isActive: boolean) {
      if (isActive) {
        btn.classList.remove("active");
        showToast("Removed from saved articles");
      } else {
        btn.classList.add("active");
        showToast("Article saved for later");
      }
    }

    function handleShare() {
      if (navigator.share) {
        navigator.share({
          title: document.title,
          url: window.location.href,
        }).catch(() => copyToClipboard());
      } else {
        copyToClipboard();
      }
    }

    function copyToClipboard() {
      navigator.clipboard?.writeText(window.location.href)
        .then(() => showToast("Link copied to clipboard!"))
        .catch(() => {
          // Fallback
          const textArea = document.createElement("textarea");
          textArea.value = window.location.href;
          document.body.appendChild(textArea);
          textArea.select();
          document.execCommand("copy");
          document.body.removeChild(textArea);
          showToast("Link copied!");
        });
    }

    function showToast(message: string) {
      const existingToast = document.querySelector(".toast-notification");
      if (existingToast) existingToast.remove();

      const toast = document.createElement("div");
      toast.className = "toast-notification";
      toast.textContent = message;
      document.body.appendChild(toast);
      
      setTimeout(() => toast.remove(), 3000);
    }

    function scrollToComments() {
      const commentsSection = document.querySelector("#giscus-container") || 
                            document.querySelector(".comments-section-enhanced");
      if (commentsSection) {
        commentsSection.scrollIntoView({ behavior: "smooth" });
        showToast("Scrolled to comments");
      }
    }

    function saveReactionState(reaction: string, isActive: boolean) {
      if (!postSlug) return;

      const savedReactions = JSON.parse(localStorage.getItem("tinkbyte-reactions") || "{}");
      if (!savedReactions[postSlug]) {
        savedReactions[postSlug] = {};
      }
      savedReactions[postSlug][reaction] = isActive;
      localStorage.setItem("tinkbyte-reactions", JSON.stringify(savedReactions));
    }

    // Handle orientation change
    window.addEventListener("orientationchange", () => {
      setTimeout(showReactionBar, 100);
    });

    // Handle window resize
    window.addEventListener("resize", () => {
      setTimeout(showReactionBar, 100);
    });
  });
</script>