---
export interface Props {
  audioUrl: string;
  title: string;
  duration?: string;
  transcript?: string;
  downloadUrl?: string;
}

const { audioUrl, title, duration, transcript, downloadUrl } = Astro.props;
---

<div class="audio-player" data-audio-url={audioUrl}>
  <div class="audio-controls">
    <button class="play-button" data-action="play">
      <svg
        class="play-icon"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M14.828 14.828a4 4 0 01-5.656 0M9 9l3 3 3-3M9 15l3-3 3-3"></path>
      </svg>
      <svg
        class="pause-icon hidden"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M10 9v6m4-6v6"></path>
      </svg>
    </button>

    <div class="audio-info">
      <div class="audio-title">ðŸŽ§ Listen to this article</div>
      <div class="audio-meta">
        <span class="audio-duration">{duration || "Unknown duration"}</span>
        <span class="audio-status">Ready to play</span>
      </div>
    </div>
  </div>

  <div class="audio-progress">
    <div class="progress-bar">
      <div class="progress-fill" style="width: 0%"></div>
    </div>
    <div class="time-display">
      <span class="current-time">0:00</span>
      <span class="total-time">{duration || "0:00"}</span>
    </div>
  </div>

  <audio preload="metadata" class="audio-element">
    <source src={audioUrl} type="audio/mpeg" />
    Your browser does not support audio playback.
  </audio>
</div>

<style>
  .audio-player {
    background: white;
    border: 1px solid #e9ecef;
    border-radius: var(--tinkbyte-radius-card);
    padding: 1.5rem;
    transition: all 0.3s ease;
  }

  :global(.dark) .audio-player {
    background: rgb(17, 24, 39);
    border-color: rgb(55, 65, 81);
  }

  .audio-controls {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .play-button {
    width: 3rem;
    height: 3rem;
    border: none;
    border-radius: var(--tinkbyte-radius-card);
    background: rgb(36, 55, 136);
    color: white;
    display: flex;
    align-items: center;
    justify-content: center;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .play-button:hover {
    background: rgb(26, 43, 92);
    transform: scale(1.05);
  }

  .play-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .play-button svg {
    width: 1.25rem;
    height: 1.25rem;
  }

  .audio-info {
    flex: 1;
  }

  .audio-title {
    font-weight: 600;
    color: #111827;
    margin-bottom: 0.25rem;
    transition: color 0.3s ease;
  }

  :global(.dark) .audio-title {
    color: rgb(243, 244, 246);
  }

  .audio-meta {
    display: flex;
    gap: 1rem;
    font-size: 0.875rem;
    color: #6b7280;
    transition: color 0.3s ease;
  }

  :global(.dark) .audio-meta {
    color: rgb(156, 163, 175);
  }

  .audio-duration {
    font-weight: 500;
  }

  .audio-status {
    opacity: 0.8;
  }

  .audio-progress {
    margin-top: 1rem;
  }

  .progress-bar {
    width: 100%;
    height: 6px;
    background: #e9ecef;
    border-radius: 3px;
    margin-bottom: 0.5rem;
    cursor: pointer;
    overflow: hidden;
    transition: background-color 0.3s ease;
  }

  :global(.dark) .progress-bar {
    background: rgb(55, 65, 81);
  }

  .progress-fill {
    height: 100%;
    background: rgb(36, 55, 136);
    transition: width 0.1s ease;
    border-radius: 3px;
  }

  .time-display {
    display: flex;
    justify-content: space-between;
    font-size: 0.75rem;
    color: #6b7280;
    transition: color 0.3s ease;
  }

  :global(.dark) .time-display {
    color: rgb(156, 163, 175);
  }

  .current-time {
    font-weight: 500;
  }

  .hidden {
    display: none;
  }

  /* Loading state */
  .audio-player.loading .audio-status::after {
    content: "...";
    animation: dots 1.5s infinite;
  }

  @keyframes dots {
    0%,
    20% {
      content: "";
    }
    40% {
      content: ".";
    }
    60% {
      content: "..";
    }
    80%,
    100% {
      content: "...";
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const audioPlayers = document.querySelectorAll(".audio-player");

    audioPlayers.forEach((player: Element) => {
      const audioUrl = player.getAttribute("data-audio-url");
      const playButton = player.querySelector(
        ".play-button"
      ) as HTMLButtonElement;
      const playIcon = player.querySelector(".play-icon") as HTMLElement;
      const pauseIcon = player.querySelector(".pause-icon") as HTMLElement;
      const progressFill = player.querySelector(
        ".progress-fill"
      ) as HTMLElement;
      const progressBar = player.querySelector(".progress-bar") as HTMLElement;
      const currentTimeEl = player.querySelector(
        ".current-time"
      ) as HTMLElement;
      const totalTimeEl = player.querySelector(".total-time") as HTMLElement;
      const audioStatusEl = player.querySelector(
        ".audio-status"
      ) as HTMLElement;
      const audioElement = player.querySelector(
        ".audio-element"
      ) as HTMLAudioElement;

      if (!audioElement || !audioUrl) return;

      let isPlaying = false;
      let duration = 0;

      // Format time helper
      const formatTime = (seconds: number): string => {
        const mins = Math.floor(seconds / 60);
        const secs = Math.floor(seconds % 60);
        return `${mins}:${secs.toString().padStart(2, "0")}`;
      };

      // Audio event listeners
      audioElement.addEventListener("loadedmetadata", () => {
        duration = audioElement.duration;
        if (totalTimeEl) totalTimeEl.textContent = formatTime(duration);
        if (audioStatusEl) audioStatusEl.textContent = "Ready to play";
        (player as HTMLElement).classList.remove("loading");
      });

      audioElement.addEventListener("timeupdate", () => {
        if (duration > 0) {
          const progress = (audioElement.currentTime / duration) * 100;
          if (progressFill) progressFill.style.width = `${progress}%`;
          if (currentTimeEl)
            currentTimeEl.textContent = formatTime(audioElement.currentTime);
        }
      });

      audioElement.addEventListener("ended", () => {
        isPlaying = false;
        if (playIcon) playIcon.classList.remove("hidden");
        if (pauseIcon) pauseIcon.classList.add("hidden");
        if (audioStatusEl) audioStatusEl.textContent = "Finished";
        if (progressFill) progressFill.style.width = "0%";
        if (currentTimeEl) currentTimeEl.textContent = "0:00";
      });

      audioElement.addEventListener("error", (e: Event) => {
        console.error("Audio loading error:", e);
        if (audioStatusEl) audioStatusEl.textContent = "Error loading audio";
        if (playButton) playButton.disabled = true;
      });

      // Play/pause functionality
      if (playButton) {
        playButton.addEventListener("click", async () => {
          try {
            if (isPlaying) {
              audioElement.pause();
              isPlaying = false;
              if (playIcon) playIcon.classList.remove("hidden");
              if (pauseIcon) pauseIcon.classList.add("hidden");
              if (audioStatusEl) audioStatusEl.textContent = "Paused";
            } else {
              (player as HTMLElement).classList.add("loading");
              if (audioStatusEl) audioStatusEl.textContent = "Loading";

              await audioElement.play();
              isPlaying = true;
              if (playIcon) playIcon.classList.add("hidden");
              if (pauseIcon) pauseIcon.classList.remove("hidden");
              if (audioStatusEl) audioStatusEl.textContent = "Playing";
              (player as HTMLElement).classList.remove("loading");
            }
          } catch (error) {
            console.error("Audio playback error:", error);
            if (audioStatusEl) audioStatusEl.textContent = "Playback error";
            (player as HTMLElement).classList.remove("loading");
          }
        });
      }

      // Progress bar click to seek
      if (progressBar) {
        progressBar.addEventListener("click", (e: MouseEvent) => {
          if (duration > 0) {
            const rect = progressBar.getBoundingClientRect();
            const clickX = e.clientX - rect.left;
            const clickPercent = clickX / rect.width;
            const seekTime = clickPercent * duration;
            audioElement.currentTime = seekTime;
          }
        });
      }

      // Initialize loading state
      (player as HTMLElement).classList.add("loading");
      if (audioStatusEl) audioStatusEl.textContent = "Loading audio...";
    });
  });
</script>
