---
export interface Props {
  url: string;
  title: string;
  description?: string;
  className?: string;
}

const { url, title, description = "", className = "" } = Astro.props;
---

<div class={`share-buttons ${className}`}>
  <h4 class="share-title">Share this article</h4>

  <div class="share-buttons-grid">
    <!-- Twitter/X -->
    <button
      class="share-button twitter"
      data-platform="twitter"
      data-url={url}
      data-text={`${title} ${url}`}
      aria-label="Share on Twitter"
    >
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
        <path
          d="M18.244 2.25h3.308l-7.227 8.26 8.502 11.24H16.17l-5.214-6.817L4.99 21.75H1.68l7.73-8.835L1.254 2.25H8.08l4.713 6.231zm-1.161 17.52h1.833L7.084 4.126H5.117z"
        ></path>
      </svg>
      <span>Twitter</span>
    </button>

    <!-- LinkedIn -->
    <button
      class="share-button linkedin"
      data-platform="linkedin"
      data-url={url}
      data-title={title}
      aria-label="Share on LinkedIn"
    >
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
        <path
          d="M20.447 20.452h-3.554v-5.569c0-1.328-.027-3.037-1.852-3.037-1.853 0-2.136 1.445-2.136 2.939v5.667H9.351V9h3.414v1.561h.046c.477-.9 1.637-1.85 3.37-1.85 3.601 0 4.267 2.37 4.267 5.455v6.286zM5.337 7.433c-1.144 0-2.063-.926-2.063-2.065 0-1.138.92-2.063 2.063-2.063 1.14 0 2.064.925 2.064 2.063 0 1.139-.925 2.065-2.064 2.065zm1.782 13.019H3.555V9h3.564v11.452zM22.225 0H1.771C.792 0 0 .774 0 1.729v20.542C0 23.227.792 24 1.771 24h20.451C23.2 24 24 23.227 24 22.271V1.729C24 .774 23.2 0 22.222 0h.003z"
        ></path>
      </svg>
      <span>LinkedIn</span>
    </button>

    <!-- Facebook -->
    <button
      class="share-button facebook"
      data-platform="facebook"
      data-url={url}
      aria-label="Share on Facebook"
    >
      <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
        <path
          d="M24 12.073c0-6.627-5.373-12-12-12s-12 5.373-12 12c0 5.99 4.388 10.954 10.125 11.854v-8.385H7.078v-3.47h3.047V9.43c0-3.007 1.792-4.669 4.533-4.669 1.312 0 2.686.235 2.686.235v2.953H15.83c-1.491 0-1.956.925-1.956 1.874v2.25h3.328l-.532 3.47h-2.796v8.385C19.612 23.027 24 18.062 24 12.073z"
        ></path>
      </svg>
      <span>Facebook</span>
    </button>

    <!-- Email -->
    <button
      class="share-button email"
      data-platform="email"
      data-subject={title}
      data-body={`Check out this article: ${title}\n\n${description}\n\n${url}`}
      aria-label="Share via Email"
    >
      <svg
        class="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
        ></path>
      </svg>
      <span>Email</span>
    </button>

    <!-- Copy Link -->
    <button
      class="share-button copy"
      data-platform="copy"
      data-url={url}
      aria-label="Copy link to clipboard"
    >
      <svg
        class="w-5 h-5"
        fill="none"
        stroke="currentColor"
        viewBox="0 0 24 24"
      >
        <path
          stroke-linecap="round"
          stroke-linejoin="round"
          stroke-width="2"
          d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z"
        ></path>
      </svg>
      <span class="copy-text">Copy Link</span>
    </button>
  </div>
</div>

<style>
  .share-buttons {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 0.75rem;
    padding: 1.5rem;
    margin: 2rem 0;
  }

  :global(.dark) .share-buttons {
    background: rgb(17, 24, 39);
    border-color: rgb(55, 65, 81);
  }

  .share-title {
    font-size: 1.125rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 1rem;
    text-align: center;
  }

  :global(.dark) .share-title {
    color: rgb(243, 244, 246);
  }

  .share-buttons-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(120px, 1fr));
    gap: 0.75rem;
  }

  .share-button {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    padding: 0.75rem 1rem;
    border: 1px solid #e5e7eb;
    border-radius: 0.5rem;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    text-decoration: none;
  }

  :global(.dark) .share-button {
    background: rgb(31, 41, 55);
    border-color: rgb(55, 65, 81);
    color: rgb(209, 213, 219);
  }

  .share-button:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
  }

  .share-button.twitter:hover {
    background: #1da1f2;
    color: white;
    border-color: #1da1f2;
  }

  .share-button.linkedin:hover {
    background: #0077b5;
    color: white;
    border-color: #0077b5;
  }

  .share-button.facebook:hover {
    background: #1877f2;
    color: white;
    border-color: #1877f2;
  }

  .share-button.email:hover {
    background: #6b7280;
    color: white;
    border-color: #6b7280;
  }

  .share-button.copy:hover {
    background: #059669;
    color: white;
    border-color: #059669;
  }

  .share-button.copy.copied {
    background: #10b981;
    color: white;
    border-color: #10b981;
  }

  @media (max-width: 640px) {
    .share-buttons-grid {
      grid-template-columns: repeat(2, 1fr);
    }
  }
</style>

<script>
  // Declare gtag as optional global function
  declare global {
    interface Window {
      gtag?: (...args: any[]) => void;
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    const shareButtons = document.querySelectorAll(".share-button");

    shareButtons.forEach((button: Element) => {
      button.addEventListener("click", async (e: Event) => {
        e.preventDefault();

        const btn = e.currentTarget as HTMLButtonElement;
        const platform = btn.dataset.platform;
        const url = btn.dataset.url || window.location.href;
        const title = btn.dataset.title || document.title;
        const text = btn.dataset.text || "";

        const platformName =
          btn
            .getAttribute("aria-label")
            ?.replace("Share on ", "")
            .replace("Share via ", "")
            .replace("Copy link to clipboard", "Link") || platform;

        try {
          switch (platform) {
            case "twitter":
              const twitterText = btn.dataset.text || `${title} ${url}`;
              window.open(
                `https://twitter.com/intent/tweet?text=${encodeURIComponent(twitterText)}`,
                "_blank",
                "width=600,height=400"
              );
              break;

            case "linkedin":
              window.open(
                `https://www.linkedin.com/sharing/share-offsite/?url=${encodeURIComponent(url)}`,
                "_blank",
                "width=600,height=400"
              );
              break;

            case "facebook":
              window.open(
                `https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(url)}`,
                "_blank",
                "width=600,height=400"
              );
              break;

            case "email":
              const subject = btn.dataset.subject || title;
              const body =
                btn.dataset.body ||
                `Check out this article: ${title}\n\n${url}`;
              window.location.href = `mailto:?subject=${encodeURIComponent(subject)}&body=${encodeURIComponent(body)}`;
              break;

            case "copy":
              await navigator.clipboard.writeText(url);
              const copyText = btn.querySelector(".copy-text") as HTMLElement;
              const originalText = copyText.textContent;

              btn.classList.add("copied");
              copyText.textContent = "Copied!";

              setTimeout(() => {
                btn.classList.remove("copied");
                copyText.textContent = originalText;
              }, 2000);
              break;

            default:
              // Try native sharing API if available
              if (navigator.share) {
                await navigator.share({
                  title: title,
                  text: text,
                  url: url,
                });
              }
              break;
          }

          // Track sharing event (if analytics is available)
          if (typeof window.gtag !== "undefined") {
            window.gtag("event", "share", {
              method: platformName,
              content_type: "article",
              item_id: url,
            });
          }
        } catch (error) {
          console.error("Error sharing:", error);

          // Fallback to copying URL
          if (platform !== "copy") {
            try {
              await navigator.clipboard.writeText(url);
              alert("Link copied to clipboard!");
            } catch (clipboardError) {
              console.error("Clipboard error:", clipboardError);
            }
          }
        }
      });
    });
  });
</script>
