---
// src/components/ui/Header.astro
import { SITE } from "../../config/site";
import Logo from "./Logo.astro";
import ThemeToggle from "./ThemeToggle.astro";
import Button from "./Button.astro";

// Use your actual navigation structure
const navigation = [
  { name: "ARTICLES", href: "/blog" },
  { name: "CATEGORIES", href: "/blog/categories" },
  { name: "AUDIO", href: "/audio" },
  { name: "COMMUNITY", href: "/community" },
  { name: "CONTACT", href: "/contact" },
];
---

<header
  class="sticky top-0 z-50 bg-white/95 dark:bg-zinc-900/95 backdrop-blur-md border-b border-zinc-200/50 dark:border-zinc-800/50 transition-all duration-300"
>
  <!-- Top Bar - Magazine Style -->
  <div
    class="border-b border-zinc-100 dark:border-zinc-800/50 bg-zinc-50/50 dark:bg-zinc-800/20"
  >
    <div class="max-w-7xl mx-auto px-4 sm:px-6">
      <div
        class="flex items-center justify-between py-2 text-xs uppercase tracking-wider"
      >
        <div class="flex items-center gap-4 text-zinc-600 dark:text-zinc-400">
          <span class="flex items-center gap-1">
            <span class="w-2 h-2 bg-green-500 rounded-full animate-pulse"
            ></span>
            {SITE.newsletter.description.toUpperCase()}
          </span>
          <span class="hidden sm:block">|</span>
          <span class="hidden sm:block">
            {SITE.newsletter.frequency?.toUpperCase()}
          </span>
        </div>
        <div class="flex items-center gap-4">
          <a
            href="/newsletter"
            class="text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100 transition-colors"
          >
            SUBSCRIBE
          </a>
          <span>|</span>
          <a
            href="/rss.xml"
            class="text-zinc-600 dark:text-zinc-400 hover:text-zinc-900 dark:hover:text-zinc-100 transition-colors"
            aria-label="RSS Feed"
          >
            RSS
          </a>
        </div>
      </div>
    </div>
  </div>

  <!-- Main Header -->
  <div class="py-4 px-4 sm:px-6 max-w-7xl mx-auto">
    <div class="flex items-center justify-between">
      <!-- Logo -->
      <div class="flex-shrink-0">
        <Logo size="default" />
      </div>

      <!-- Desktop Navigation -->
      <nav
        class="hidden md:flex items-center space-x-8 ml-12 flex-1"
        aria-label="Main navigation"
      >
        {
          navigation.map((item) => (
            <a
              href={item.href}
              class="relative font-medium text-sm text-zinc-700 dark:text-zinc-300 hover:text-zinc-900 dark:hover:text-zinc-100 transition-colors tracking-wide uppercase group"
            >
              {item.name}
              <span class="absolute bottom-0 left-0 w-0 h-0.5 bg-zinc-900 dark:bg-zinc-100 transition-all duration-300 group-hover:w-full" />
            </a>
          ))
        }
      </nav>

      <!-- Desktop Right Side -->
      <div class="hidden md:flex items-center space-x-4">
        <ThemeToggle />
        <Button
          variant="primary"
          size="sm"
          href="/newsletter"
          className="ml-4 rounded-sm font-medium text-sm tracking-wide uppercase"
        >
          GET {SITE.newsletter.name.toUpperCase()}
        </Button>
      </div>

      <!-- Mobile Controls -->
      <div class="flex items-center space-x-3 md:hidden">
        <ThemeToggle />
        <button
          id="mobile-menu-toggle"
          class="p-2 rounded-md text-zinc-700 dark:text-zinc-300 hover:text-zinc-900 dark:hover:text-zinc-100 hover:bg-zinc-100 dark:hover:bg-zinc-800 transition-colors focus:outline-none focus:ring-2 focus:ring-zinc-500 focus:ring-offset-2"
          aria-label="Toggle mobile menu"
          aria-expanded="false"
        >
          <svg
            id="menu-icon"
            xmlns="http://www.w3.org/2000/svg"
            class="h-5 w-5 transition-transform duration-200"
            fill="none"
            viewBox="0 0 24 24"
            stroke="currentColor"
          >
            <path
              stroke-linecap="round"
              stroke-linejoin="round"
              stroke-width="2"
              d="M4 6h16M4 12h16M4 18h16"></path>
          </svg>
        </button>
      </div>
    </div>

    <!-- Mobile Menu -->
    <nav
      id="mobile-menu"
      class="hidden md:hidden mt-4 pt-4 border-t border-zinc-200 dark:border-zinc-800"
      aria-label="Mobile navigation"
    >
      <div class="flex flex-col space-y-4">
        {
          navigation.map((item) => (
            <a
              href={item.href}
              class="font-medium text-sm text-zinc-700 dark:text-zinc-300 hover:text-zinc-900 dark:hover:text-zinc-100 transition-colors py-2 tracking-wide uppercase"
            >
              {item.name}
            </a>
          ))
        }
        <div class="pt-4 border-t border-zinc-200 dark:border-zinc-800">
          <Button
            variant="primary"
            size="md"
            href="/newsletter"
            className="w-full rounded-sm font-medium text-sm tracking-wide uppercase"
          >
            GET {SITE.newsletter.name.toUpperCase()}
          </Button>
        </div>
      </div>
    </nav>
  </div>
</header>

<script>
  function initMobileMenu() {
    const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
    const mobileMenu = document.getElementById("mobile-menu");
    const menuIcon = document.getElementById("menu-icon");

    if (!mobileMenuToggle || !mobileMenu || !menuIcon) return;

    const closeMenu = () => {
      mobileMenu.classList.add("hidden");
      mobileMenuToggle.setAttribute("aria-expanded", "false");
      menuIcon.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16" />`;
    };

    const openMenu = () => {
      mobileMenu.classList.remove("hidden");
      mobileMenuToggle.setAttribute("aria-expanded", "true");
      menuIcon.innerHTML = `<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />`;
    };

    mobileMenuToggle.addEventListener("click", () => {
      const isHidden = mobileMenu.classList.contains("hidden");
      isHidden ? openMenu() : closeMenu();
    });

    // Close on link click
    mobileMenu.querySelectorAll("a").forEach((link) => {
      link.addEventListener("click", closeMenu);
    });

    // Close on outside click
    document.addEventListener("click", (event) => {
      const target = event.target as Element;
      if (
        !mobileMenuToggle.contains(target) &&
        !mobileMenu.contains(target) &&
        !mobileMenu.classList.contains("hidden")
      ) {
        closeMenu();
      }
    });

    // Close on escape key
    document.addEventListener("keydown", (event) => {
      if (event.key === "Escape" && !mobileMenu.classList.contains("hidden")) {
        closeMenu();
      }
    });
  }

  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", initMobileMenu);
  } else {
    initMobileMenu();
  }
</script>
