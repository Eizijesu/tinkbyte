---
// src/components/ui/Header.astro
import Logo from "./Logo.astro";
import { SITE } from "../../config/site";
import { getCollection } from "astro:content";

// Navigation links
const navigationLinks = [
  { name: "Featured", href: "/blog" },
  { name: "Topics", href: "#", isDropdown: true },
  { name: "Newsletter", href: "/newsletter" },
  { name: "Audio", href: "/podcast" },
];

// Try to get topics from CMS, fallback to hardcoded
let topicsData: any;
try {
  const allTopicsData = await getCollection("allTopics");
  topicsData = allTopicsData[0]?.data?.topics;
} catch (error) {
  console.warn("Could not load topics from CMS, using fallback");
}

const fallbackTopics = [
  {
    name: "Build Thinking",
    href: "/blog/categories/build-thinking",
    description: "From concept to working product",
  },
  {
    name: "AI Evolution",
    href: "/blog/categories/ai-evolution",
    description: "Practical AI integration stories",
  },
  {
    name: "Product Strategy",
    href: "/blog/categories/product-strategy",
    description: "Roadmap decisions and prioritization",
  },
  {
    name: "Startup Insight",
    href: "/blog/categories/startup-insight",
    description: "Early-stage execution signals",
  },
  {
    name: "Developer Tools",
    href: "/blog/categories/developer-tools",
    description: "Toolchains and infrastructure choices",
  },
  {
    name: "Fail / Iterate / Ship",
    href: "/blog/categories/fail-iterate-ship",
    description: "Process-focused iteration and learning from failure",
  },
];

const allTopics = topicsData || fallbackTopics;
const featuredTopics = allTopics.slice(0, 6);
---

<header class="tinkbyte-header" data-header>
  <nav class="main-nav">
    <div class="max-w-7xl mx-auto px-4">
      <div class="nav-container">
        <!-- Logo -->
        <div class="nav-logo">
          <Logo size="default" />
        </div>

        <!-- Desktop Navigation -->
        <div class="desktop-navigation">
          <div class="nav-primary">
            {
              navigationLinks.map((link) =>
                link.isDropdown ? (
                  <div class="nav-dropdown">
                    <button
                      class="nav-link dropdown-trigger"
                      aria-expanded="false"
                    >
                      {link.name}
                      <svg
                        class="dropdown-arrow"
                        width="12"
                        height="8"
                        viewBox="0 0 12 8"
                        fill="none"
                      >
                        <path
                          d="M1 1.5L6 6.5L11 1.5"
                          stroke="currentColor"
                          stroke-width="2"
                          stroke-linecap="round"
                          stroke-linejoin="round"
                        />
                      </svg>
                    </button>
                    <div class="dropdown-menu-compact">
                      <div class="dropdown-content-compact">
                        <div class="featured-topics">
                          <h3 class="section-title">Popular Topics</h3>
                          <div class="topics-list">
                            {featuredTopics.map((topic) => (
                              <a href={topic.href} class="topic-link-compact">
                                <span class="topic-name-compact">
                                  {topic.name}
                                </span>
                                <span class="topic-desc-compact">
                                  {topic.description}
                                </span>
                              </a>
                            ))}
                          </div>
                        </div>
                        <div class="dropdown-footer-compact">
                          <a href="/all-topics" class="view-all-link">
                            View All Topics
                          </a>
                          <a href="/community" class="community-link">
                            Join Community
                          </a>
                        </div>
                      </div>
                    </div>
                  </div>
                ) : (
                  <a href={link.href} class="nav-link">
                    {link.name}
                  </a>
                )
              )
            }
          </div>

          <div class="nav-secondary">
            <button
              class="search-toggle"
              aria-label="Search"
              data-action="search"
            >
              <svg
                class="w-5 h-5"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </button>

            <!-- Desktop Auth Section -->
            <div class="desktop-auth-container">
              <a href="/auth/signin" class="signin-button" data-signin-button
                >Sign In</a
              >

              <div
                class="user-avatar-container"
                data-desktop-avatar
                style="display: none;"
              >
                <button
                  class="avatar-wrapper"
                  data-action="toggle-desktop-dropdown"
                  aria-label="User menu"
                >
                  <img
                    src="/images/avatars/preset-1.svg"
                    alt="User Avatar"
                    class="user-avatar-image"
                    data-avatar-image
                  />
                  <div
                    class="notification-dot"
                    data-notification-dot
                    style="display: none;"
                  >
                  </div>
                  <div class="online-indicator"></div>
                </button>

                <div class="avatar-dropdown-menu" data-desktop-dropdown>
                  <div class="avatar-menu-content">
                    <div class="user-info-section">
                      <span class="user-display-name" data-user-name
                        >User Name</span
                      >
                      <a href="/profile" class="profile-link">View Profile</a>
                    </div>

                    <div
                      class="notifications-section"
                      data-notifications-section
                    >
                      <div class="notifications-header">
                        <h4 class="notifications-title">Notifications</h4>
                        <button
                          class="mark-all-read-btn"
                          data-action="mark-all-read"
                          style="display: none;"
                        >
                          Mark all read
                        </button>
                      </div>
                      <div class="notifications-list" data-notifications-list>
                        <!-- Notifications loaded dynamically -->
                      </div>
                    </div>

                    <div class="menu-divider"></div>
                    <button class="menu-signout-btn" data-action="sign-out">
                      <i class="fas fa-sign-out-alt"></i>
                      Sign Out
                    </button>
                  </div>
                </div>
              </div>
            </div>

            <a href="/subscribe" class="subscribe-button">Subscribe</a>
          </div>
        </div>

        <!-- Mobile Navigation -->
        <div class="mobile-navigation">
          <a href="/subscribe" class="mobile-subscribe-cta">SUBSCRIBE</a>

          <div class="mobile-controls">
            <div
              class="user-avatar-container mobile-avatar"
              data-mobile-avatar
              style="display: none;"
            >
              <button
                class="avatar-wrapper mobile-avatar-button"
                data-action="toggle-mobile-dropdown"
                aria-label="User menu"
              >
                <img
                  src="/images/avatars/preset-1.svg"
                  alt="User Avatar"
                  class="user-avatar-image"
                  data-mobile-avatar-image
                />
                <div
                  class="notification-dot"
                  data-mobile-notification-dot
                  style="display: none;"
                >
                </div>
                <div class="online-indicator"></div>
              </button>

              <div class="mobile-avatar-dropdown-menu" data-mobile-dropdown>
                <div class="mobile-avatar-menu-content">
                  <div class="mobile-user-info-section">
                    <span class="mobile-user-display-name" data-mobile-user-name
                      >User Name</span
                    >
                    <a href="/profile" class="mobile-profile-link"
                      >View Profile</a
                    >
                  </div>

                  <div
                    class="mobile-notifications-section"
                    data-mobile-notifications-section
                  >
                    <div class="notifications-header">
                      <h4 class="notifications-title">Notifications</h4>
                      <button
                        class="mark-all-read-btn"
                        data-action="mark-all-read-mobile"
                        style="display: none;"
                      >
                        Mark all read
                      </button>
                    </div>
                    <div
                      class="notifications-list"
                      data-mobile-notifications-list
                    >
                      <!-- Notifications loaded dynamically -->
                    </div>
                  </div>

                  <div class="mobile-menu-divider"></div>
                  <button
                    class="mobile-menu-signout-btn"
                    data-action="sign-out-mobile"
                  >
                    <i class="fas fa-sign-out-alt"></i>
                    Sign Out
                  </button>
                </div>
              </div>
            </div>

            <button
              class="mobile-menu-button"
              data-action="toggle-mobile-menu"
              aria-label="Open menu"
            >
              <svg
                class="menu-icon"
                fill="none"
                stroke="currentColor"
                viewBox="0 0 24 24"
              >
                <path
                  stroke-linecap="round"
                  stroke-linejoin="round"
                  stroke-width="2"
                  d="M4 6h16M4 12h16M4 18h16"></path>
              </svg>
            </button>
          </div>
        </div>
      </div>

      <!-- Mobile Menu -->
      <div class="mobile-menu hidden" data-mobile-menu>
        <div class="mobile-menu-content">
          <div class="mobile-nav-section">
            <a href="/blog" class="mobile-nav-link">Featured</a>
            <a href="/newsletter" class="mobile-nav-link">Newsletter</a>
            <a href="/podcast" class="mobile-nav-link">Audio</a>
          </div>

          <div class="mobile-topics-section">
            <h3 class="mobile-section-title">Quick Topics</h3>
            <div class="mobile-topics-grid">
              {
                featuredTopics.slice(0, 6).map((topic: any) => (
                  <a href={topic.href} class="mobile-topic-link">
                    {topic.name}
                  </a>
                ))
              }
            </div>
            <div class="mobile-topics-footer">
              <a href="/all-topics" class="mobile-view-all">View All Topics</a>
              <a href="/community" class="mobile-community">Community</a>
            </div>
          </div>

          <div class="mobile-auth-section" data-mobile-auth-section>
            <div class="mobile-signin-section" data-mobile-signin-section>
              <a href="/auth/signin" class="mobile-signin-button">Sign In</a>
            </div>
          </div>
        </div>
      </div>
    </div>
  </nav>
</header>

<style>
  /* CSS Custom Properties for Consistent Design */
  :root {
    --tinkbyte-radius: 0px;
    --tinkbyte-radius-sm: 0px;
    --tinkbyte-radius-md: 0px;
    --tinkbyte-radius-lg: 0px;
    --tinkbyte-radius-card: 0px;
    --tinkbyte-radius-button: 0px;

    /* Dropdown shared properties */
    --dropdown-bg: white;
    --dropdown-border: #243788;
    --dropdown-shadow: 0 20px 40px rgba(36, 55, 136, 0.15);
    --dropdown-padding: 0;
    --dropdown-z-index: 100;
  }

  :global(.dark) {
    --dropdown-bg: #0f172a;
    --dropdown-border: #475569;
    --dropdown-shadow: 0 20px 40px rgba(0, 0, 0, 0.5);
  }

  /* Base Header Styles */
  .tinkbyte-header {
    position: sticky;
    top: 0;
    z-index: 50;
    background: rgba(255, 255, 255, 0.95);
    border-bottom: 2px solid #e2e8f0;
    backdrop-filter: blur(10px);
    font-family: "Space Grotesk", sans-serif;
  }

  :global(.dark) .tinkbyte-header {
    background: rgba(15, 23, 42, 0.95);
    border-bottom-color: #334155;
  }

  .nav-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    height: 4.5rem;
  }

  .nav-logo {
    flex-shrink: 0;
  }

  /* DESKTOP NAVIGATION - Hidden on mobile */
  .desktop-navigation {
    display: flex;
    align-items: center;
    gap: 2rem;
    flex: 1;
    justify-content: space-between;
    margin-left: 2rem;
  }

  .nav-primary {
    display: flex;
    align-items: center;
    gap: 2.5rem;
  }

  .nav-secondary {
    display: flex;
    align-items: center;
    gap: 1rem;
  }

  /* MOBILE NAVIGATION - Hidden on desktop */
  .mobile-navigation {
    display: none;
    align-items: center;
    gap: 1rem;
  }

  .mobile-controls {
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  /* Perfect responsive visibility */
  @media (max-width: 768px) {
    .desktop-navigation {
      display: none !important;
    }

    .mobile-navigation {
      display: flex !important;
    }

    .nav-container {
      height: 4rem;
    }
  }

  @media (min-width: 769px) {
    .mobile-navigation {
      display: none !important;
    }

    .desktop-navigation {
      display: flex !important;
    }
  }

  /* Navigation Links - Desktop Only */
  .nav-link {
    font-family: "Space Grotesk", sans-serif;
    color: #1e293b;
    text-decoration: none;
    font-weight: 600;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: all 0.3s ease;
    padding: 0.75rem 0;
    position: relative;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .nav-link::after {
    content: "";
    position: absolute;
    bottom: 0;
    left: 0;
    width: 0;
    height: 3px;
    background: #243788;
    transition: width 0.3s ease;
  }

  .nav-link:hover::after {
    width: 100%;
  }

  .nav-link:hover {
    color: #243788;
    transform: translateY(-1px);
  }

  .nav-link.active::after {
    width: 100%;
  }

  .nav-link.active {
    color: #243788;
  }

  :global(.dark) .nav-link {
    color: #e2e8f0;
  }

  :global(.dark) .nav-link::after {
    background: #b4bce1;
  }

  :global(.dark) .nav-link:hover {
    color: #b4bce1;
  }

  :global(.dark) .nav-link.active {
    color: #b4bce1;
  }

  /* CONSOLIDATED DROPDOWN SYSTEM */

  /* Base dropdown styles - shared by all dropdowns */
  .dropdown-base {
    position: absolute;
    background: var(--dropdown-bg);
    border: 2px solid var(--dropdown-border);
    border-radius: var(--tinkbyte-radius-card);
    box-shadow: var(--dropdown-shadow);
    padding: var(--dropdown-padding);
    display: none;
    transition: all 0.3s ease;
    z-index: var(--dropdown-z-index);
  }

  /* Topics Dropdown - Desktop Only */
  .nav-dropdown {
    position: relative;
  }

  .dropdown-trigger {
    background: none;
    border: none;
    cursor: pointer;
    font-family: inherit;
  }

  .dropdown-arrow {
    transition: transform 0.3s ease;
  }

  .nav-dropdown:hover .dropdown-arrow {
    transform: rotate(180deg);
  }

  .dropdown-menu-compact {
    /* Extends dropdown-base */
    position: absolute;
    top: 100%;
    left: 50%;
    transform: translateX(-50%);
    background: var(--dropdown-bg);
    border: 2px solid var(--dropdown-border);
    border-radius: var(--tinkbyte-radius-card);
    box-shadow: var(--dropdown-shadow);
    padding: var(--dropdown-padding);
    width: 480px;
    max-width: 90vw;
    display: none;
    transition: all 0.3s ease;
    z-index: var(--dropdown-z-index);
  }

  .nav-dropdown:hover .dropdown-menu-compact {
    display: block;
    animation: fadeInUp 0.3s ease;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateX(-50%) translateY(10px);
    }
    to {
      opacity: 1;
      transform: translateX(-50%) translateY(0);
    }
  }

  .dropdown-content-compact {
    padding: 1.5rem;
  }

  .section-title {
    font-family: "Space Grotesk", sans-serif;
    font-size: 0.75rem;
    font-weight: 700;
    color: #243788;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    margin: 0 0 1rem 0;
    padding-bottom: 0.5rem;
    border-bottom: 2px solid #e2e8f0;
  }

  :global(.dark) .section-title {
    color: #e2e8f0;
    border-bottom-color: #334155;
  }

  .featured-topics {
    margin-bottom: 1.5rem;
  }

  .topics-list {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
  }

  .topic-link-compact {
    display: block;
    padding: 0.875rem;
    border: 2px solid transparent;
    border-radius: var(--tinkbyte-radius-button);
    text-decoration: none;
    transition: all 0.3s ease;
    background: #f8fafc;
  }

  :global(.dark) .topic-link-compact {
    background: #1e293b;
  }

  .topic-link-compact:hover {
    border-color: #243788;
    background: white;
    transform: translateY(-1px);
  }

  :global(.dark) .topic-link-compact:hover {
    border-color: #64748b;
    background: #334155;
  }

  .topic-name-compact {
    display: block;
    font-family: "Space Grotesk", sans-serif;
    font-size: 0.8125rem;
    font-weight: 700;
    color: #243788;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin-bottom: 0.25rem;
  }

  :global(.dark) .topic-name-compact {
    color: #e2e8f0;
  }

  .topic-desc-compact {
    display: block;
    font-size: 0.75rem;
    color: #64748b;
    line-height: 1.3;
  }

  :global(.dark) .topic-desc-compact {
    color: #94a3b8;
  }

  .dropdown-footer-compact {
    border-top: 2px solid #e2e8f0;
    padding-top: 1rem;
    display: flex;
    gap: 1rem;
  }

  :global(.dark) .dropdown-footer-compact {
    border-top-color: #334155;
  }

  .view-all-link,
  .community-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    text-decoration: none;
    padding: 0.75rem 1rem;
    border: 2px solid transparent;
    border-radius: var(--tinkbyte-radius-button);
    transition: all 0.3s ease;
    flex: 1;
    font-size: 0.8125rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .view-all-link {
    background: #243788;
    color: white;
    border-color: #243788;
  }

  .view-all-link:hover {
    background: white;
    color: #243788;
  }

  .community-link {
    background: transparent;
    color: #c9cddd;
    border-color: #606ca0;
  }

  .community-link:hover {
    background: #243788;
    color: white;
  }

  /* Desktop Controls */
  .search-toggle {
    background: none;
    border: 2px solid transparent;
    border-radius: var(--tinkbyte-radius-button);
    color: #64748b;
    cursor: pointer;
    padding: 0.5rem;
    transition: all 0.3s ease;
  }

  .search-toggle:hover {
    background: #f8fafc;
    color: #243788;
    border-color: #243788;
    transform: translateY(-1px);
  }

  :global(.dark) .search-toggle {
    color: #94a3b8;
  }

  :global(.dark) .search-toggle:hover {
    background: #334155;
    color: #b4bce1;
    border-color: #b4bce1;
  }

  /* UNIFIED USER AVATAR STYLES - Both Desktop & Mobile */
  .user-avatar-container {
    position: relative;
    cursor: pointer;
  }

  .avatar-wrapper {
    position: relative;
    width: 40px;
    height: 40px;
    transition: all 0.3s ease;
    background: none;
    border: none;
    cursor: pointer;
    padding: 0;
  }

  .user-avatar-image {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border: 2px solid #e2e8f0;
    border-radius: var(--tinkbyte-radius-card);
    transition: all 0.3s ease;
  }

  .avatar-wrapper:hover {
    transform: translateY(-1px);
  }

  .avatar-wrapper:hover .user-avatar-image {
    border-color: #243788;
    box-shadow: 0 4px 12px rgba(36, 55, 136, 0.25);
  }

  :global(.dark) .user-avatar-image {
    border-color: #334155;
  }

  :global(.dark) .avatar-wrapper:hover .user-avatar-image {
    border-color: #b4bce1;
    box-shadow: 0 4px 12px rgba(180, 188, 225, 0.25);
  }

  /* Mobile Avatar Button */
  .mobile-avatar-button {
    background: none;
    border: none;
    padding: 0;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
    width: 32px;
    height: 32px;
    transition: all 0.3s ease;
  }

  .mobile-avatar-button:hover {
    transform: translateY(-1px);
  }

  /* Notification Dot - Unified for Desktop & Mobile */
  .notification-dot {
    position: absolute;
    top: -2px;
    right: -2px;
    width: 12px;
    height: 12px;
    background: #ef4444;
    border: 2px solid white;
    border-radius: 50%;
    animation: pulse-notification 2s infinite;
    z-index: 2;
  }

  :global(.dark) .notification-dot {
    border-color: #0f172a;
  }

  @keyframes pulse-notification {
    0%,
    100% {
      opacity: 1;
      transform: scale(1);
    }
    50% {
      opacity: 0.8;
      transform: scale(1.15);
    }
  }

  /* Online Indicator */
  .online-indicator {
    position: absolute;
    bottom: -2px;
    right: -2px;
    width: 14px;
    height: 14px;
    background: #10b981;
    border: 2px solid white;
    border-radius: 50%;
    z-index: 1;
  }

  :global(.dark) .online-indicator {
    border-color: #0f172a;
  }

  /* Mobile Avatar Size */
  .mobile-avatar .avatar-wrapper {
    width: 32px;
    height: 32px;
  }

  .mobile-avatar .notification-dot {
    width: 10px;
    height: 10px;
  }

  .mobile-avatar .online-indicator {
    width: 12px;
    height: 12px;
  }

  /* CONSOLIDATED AVATAR DROPDOWN STYLES */

  /* Shared avatar dropdown content styles */
  .avatar-menu-content,
  .mobile-avatar-menu-content {
    padding: 1.5rem;
  }

  .user-info-section,
  .mobile-user-info-section {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
    margin-bottom: 1rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #e2e8f0;
  }

  :global(.dark) .user-info-section,
  :global(.dark) .mobile-user-info-section {
    border-bottom-color: #334155;
  }

  .user-display-name,
  .mobile-user-display-name {
    font-family: "Space Grotesk", sans-serif;
    font-size: 0.875rem;
    font-weight: 700;
    color: #1e293b;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  :global(.dark) .user-display-name,
  :global(.dark) .mobile-user-display-name {
    color: #f1f5f9;
  }

  .profile-link,
  .mobile-profile-link {
    color: #243788;
    text-decoration: none;
    font-size: 0.8125rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    transition: color 0.3s ease;
  }

  .profile-link:hover,
  .mobile-profile-link:hover {
    color: #1e2f6b;
  }

  :global(.dark) .profile-link,
  :global(.dark) .mobile-profile-link {
    color: #b4bce1;
  }

  :global(.dark) .profile-link:hover,
  :global(.dark) .mobile-profile-link:hover {
    color: #e2e8f0;
  }

  /* Desktop Avatar Dropdown - uses shared dropdown system */
  .avatar-dropdown-menu {
    position: absolute;
    top: calc(100% + 8px);
    right: 0;
    background: var(--dropdown-bg);
    border: 2px solid var(--dropdown-border);
    border-radius: var(--tinkbyte-radius-card);
    box-shadow: var(--dropdown-shadow);
    padding: var(--dropdown-padding);
    width: 320px;
    max-width: 90vw;
    display: none;
    transition: all 0.3s ease;
    z-index: var(--dropdown-z-index);
    max-height: 500px;
    overflow-y: auto;
  }

  /* Mobile Avatar Dropdown - uses shared dropdown system */
  .mobile-avatar-dropdown-menu {
    position: absolute;
    top: calc(100% + 8px);
    right: 0;
    background: var(--dropdown-bg);
    border: 2px solid var(--dropdown-border);
    border-radius: var(--tinkbyte-radius-card);
    box-shadow: var(--dropdown-shadow);
    padding: var(--dropdown-padding);
    width: 280px;
    max-width: calc(100vw - 2rem);
    display: none;
    opacity: 0;
    transform: translateY(-10px) scale(0.95);
    z-index: 1000;
    max-height: 400px;
    overflow-y: auto;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
  }

  /* Show state - when .show class is added */
  .mobile-avatar-dropdown-menu.show {
    display: block !important;
    opacity: 1 !important;
    transform: translateY(0) scale(1) !important;
  }

  /* Desktop dropdown - click behavior */
  .user-avatar-container .avatar-dropdown-menu {
    display: none !important;
  }

  .user-avatar-container.dropdown-open .avatar-dropdown-menu {
    display: block !important;
    animation: fadeInUp 0.3s ease;
  }

  .mobile-avatar {
    position: relative;
  }

  /* Notifications Section in Avatar Dropdown */
  .notifications-section,
  .mobile-notifications-section {
    margin-bottom: 1rem;
  }

  .notifications-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 0.75rem;
  }

  .notifications-title {
    font-family: "Space Grotesk", sans-serif;
    font-size: 0.75rem;
    font-weight: 700;
    color: #243788;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    margin: 0;
  }

  :global(.dark) .notifications-title {
    color: #e2e8f0;
  }

  .mark-all-read-btn {
    background: none;
    border: 1px solid #64748b;
    border-radius: var(--tinkbyte-radius-button);
    color: #64748b;
    font-size: 0.6875rem;
    cursor: pointer;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    font-weight: 600;
    padding: 0.25rem 0.5rem;
    transition: all 0.2s ease;
    font-family: "Space Grotesk", sans-serif;
  }

  .mark-all-read-btn:hover {
    background: #243788;
    color: white;
    border-color: #243788;
  }

  :global(.dark) .mark-all-read-btn {
    color: #94a3b8;
    border-color: #94a3b8;
  }

  :global(.dark) .mark-all-read-btn:hover {
    background: #b4bce1;
    color: #0f172a;
    border-color: #b4bce1;
  }

  /* Loading Animation Styles */
  .notifications-list {
    max-height: 200px;
    overflow-y: auto;
    background: #f8fafc;
    border: 1px solid #e2e8f0;
    border-radius: var(--tinkbyte-radius-sm);
    padding: 0.5rem;
    position: relative;
  }

  :global(.dark) .notifications-list {
    background: #1e293b;
    border-color: #334155;
  }

  .notification-loading {
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    padding: 2rem 1rem;
    text-align: center;
    gap: 1rem;
  }

  .loading-spinner {
    width: 24px;
    height: 24px;
    border: 2px solid #e2e8f0;
    border-top: 2px solid #243788;
    border-radius: var(--tinkbyte-radius-sm);
    animation: spin 1s linear infinite;
    margin: 0 auto;
  }

  :global(.dark) .loading-spinner {
    border-color: #334155;
    border-top-color: #b4bce1;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .notification-loading p {
    color: #64748b;
    font-size: 0.875rem;
    margin: 0;
    font-weight: 500;
  }

  :global(.dark) .notification-loading p {
    color: #94a3b8;
  }

  .menu-divider,
  .mobile-menu-divider {
    height: 2px;
    background: #e2e8f0;
    margin: 1rem 0;
  }

  :global(.dark) .menu-divider,
  :global(.dark) .mobile-menu-divider {
    background: #334155;
  }

  .menu-signout-btn,
  .mobile-menu-signout-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    padding: 0.75rem 1rem;
    color: #ef4444;
    background: #fef2f2;
    border: 2px solid #ef4444;
    border-radius: var(--tinkbyte-radius-button);
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    cursor: pointer;
    font-family: inherit;
    width: 100%;
    transition: all 0.3s ease;
  }

  .menu-signout-btn:hover,
  .mobile-menu-signout-btn:hover {
    background: #ef4444;
    color: white;
  }

  :global(.dark) .menu-signout-btn,
  :global(.dark) .mobile-menu-signout-btn {
    background: #450a0a;
    border-color: #f87171;
    color: #f87171;
  }

  :global(.dark) .menu-signout-btn:hover,
  :global(.dark) .mobile-menu-signout-btn:hover {
    background: #f87171;
    color: #0f172a;
  }

  /* Desktop Auth Styles */
  .desktop-auth-container {
    position: relative;
  }

  .signin-button {
    font-family: "Space Grotesk", sans-serif;
    background: transparent;
    color: #243788;
    text-decoration: none;
    padding: 0.75rem 1.25rem;
    border: 2px solid #243788;
    border-radius: var(--tinkbyte-radius-button);
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: all 0.3s ease;
  }

  .signin-button:hover {
    background: #243788;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(36, 55, 136, 0.25);
  }

  :global(.dark) .signin-button {
    color: #b4bce1;
    border-color: #b4bce1;
  }

  :global(.dark) .signin-button:hover {
    background: #b4bce1;
    color: #0f172a;
  }

  .subscribe-button {
    font-family: "Space Grotesk", sans-serif;
    background: #243788;
    color: white;
    text-decoration: none;
    padding: 0.75rem 1.5rem;
    border: 2px solid #243788;
    border-radius: var(--tinkbyte-radius-button);
    font-size: 0.875rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: all 0.3s ease;
    box-shadow: 0 2px 8px rgba(36, 55, 136, 0.2);
  }

  .subscribe-button:hover {
    background: white;
    color: #243788;
    transform: translateY(-2px);
    box-shadow: 0 4px 15px rgba(36, 55, 136, 0.3);
  }

  :global(.dark) .subscribe-button {
    background: #b4bce1;
    color: #0f172a;
    border-color: #b4bce1;
  }

  :global(.dark) .subscribe-button:hover {
    background: transparent;
    color: #b4bce1;
  }

  /* MOBILE STYLES */
  .mobile-subscribe-cta {
    font-family: "Space Grotesk", sans-serif;
    background: #243788;
    color: white;
    text-decoration: none;
    padding: 0.625rem 1rem;
    border: 2px solid #243788;
    border-radius: var(--tinkbyte-radius-button);
    font-size: 0.75rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    text-align: center;
  }

  .mobile-subscribe-cta:hover {
    background: white;
    color: #243788;
    transform: translateY(-1px);
  }

  :global(.dark) .mobile-subscribe-cta {
    background: #b4bce1;
    color: #0f172a;
    border-color: #b4bce1;
  }

  :global(.dark) .mobile-subscribe-cta:hover {
    background: transparent;
    color: #b4bce1;
  }

  /* Mobile Menu Button */
  .mobile-menu-button {
    background: none;
    border: 2px solid transparent;
    border-radius: var(--tinkbyte-radius-button);
    color: #64748b;
    cursor: pointer;
    padding: 0.5rem;
    transition: all 0.3s ease;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .mobile-menu-button:hover {
    background: #f8fafc;
    color: #243788;
    border-color: #243788;
  }

  :global(.dark) .mobile-menu-button {
    color: #94a3b8;
  }

  :global(.dark) .mobile-menu-button:hover {
    background: #334155;
    color: #b4bce1;
    border-color: #b4bce1;
  }

  .menu-icon {
    width: 1.5rem;
    height: 1.5rem;
  }

  /* Mobile Menu Overlay */
  .mobile-menu {
    background: white;
    border-top: 2px solid #243788;
    backdrop-filter: blur(10px);
    background: rgba(255, 255, 255, 0.95);
    max-height: 70vh;
    overflow-y: auto;
  }

  :global(.dark) .mobile-menu {
    background: rgba(15, 23, 42, 0.95);
    border-top-color: #b4bce1;
  }

  .mobile-menu-content {
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .mobile-nav-section {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .mobile-nav-link {
    font-family: "Space Grotesk", sans-serif;
    padding: 0.75rem 1rem;
    color: #1e293b;
    text-decoration: none;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    border: 2px solid transparent;
    border-radius: var(--tinkbyte-radius-button);
    transition: all 0.3s ease;
    text-align: center;
  }

  .mobile-nav-link:hover {
    background: #f8fafc;
    color: #243788;
    border-color: #243788;
    transform: translateY(-1px);
  }

  :global(.dark) .mobile-nav-link {
    color: #e2e8f0;
  }

  :global(.dark) .mobile-nav-link:hover {
    background: #334155;
    color: #b4bce1;
    border-color: #b4bce1;
  }

  .mobile-topics-section {
    padding-top: 1.5rem;
    border-top: 2px solid #e2e8f0;
  }

  :global(.dark) .mobile-topics-section {
    border-top-color: #334155;
  }

  .mobile-section-title {
    font-family: "Space Grotesk", sans-serif;
    font-weight: 700;
    color: #243788;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-size: 0.875rem;
    margin-bottom: 1rem;
    text-align: center;
  }

  :global(.dark) .mobile-section-title {
    color: #b4bce1;
  }

  .mobile-topics-grid {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
    margin-bottom: 1rem;
  }

  .mobile-topic-link {
    font-family: "Space Grotesk", sans-serif;
    display: block;
    padding: 0.625rem 0.75rem;
    color: #1e293b;
    text-decoration: none;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    border: 2px solid transparent;
    border-radius: var(--tinkbyte-radius-button);
    transition: all 0.3s ease;
    background: #f8fafc;
    text-align: center;
  }

  :global(.dark) .mobile-topic-link {
    color: #e2e8f0;
    background: #334155;
  }

  .mobile-topic-link:hover {
    border-color: #243788;
    background: white;
    color: #243788;
  }

  :global(.dark) .mobile-topic-link:hover {
    border-color: #b4bce1;
    background: #475569;
    color: #b4bce1;
  }

  .mobile-topics-footer {
    display: flex;
    gap: 0.75rem;
    padding-top: 1rem;
    border-top: 1px solid #e2e8f0;
  }

  :global(.dark) .mobile-topics-footer {
    border-top-color: #475569;
  }

  .mobile-view-all,
  .mobile-community {
    font-family: "Space Grotesk", sans-serif;
    flex: 1;
    padding: 0.75rem;
    text-decoration: none;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    border: 2px solid;
    border-radius: var(--tinkbyte-radius-button);
    transition: all 0.3s ease;
    text-align: center;
    font-size: 0.8125rem;
  }

  .mobile-view-all {
    background: #243788;
    color: white;
    border-color: #243788;
  }

  .mobile-view-all:hover {
    background: white;
    color: #243788;
  }

  .mobile-community {
    background: transparent;
    color: #243788;
    border-color: #243788;
  }

  .mobile-community:hover {
    background: #243788;
    color: white;
  }

  /* Mobile Auth Section */
  .mobile-auth-section {
    padding-top: 1.5rem;
    border-top: 2px solid #e2e8f0;
  }

  :global(.dark) .mobile-auth-section {
    border-top-color: #334155;
  }

  .mobile-signin-button {
    font-family: "Space Grotesk", sans-serif;
    display: block;
    width: 100%;
    background: transparent;
    color: #243788;
    text-decoration: none;
    padding: 1rem 1.5rem;
    border: 2px solid #243788;
    border-radius: var(--tinkbyte-radius-button);
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    text-align: center;
    transition: all 0.3s ease;
  }

  .mobile-signin-button:hover {
    background: #243788;
    color: white;
    transform: translateY(-1px);
  }

  :global(.dark) .mobile-signin-button {
    color: #b4bce1;
    border-color: #b4bce1;
  }

  :global(.dark) .mobile-signin-button:hover {
    background: #b4bce1;
    color: #0f172a;
  }

  .hidden {
    display: none;
  }

  /* Notification Item Styles */
  .notification-item {
    padding: 0.75rem;
    border-bottom: 1px solid #e2e8f0;
    cursor: pointer;
    transition: background-color 0.2s ease;
  }

  :global(.dark) .notification-item {
    border-bottom-color: #334155;
  }

  .notification-item:last-child {
    border-bottom: none;
  }

  .notification-item:hover {
    background-color: #f1f5f9;
  }

  :global(.dark) .notification-item:hover {
    background-color: #1e293b;
  }

  .notification-item.unread {
    background-color: #eff6ff;
    position: relative;
  }

  :global(.dark) .notification-item.unread {
    background-color: #1e293b;
  }

  .notification-item.unread::before {
    content: "";
    position: absolute;
    left: 0;
    top: 0;
    bottom: 0;
    width: 3px;
    background-color: #3b82f6;
  }

  .notification-content {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
  }

  .notification-avatar {
    flex-shrink: 0;
    width: 32px;
    height: 32px;
    border-radius: var(--tinkbyte-radius-card);
  }

  .notification-text {
    flex: 1;
    min-width: 0;
  }

  .notification-message {
    font-size: 0.75rem;
    color: #1e293b;
    margin-bottom: 0.25rem;
    line-height: 1.4;
  }

  :global(.dark) .notification-message {
    color: #f1f5f9;
  }

  .notification-time {
    font-size: 0.6875rem;
    color: #64748b;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  :global(.dark) .notification-time {
    color: #94a3b8;
  }

  /* Empty State Styles */
  .notification-empty {
    padding: 2rem 1rem;
    text-align: center;
    color: #64748b;
  }

  :global(.dark) .notification-empty {
    color: #94a3b8;
  }

  .notification-empty p {
    font-size: 0.75rem;
    margin: 0;
  }

  /* Error State Styles */
  .notification-error {
    padding: 1rem;
    text-align: center;
    color: #ef4444;
  }

  :global(.dark) .notification-error {
    color: #f87171;
  }

  .notification-error p {
    font-size: 0.75rem;
    margin: 0;
  }

  /* Mobile Responsive Fine-tuning */
  @media (max-width: 640px) {
    .nav-container {
      height: 3.5rem;
      padding: 0 0.75rem;
    }

    .mobile-subscribe-cta {
      padding: 0.5rem 0.75rem;
      font-size: 0.6875rem;
    }

    .mobile-avatar .avatar-wrapper {
      width: 28px;
      height: 28px;
    }

    .mobile-avatar .notification-dot {
      width: 8px;
      height: 8px;
    }

    .mobile-avatar .online-indicator {
      width: 10px;
      height: 10px;
    }

    .mobile-menu-content {
      padding: 1rem 0.75rem;
    }

    .mobile-topics-grid {
      grid-template-columns: 1fr;
    }

    .mobile-avatar-dropdown-menu {
      width: 240px;
      right: -1rem;
    }
  }

  @media (max-width: 380px) {
    .mobile-subscribe-cta {
      padding: 0.375rem 0.5rem;
      font-size: 0.625rem;
    }

    .mobile-avatar-dropdown-menu {
      width: 220px;
      right: -1.5rem;
    }
  }

  /* Focus Styles */
  .nav-link:focus,
  .search-toggle:focus,
  .subscribe-button:focus,
  .mobile-menu-button:focus,
  .mobile-subscribe-cta:focus,
  .user-avatar-container:focus,
  .mobile-avatar-button:focus {
    outline: 3px solid #243788;
    outline-offset: 2px;
  }

  :global(.dark) .nav-link:focus,
  :global(.dark) .search-toggle:focus,
  :global(.dark) .subscribe-button:focus,
  :global(.dark) .mobile-menu-button:focus,
  :global(.dark) .mobile-subscribe-cta:focus,
  :global(.dark) .user-avatar-container:focus,
  :global(.dark) .mobile-avatar-button:focus {
    outline-color: #b4bce1;
  }
</style>

<script>
  import { authManager } from "../../lib/auth.js";
  import { headerStore } from "../../lib/stores/headerStore.js";
  import { getTimeAgo, getAvatarUrl } from "../../lib/utils/headerHelpers.js";

  export interface HeaderState {
    user: any;
    profile: any;
    notifications: any[];
    unreadCount: number;
    desktopDropdownOpen: boolean;
    mobileDropdownOpen: boolean;
    mobileMenuOpen: boolean;
    loading: boolean;
  }

  class HeaderController {
    private unsubscribes: (() => void)[] = [];
    private header: HTMLElement;

    constructor() {
      this.header = document.querySelector("[data-header]")!;
      this.initialize();
    }

    async initialize() {
      // **FIX 1: Load cached auth state IMMEDIATELY**
      const cachedAuth = authManager.getAuthStateSync();
      if (cachedAuth.user) {
        
        headerStore.setUser(cachedAuth.user, cachedAuth.profile);
      }

      // **FIX 2: Initialize auth in background (non-blocking)**
      authManager
        .initialize()
        .then(() => {
          
        })
        .catch((error) => {
          console.error("❌ Header: Auth initialization failed:", error);
        });

      // Subscribe to auth changes
      const authUnsub = authManager.onAuthChange((user, profile) => {
        console.log("🔄 Header: Auth state changed", {
          user: !!user,
          profile: !!profile,
        });
        headerStore.setUser(user, profile);
      });
      this.unsubscribes.push(authUnsub);

      // Subscribe to store changes
      const storeUnsub = headerStore.subscribe((state) => {
        this.updateUI(state);
      });
      this.unsubscribes.push(storeUnsub);

      // Setup event delegation
      this.setupEventListeners();

      // Setup cleanup
      window.addEventListener("beforeunload", () => this.cleanup());
    }

    private setupEventListeners() {
      // Use event delegation for all actions
      this.header.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;
        const action = target
          .closest("[data-action]")
          ?.getAttribute("data-action");

        if (!action) return;

        e.preventDefault();
        e.stopPropagation();

        switch (action) {
          case "search":
            window.location.href = "/search";
            break;
          case "toggle-desktop-dropdown":
            headerStore.toggleDesktopDropdown();
            break;
          case "toggle-mobile-dropdown":
            headerStore.toggleMobileDropdown();
            break;
          case "toggle-mobile-menu":
            headerStore.toggleMobileMenu();
            break;
          case "sign-out":
          case "sign-out-mobile":
            this.handleSignOut();
            break;
          case "mark-all-read":
          case "mark-all-read-mobile":
            headerStore.markAllNotificationsAsRead();
            break;
        }
      });

      // Click outside to close dropdowns
      document.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;

        if (
          !target.closest("[data-desktop-avatar]") &&
          !target.closest("[data-mobile-avatar]")
        ) {
          headerStore.closeAllDropdowns();
        }
      });

      // Topics dropdown (hover behavior)
      const topicsDropdown = this.header.querySelector(".nav-dropdown");
      if (topicsDropdown) {
        let hoverTimeout: NodeJS.Timeout;

        topicsDropdown.addEventListener("mouseenter", () => {
          clearTimeout(hoverTimeout);
          topicsDropdown
            .querySelector(".dropdown-menu-compact")
            ?.classList.add("show");
        });

        topicsDropdown.addEventListener("mouseleave", () => {
          hoverTimeout = setTimeout(() => {
            topicsDropdown
              .querySelector(".dropdown-menu-compact")
              ?.classList.remove("show");
          }, 300);
        });
      }
    }

    private updateUI(state: HeaderState) {
      // **FIX 3: Add loading state handling**
      if (state.loading && !state.user) {
        // Show neutral state during loading
        this.showLoadingUI();
        return;
      }

      // Update auth UI
      if (state.user) {
        this.showUserUI(state);
      } else {
        this.showSigninUI();
      }

      // Update dropdowns
      this.updateDropdowns(state);

      // Update mobile menu
      const mobileMenu = this.header.querySelector("[data-mobile-menu]");
      mobileMenu?.classList.toggle("hidden", !state.mobileMenuOpen);

      // Update notifications
      if (
        state.user &&
        (state.desktopDropdownOpen || state.mobileDropdownOpen)
      ) {
        this.renderNotifications(state);
      }
    }

    // **FIX 4: Add loading state UI**
    private showLoadingUI() {
      // Hide both signin and user UI during loading
      this.header
        .querySelector("[data-signin-button]")
        ?.setAttribute("style", "display: none");
      this.header
        .querySelector("[data-desktop-avatar]")
        ?.setAttribute("style", "display: none");
      this.header
        .querySelector("[data-mobile-avatar]")
        ?.setAttribute("style", "display: none");
      this.header
        .querySelector("[data-mobile-signin-section]")
        ?.setAttribute("style", "display: none");
    }

    private showUserUI(state: HeaderState) {
      const displayName = authManager.getDisplayName();
      const avatarUrl = getAvatarUrl(state.profile);

      // Desktop
      this.header
        .querySelector("[data-signin-button]")
        ?.setAttribute("style", "display: none");
      this.header
        .querySelector("[data-desktop-avatar]")
        ?.setAttribute("style", "display: block");

      const desktopAvatar = this.header.querySelector(
        "[data-avatar-image]"
      ) as HTMLImageElement;
      if (desktopAvatar) {
        desktopAvatar.src = avatarUrl;
        desktopAvatar.alt = `${displayName} Avatar`;
      }

      const desktopName = this.header.querySelector("[data-user-name]");
      if (desktopName) desktopName.textContent = displayName;

      // Mobile
      this.header
        .querySelector("[data-mobile-avatar]")
        ?.setAttribute("style", "display: block");
      this.header
        .querySelector("[data-mobile-signin-section]")
        ?.setAttribute("style", "display: none");

      const mobileAvatar = this.header.querySelector(
        "[data-mobile-avatar-image]"
      ) as HTMLImageElement;
      if (mobileAvatar) {
        mobileAvatar.src = avatarUrl;
        mobileAvatar.alt = `${displayName} Avatar`;
      }

      const mobileName = this.header.querySelector("[data-mobile-user-name]");
      if (mobileName) mobileName.textContent = displayName;

      // Update notification dots
      const showDots = state.unreadCount > 0;
      this.header
        .querySelector("[data-notification-dot]")
        ?.setAttribute("style", `display: ${showDots ? "block" : "none"}`);
      this.header
        .querySelector("[data-mobile-notification-dot]")
        ?.setAttribute("style", `display: ${showDots ? "block" : "none"}`);

      // Update mark all read buttons
      this.header
        .querySelector('[data-action="mark-all-read"]')
        ?.setAttribute("style", `display: ${showDots ? "block" : "none"}`);
      this.header
        .querySelector('[data-action="mark-all-read-mobile"]')
        ?.setAttribute("style", `display: ${showDots ? "block" : "none"}`);
    }

    private showSigninUI() {
      // Desktop
      this.header
        .querySelector("[data-signin-button]")
        ?.setAttribute("style", "display: inline-flex");
      this.header
        .querySelector("[data-desktop-avatar]")
        ?.setAttribute("style", "display: none");

      // Mobile
      this.header
        .querySelector("[data-mobile-avatar]")
        ?.setAttribute("style", "display: none");
      this.header
        .querySelector("[data-mobile-signin-section]")
        ?.setAttribute("style", "display: flex");
    }

    private updateDropdowns(state: HeaderState) {
      // Desktop dropdown
      const desktopAvatar = this.header.querySelector("[data-desktop-avatar]");
      desktopAvatar?.classList.toggle(
        "dropdown-open",
        state.desktopDropdownOpen
      );

      // Mobile dropdown
      const mobileDropdown = this.header.querySelector(
        "[data-mobile-dropdown]"
      );
      mobileDropdown?.classList.toggle("show", state.mobileDropdownOpen);
    }

    private renderNotifications(state: HeaderState) {
      const lists = [
        this.header.querySelector("[data-notifications-list]"),
        this.header.querySelector("[data-mobile-notifications-list]"),
      ];

      lists.forEach((list) => {
        if (!list) return;

        if (state.loading) {
          list.innerHTML = `
            <div class="notification-loading">
              <div class="loading-spinner"></div>
              <p>Loading notifications...</p>
            </div>
          `;
          return;
        }

        if (state.notifications.length === 0) {
          list.innerHTML = `
            <div class="notification-empty">
              <p>No notifications yet</p>
            </div>
          `;
          return;
        }

        list.innerHTML = state.notifications
          .map((notification) => {
            const isUnread = !notification.is_read;
            const timeAgo = getTimeAgo(new Date(notification.created_at));
            const commenterName =
              notification.comments?.profiles?.display_name || "Someone";
            const commenterAvatar = getAvatarUrl(
              notification.comments?.profiles
            );

            return `
            <div class="notification-item ${isUnread ? "unread" : ""}" data-notification-id="${notification.id}">
              <div class="notification-content">
                <img src="${commenterAvatar}" alt="${commenterName}" class="notification-avatar" />
                <div class="notification-text">
                  <div class="notification-message">
                    <strong>${commenterName}</strong> mentioned you
                  </div>
                  <div class="notification-time">${timeAgo}</div>
                </div>
              </div>
            </div>
          `;
          })
          .join("");

        // Add click handlers
        list.querySelectorAll(".notification-item").forEach((item) => {
          item.addEventListener("click", () => {
            const id = item.getAttribute("data-notification-id");
            if (id && item.classList.contains("unread")) {
              headerStore.markNotificationAsRead(id);
            }
          });
        });
      });
    }

    private async handleSignOut() {
      try {
        await authManager.signOut();
        window.location.href = "/";
      } catch (error) {
        console.error("Sign out failed:", error);
        window.location.href = "/";
      }
    }

    private cleanup() {
      this.unsubscribes.forEach((unsub) => unsub());
      headerStore.cleanup();
    }
  }

  // **FIX 5: Initialize immediately, don't wait for DOMContentLoaded**
  if (document.readyState === "loading") {
    document.addEventListener("DOMContentLoaded", () => {
      new HeaderController();
    });
  } else {
    // DOM already loaded
    new HeaderController();
  }
</script>
