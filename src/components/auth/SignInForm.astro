---
// src/components/auth/SignInForm.astro
---

<div class="auth-form">
  <div class="social-buttons">
    <button type="button" class="auth-btn google-btn" id="google-signin">
      <svg width="18" height="18" viewBox="0 0 24 24">
        <path
          fill="#4285F4"
          d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
        ></path>
        <path
          fill="#34A853"
          d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
        ></path>
        <path
          fill="#FBBC05"
          d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
        ></path>
        <path
          fill="#EA4335"
          d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
        ></path>
      </svg>
      Sign in with Google
    </button>

    <button type="button" class="auth-btn email-btn" id="email-signin">
      <svg
        width="18"
        height="18"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <path
          d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"
        ></path>
        <polyline points="22,6 12,13 2,6"></polyline>
      </svg>
      Sign in with Email
    </button>
  </div>

  <div class="auth-links">
    <p>
      Don't have an account? <a href="/auth/signup" class="auth-link">Sign Up</a
      >
    </p>
  </div>

  <!-- Email Form -->
  <form id="email-form" class="email-form" style="display: none;">
    <div class="form-group">
      <input
        type="email"
        id="email"
        name="email"
        class="form-input"
        placeholder="Email address"
        required
      />
    </div>

    <div class="form-group">
      <div class="password-input">
        <input
          type="password"
          id="password"
          name="password"
          class="form-input"
          placeholder="Password"
          required
        />
        <button type="button" class="password-toggle" id="password-toggle">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
            <circle cx="12" cy="12" r="3"></circle>
          </svg>
        </button>
      </div>
    </div>

    <button type="submit" class="auth-btn primary" id="signin-btn">
      <span class="btn-text">Sign In</span>
      <div class="btn-spinner" style="display: none;">
        <div class="square-spinner"></div>
      </div>
    </button>

    <div class="form-options">
      <a href="/auth/forgot-password" class="option-link">Forgot password?</a>
    </div>

    <button type="button" class="back-btn" id="back-btn">
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <line x1="19" y1="12" x2="5" y2="12"></line>
        <polyline points="12,19 5,12 12,5"></polyline>
      </svg>
      Back to options
    </button>
  </form>

  <!-- Messages -->
  <div class="toast-message" id="toast-message" style="display: none;">
    <div class="toast-content">
      <div class="toast-icon" id="toast-icon"></div>
      <span id="toast-text"></span>
    </div>
  </div>
</div>

<style>
  /* Same styles as SignUpForm - keeping consistent */
  .auth-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .social-buttons {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 0.6rem;
  }

  .auth-btn {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid #e2e8f0;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-family: inherit;
  }

  .auth-btn:hover {
    border-color: #d1d5db;
    background: #f9fafb;
  }

  .auth-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .auth-btn.primary {
    background: #243788;
    color: white;
    border-color: #243788;
  }

  .auth-btn.primary:hover:not(:disabled) {
    background: #1e2d6b;
    border-color: #1e2d6b;
  }

  .email-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-input {
    width: 100%;
    padding: 0.875rem;
    border: 2px solid #e2e8f0;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    transition: border-color 0.2s ease;
    font-family: inherit;
    box-sizing: border-box;
  }

  .form-input:focus {
    outline: none;
    border-color: #243788;
  }

  .form-input::placeholder {
    color: #9ca3af;
  }

  .password-input {
    position: relative;
  }

  .password-toggle {
    position: absolute;
    right: 0.875rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #9ca3af;
    cursor: pointer;
    padding: 0.25rem;
  }

  .password-toggle:hover {
    color: #243788;
  }

  .back-btn {
    background: none;
    border: 2px solid #e2e8f0;
    color: #64748b;
    padding: 0.5rem;
    font-size: 0.8125rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-family: inherit;
    transition: all 0.2s ease;
  }

  .back-btn:hover {
    border-color: #d1d5db;
    background: #f9fafb;
  }

  .auth-links {
    text-align: center;
    padding-top: 1rem;
    border-top: 2px solid #e2e8f0;
  }

  .auth-links p {
    color: #64748b;
    font-size: 0.875rem;
    margin: 0;
  }

  .auth-link {
    color: #243788;
    text-decoration: none;
    font-weight: 600;
  }

  .auth-link:hover {
    text-decoration: underline;
  }

  .form-options {
    text-align: center;
    margin-top: 0.5rem;
  }

  .option-link {
    color: #dfe1ec;
    font-size: 0.8125rem;
    text-decoration: none;
    font-family: inherit;
  }

  .option-link:hover {
    text-decoration: underline;
  }

  .btn-spinner {
    display: none;
    align-items: center;
    justify-content: center;
  }

  .square-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid white;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .toast-message {
    position: fixed;
    top: 2rem;
    left: 50%;
    transform: translateX(-50%) translateY(-20px);
    z-index: 9999;
    opacity: 0;
    transition: all 0.3s ease;
    max-width: 400px;
    width: 90%;
  }

  .toast-content {
    backdrop-filter: blur(16px);
    background: rgba(34, 197, 94, 0.1);
    border: 2px solid rgba(34, 197, 94, 0.3);
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: #16a34a;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .toast-content.error {
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
    color: #dc2626;
  }

  .toast-icon {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
  }

  /* Dark mode support2 */
  :global(.dark) .auth-btn {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .auth-btn:hover {
    border-color: rgb(75, 85, 99);
    background: rgb(30, 41, 59);
  }

  :global(.dark) .auth-btn.primary {
    background: #b4bce1;
    color: rgb(15, 23, 42);
    border-color: #b4bce1;
  }

  :global(.dark) .auth-btn.primary:hover:not(:disabled) {
    background: #9ca8d4;
    border-color: #9ca8d4;
  }

  :global(.dark) .form-input {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .form-input:focus {
    border-color: #b4bce1;
  }

  :global(.dark) .checkbox-custom {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
  }

  :global(.dark)
    .checkbox-label
    input[type="checkbox"]:checked
    + .checkbox-custom {
    background: #b4bce1;
    border-color: #b4bce1;
  }

  :global(.dark)
    .checkbox-label
    input[type="checkbox"]:checked
    + .checkbox-custom::after {
    color: rgb(15, 23, 42);
  }

  :global(.dark) .checkbox-text {
    color: rgb(148, 163, 184);
  }

  :global(.dark) .terms-link {
    color: #b4bce1;
  }

  :global(.dark) .back-btn {
    border-color: rgb(51, 65, 85);
    color: rgb(148, 163, 184);
  }

  :global(.dark) .back-btn:hover {
    border-color: rgb(75, 85, 99);
    background: rgb(30, 41, 59);
  }

  :global(.dark) .auth-links {
    border-top-color: rgb(51, 65, 85);
  }

  :global(.dark) .auth-links p {
    color: rgb(148, 163, 184);
  }

  :global(.dark) .auth-link {
    color: #b4bce1;
  }

  :global(.dark) .error-content {
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
  }

  :global(.dark) .success-content {
    background: rgba(34, 197, 94, 0.1);
    border-color: rgba(34, 197, 94, 0.3);
  }

  :global(.dark) .error-message p {
    color: #fca5a5;
  }

  :global(.dark) .success-message p {
    color: #86efac;
  }

  :global(.dark) .square-spinner {
    border-color: rgba(180, 188, 225, 0.3);
    border-top-color: #b4bce1;
  }

  /* Dark mode support */
  :global(.dark) .auth-btn {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .auth-btn:hover {
    border-color: rgb(75, 85, 99);
    background: rgb(30, 41, 59);
  }

  :global(.dark) .auth-btn.primary {
    background: #b4bce1;
    color: rgb(15, 23, 42);
    border-color: #b4bce1;
  }

  :global(.dark) .auth-btn.primary:hover:not(:disabled) {
    background: #9ca8d4;
    border-color: #9ca8d4;
  }

  :global(.dark) .form-input {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .form-input:focus {
    border-color: #b4bce1;
  }

  :global(.dark) .square-spinner {
    border-color: rgba(180, 188, 225, 0.3);
    border-top-color: #b4bce1;
  }

  @media (max-width: 480px) {
    .form-options {
      text-align: center;
    }
  }

  .square-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid white;
    background: transparent;
    animation: square-spin 1s linear infinite;
  }

  @keyframes square-spin {
    0% {
      transform: rotate(0deg);
    }
    25% {
      transform: rotate(90deg);
    }
    50% {
      transform: rotate(180deg);
    }
    75% {
      transform: rotate(270deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
</style>

<script>
  import { authManager } from "../../lib/auth.js";

  class SignInFormManager {
    private initialized: boolean = false;
    private socialButtons: HTMLElement | null = null;
    private authLinks: HTMLElement | null = null;
    private emailForm: HTMLFormElement | null = null;
    private emailSigninBtn: HTMLButtonElement | null = null;
    private backBtn: HTMLButtonElement | null = null;
    private googleBtn: HTMLButtonElement | null = null;
    private passwordToggle: HTMLButtonElement | null = null;
    private passwordInput: HTMLInputElement | null = null;
    private signinBtn: HTMLButtonElement | null = null;
    private toastMessage: HTMLElement | null = null;
    private toastText: HTMLElement | null = null;
    private toastIcon: HTMLElement | null = null;
    private redirectTo: string = "/profile";

    constructor() {
      this.init();
    }

    async init() {
      if (this.initialized) return;

      try {
        console.log("🔑 SignInForm: Initializing...");

        // Initialize auth manager
        await authManager.initialize();

        this.setupDOM();
        this.parseURLParams();
        this.setupEventListeners();

        this.initialized = true;
        console.log("🔑 SignInForm: Initialized successfully");
      } catch (error) {
        console.error("❌ SignInForm: Initialization failed:", error);
        this.showToast("Failed to initialize sign in form", "error");
      }
    }

    private setupDOM() {
      this.socialButtons = document.querySelector(
        ".social-buttons"
      ) as HTMLElement;
      this.authLinks = document.querySelector(".auth-links") as HTMLElement;
      this.emailForm = document.getElementById("email-form") as HTMLFormElement;
      this.emailSigninBtn = document.getElementById(
        "email-signin"
      ) as HTMLButtonElement;
      this.backBtn = document.getElementById("back-btn") as HTMLButtonElement;
      this.googleBtn = document.getElementById(
        "google-signin"
      ) as HTMLButtonElement;
      this.passwordToggle = document.getElementById(
        "password-toggle"
      ) as HTMLButtonElement;
      this.passwordInput = document.getElementById(
        "password"
      ) as HTMLInputElement;
      this.signinBtn = document.getElementById(
        "signin-btn"
      ) as HTMLButtonElement;
      this.toastMessage = document.getElementById(
        "toast-message"
      ) as HTMLElement;
      this.toastText = document.getElementById("toast-text") as HTMLElement;
      this.toastIcon = document.getElementById("toast-icon") as HTMLElement;
    }

    private parseURLParams() {
      const urlParams = new URLSearchParams(window.location.search);
      this.redirectTo = urlParams.get("redirect") || "/profile";
      const prefillEmail = urlParams.get("email") || "";
      const message = urlParams.get("message");

      if (prefillEmail) {
        const emailInput = document.getElementById("email") as HTMLInputElement;
        if (emailInput) emailInput.value = prefillEmail;
      }

      // Handle password reset success message
      if (message === "password-reset-complete") {
        setTimeout(() => {
          this.showToast(
            "Password reset successful! You can now sign in with your new password.",
            "success"
          );
        }, 500);
      }
    }

    private setupEventListeners() {
      this.emailSigninBtn?.addEventListener("click", () =>
        this.showEmailForm()
      );
      this.backBtn?.addEventListener("click", () => this.showInitialOptions());

      // Password toggle
      this.passwordToggle?.addEventListener("click", () => {
        if (!this.passwordInput || !this.passwordToggle) return;

        const type =
          this.passwordInput.type === "password" ? "text" : "password";
        this.passwordInput.type = type;

        this.passwordToggle.innerHTML =
          type === "text"
            ? '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/><line x1="1" y1="1" x2="23" y2="23"/></svg>'
            : '<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/><circle cx="12" cy="12" r="3"/></svg>';
      });

      this.googleBtn?.addEventListener("click", async () => {
        await this.handleGoogleSignIn();
      });

      this.emailForm?.addEventListener("submit", async (e) => {
        e.preventDefault();
        await this.handleEmailSignIn();
      });
    }

    private async handleGoogleSignIn() {
      if (!this.googleBtn) return;

      try {
        this.setButtonLoading(this.googleBtn, true);
        console.log("🔑 SignInForm: Google signin starting...");

        const result = await authManager.signInWithGoogle();

        if (!result.success) {
          throw new Error(result.error);
        }

        console.log("🔑 SignInForm: Google signin successful, redirecting...");
      } catch (error: any) {
        console.error("❌ SignInForm: Google signin error:", error);
        this.showToast(error.message || "Google sign in failed", "error");
        this.setButtonLoading(this.googleBtn, false);
      }
    }

    private async handleEmailSignIn() {
      if (!this.emailForm || !this.signinBtn) return;

      const formData = new FormData(this.emailForm);
      const email = formData.get("email") as string;
      const password = formData.get("password") as string;

      if (!email || !password) {
        this.showToast("Please fill in all fields", "error");
        return;
      }

      this.setButtonLoading(this.signinBtn, true);

      try {
        console.log("🔑 SignInForm: Email signin for:", email);

        const result = await authManager.signInWithEmail(email, password);

        if (!result.success) {
          throw new Error(result.error);
        }

        console.log("✅ SignInForm: Email signin successful");
        this.showToast("Sign in successful! Redirecting...");

        setTimeout(() => {
          window.location.href = this.redirectTo;
        }, 1000);
      } catch (error: any) {
        console.error("❌ SignInForm: Email signin error:", error);
        this.showToast(error.message || "Sign in failed", "error");
      } finally {
        this.setButtonLoading(this.signinBtn, false);
      }
    }

    private showEmailForm() {
      if (this.socialButtons) this.socialButtons.style.display = "none";
      if (this.authLinks) this.authLinks.style.display = "none";
      if (this.emailForm) this.emailForm.style.display = "flex";
    }

    private showInitialOptions() {
      if (this.socialButtons) this.socialButtons.style.display = "flex";
      if (this.authLinks) this.authLinks.style.display = "block";
      if (this.emailForm) this.emailForm.style.display = "none";
    }

    private setButtonLoading(button: HTMLButtonElement, isLoading: boolean) {
      const btnText = button.querySelector(".btn-text") as HTMLElement;
      const btnSpinner = button.querySelector(".btn-spinner") as HTMLElement;

      button.disabled = isLoading;
      if (btnText) btnText.style.display = isLoading ? "none" : "block";
      if (btnSpinner) btnSpinner.style.display = isLoading ? "flex" : "none";
    }

    private showToast(message: string, type: "success" | "error" = "success") {
      if (this.toastText && this.toastMessage && this.toastIcon) {
        this.toastText.textContent = message;
        this.toastIcon.innerHTML =
          type === "success"
            ? '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22,4 12,14.01 9,11.01"/></svg>'
            : '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><line x1="15" y1="9" x2="9" y2="15"/><line x1="9" y1="9" x2="15" y2="15"/></svg>';

        const toastContent = this.toastMessage.querySelector(
          ".toast-content"
        ) as HTMLElement;
        if (toastContent) {
          toastContent.className = `toast-content ${type === "error" ? "error" : ""}`;
        }

        this.toastMessage.style.display = "block";
        setTimeout(() => {
          if (this.toastMessage) {
            this.toastMessage.style.transform =
              "translateX(-50%) translateY(0)";
            this.toastMessage.style.opacity = "1";
          }
        }, 10);

        setTimeout(
          () => {
            if (this.toastMessage) {
              this.toastMessage.style.transform =
                "translateX(-50%) translateY(-20px)";
              this.toastMessage.style.opacity = "0";
              setTimeout(() => {
                if (this.toastMessage) this.toastMessage.style.display = "none";
              }, 300);
            }
          },
          type === "error" ? 5000 : 3000
        );
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new SignInFormManager();
  });
</script>
