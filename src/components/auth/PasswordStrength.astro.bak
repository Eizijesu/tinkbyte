---
// src/components/auth/PasswordStrength.astro
export interface Props {
  password: string;
  showDetails?: boolean;
}

const { password, showDetails = false } = Astro.props;
---

<div class="password-strength" id="password-strength">
  <div class="strength-bar">
    <div class="strength-fill" id="strength-fill"></div>
  </div>
  <div class="strength-info">
    <span class="strength-text" id="strength-text">Enter password</span>
    <span class="strength-score" id="strength-score"></span>
  </div>
  {
    showDetails && (
      <div
        class="strength-details"
        id="strength-details"
        style="display: none;"
      >
        <div class="entropy-info" id="entropy-info" />
        <div class="breach-info" id="breach-info" />
        <ul class="requirements-list" id="requirements-list" />
      </div>
    )
  }
</div>

<style>
  .password-strength {
    margin-top: 0.5rem;
  }

  .strength-bar {
    height: 4px;
    background: #e2e8f0;
    border-radius: 2px;
    overflow: hidden;
  }

  .strength-fill {
    height: 100%;
    width: 0%;
    transition: all 0.3s ease;
    border-radius: 2px;
  }

  .strength-info {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 0.25rem;
    font-size: 0.75rem;
  }

  .strength-text {
    font-weight: 500;
  }

  .strength-score {
    color: #64748b;
  }

  .strength-details {
    margin-top: 0.5rem;
    font-size: 0.75rem;
  }

  .entropy-info,
  .breach-info {
    margin-bottom: 0.25rem;
    padding: 0.25rem;
    border-radius: 4px;
  }

  .breach-info.compromised {
    background: rgba(239, 68, 68, 0.1);
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  .requirements-list {
    list-style: none;
    padding: 0;
    margin: 0;
  }

  .requirements-list li {
    padding: 0.125rem 0;
    display: flex;
    align-items: center;
    gap: 0.25rem;
  }

  .requirements-list li.met {
    color: #059669;
  }

  .requirements-list li.unmet {
    color: #dc2626;
  }

  :global(.dark) .strength-bar {
    background: rgb(51, 65, 85);
  }

  :global(.dark) .strength-score {
    color: rgb(148, 163, 184);
  }
</style>

<script>
  import { PasswordValidator } from "../../lib/security.js";

  class PasswordStrengthIndicator {
    private container: HTMLElement | null;
    private strengthFill: HTMLElement | null;
    private strengthText: HTMLElement | null;
    private strengthScore: HTMLElement | null;
    private strengthDetails: HTMLElement | null;
    private entropyInfo: HTMLElement | null;
    private breachInfo: HTMLElement | null;
    private requirementsList: HTMLElement | null;

    constructor(containerId: string) {
      this.container = document.getElementById(containerId);
      this.strengthFill = document.getElementById("strength-fill");
      this.strengthText = document.getElementById("strength-text");
      this.strengthScore = document.getElementById("strength-score");
      this.strengthDetails = document.getElementById("strength-details");
      this.entropyInfo = document.getElementById("entropy-info");
      this.breachInfo = document.getElementById("breach-info");
      this.requirementsList = document.getElementById("requirements-list");
    }

    async updateStrength(password: string) {
      if (!password) {
        this.reset();
        return;
      }

      try {
        const validation = await PasswordValidator.validateAdvanced(password);
        this.renderStrength(validation);
      } catch (error) {
        console.error("Password validation error:", error);
        // Fallback to basic validation
        const basicValidation = PasswordValidator.validate(password);
        this.renderBasicStrength(basicValidation);
      }
    }

    renderStrength(validation: any) {
      const { overallScore, strength, entropy, compromised, warnings } =
        validation;

      // Update strength bar
      if (this.strengthFill) {
        this.strengthFill.style.width = `${overallScore}%`;
        this.strengthFill.style.backgroundColor =
          this.getStrengthColor(strength);
      }

      // Update text
      if (this.strengthText) {
        this.strengthText.textContent = this.getStrengthLabel(strength);
        this.strengthText.style.color = this.getStrengthColor(strength);
      }

      if (this.strengthScore) {
        this.strengthScore.textContent = `${overallScore}/100`;
      }

      // Update details if available
      if (this.strengthDetails) {
        this.strengthDetails.style.display = "block";

        if (this.entropyInfo && entropy) {
          this.entropyInfo.innerHTML = `
            <strong>Entropy:</strong> ${entropy.entropy} bits 
            <span style="color: #64748b;">(${entropy.timeToBreak} to break)</span>
          `;
        }

        if (this.breachInfo) {
          if (compromised) {
            this.breachInfo.className = "breach-info compromised";
            this.breachInfo.innerHTML = `⚠️ Found in data breaches`;
          } else {
            this.breachInfo.className = "breach-info";
            this.breachInfo.innerHTML = `✅ Not found in known breaches`;
          }
        }

        if (this.requirementsList && warnings) {
          this.requirementsList.innerHTML = warnings
            .map((warning: string) => `<li class="unmet">❌ ${warning}</li>`)
            .join("");
        }
      }
    }

    renderBasicStrength(validation: any) {
      const { score, strength } = validation;
      const percentage = (score / 6) * 100;

      if (this.strengthFill) {
        this.strengthFill.style.width = `${percentage}%`;
        this.strengthFill.style.backgroundColor =
          this.getStrengthColor(strength);
      }

      if (this.strengthText) {
        this.strengthText.textContent = this.getStrengthLabel(strength);
        this.strengthText.style.color = this.getStrengthColor(strength);
      }

      if (this.strengthScore) {
        this.strengthScore.textContent = `${score}/6`;
      }
    }

    getStrengthColor(strength: string): string {
      const colors: Record<string, string> = {
        weak: "#dc2626",
        moderate: "#d97706",
        medium: "#d97706",
        strong: "#059669",
        very_strong: "#047857",
      };
      return colors[strength] || "#6b7280";
    }

    getStrengthLabel(strength: string): string {
      const labels: Record<string, string> = {
        weak: "Weak",
        moderate: "Moderate",
        medium: "Good",
        strong: "Strong",
        very_strong: "Very Strong",
      };
      return labels[strength] || "Unknown";
    }

    reset() {
      if (this.strengthFill) {
        this.strengthFill.style.width = "0%";
      }

      if (this.strengthText) {
        this.strengthText.textContent = "Enter password";
        this.strengthText.style.color = "#64748b";
      }

      if (this.strengthScore) {
        this.strengthScore.textContent = "";
      }

      if (this.strengthDetails) {
        this.strengthDetails.style.display = "none";
      }
    }
  }

  // Export for use in other components
  (window as any).PasswordStrengthIndicator = PasswordStrengthIndicator;
</script>
