---
// src/components/auth/SignUpForm.astro
---

<div class="auth-form">
  <!-- Initial Options -->
  <div class="auth-options" id="auth-options">
    <div class="social-buttons">
      <button type="button" class="auth-btn google-btn" id="google-signup">
        <svg width="18" height="18" viewBox="0 0 24 24">
          <path
            fill="#4285F4"
            d="M22.56 12.25c0-.78-.07-1.53-.2-2.25H12v4.26h5.92c-.26 1.37-1.04 2.53-2.21 3.31v2.77h3.57c2.08-1.92 3.28-4.74 3.28-8.09z"
          ></path>
          <path
            fill="#34A853"
            d="M12 23c2.97 0 5.46-.98 7.28-2.66l-3.57-2.77c-.98.66-2.23 1.06-3.71 1.06-2.86 0-5.29-1.93-6.16-4.53H2.18v2.84C3.99 20.53 7.7 23 12 23z"
          ></path>
          <path
            fill="#FBBC05"
            d="M5.84 14.09c-.22-.66-.35-1.36-.35-2.09s.13-1.43.35-2.09V7.07H2.18C1.43 8.55 1 10.22 1 12s.43 3.45 1.18 4.93l2.85-2.22.81-.62z"
          ></path>
          <path
            fill="#EA4335"
            d="M12 5.38c1.62 0 3.06.56 4.21 1.64l3.15-3.15C17.45 2.09 14.97 1 12 1 7.7 1 3.99 3.47 2.18 7.07l3.66 2.84c.87-2.6 3.3-4.53 6.16-4.53z"
          ></path>
        </svg>
        Sign up with Google
      </button>

      <button type="button" class="auth-btn email-btn" id="email-signup">
        <svg
          width="18"
          height="18"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path
            d="M4 4h16c1.1 0 2 .9 2 2v12c0 1.1-.9 2-2 2H4c-1.1 0-2-.9-2-2V6c0-1.1.9-2 2-2z"
          ></path>
          <polyline points="22,6 12,13 2,6"></polyline>
        </svg>
        Sign up with Email
      </button>
    </div>

    <div class="auth-links">
      <p>
        Already have an account? <a href="/auth/signin" class="auth-link"
          >Sign In</a
        >
      </p>
    </div>
  </div>

  <!-- Email Form -->
  <form id="email-form" class="email-form" style="display: none;">
    <div class="form-group">
      <input
        type="text"
        id="display-name"
        name="displayName"
        class="form-input"
        placeholder="Full name"
        required
      />
    </div>

    <div class="form-group">
      <input
        type="email"
        id="email"
        name="email"
        class="form-input"
        placeholder="Email address"
        required
      />
    </div>

    <div class="terms-section">
      <label class="checkbox-label">
        <input type="checkbox" id="terms-checkbox" required />
        <span class="checkbox-custom"></span>
        <span class="checkbox-text">
          I agree to the <a href="/terms" target="_blank" class="terms-link"
            >Terms of Service</a
          >
          and <a href="/privacy" target="_blank" class="terms-link"
            >Privacy Policy</a
          >
        </span>
      </label>
    </div>

    <button type="submit" class="auth-btn primary" id="signup-btn">
      <span class="btn-text">Create Account</span>
      <div class="btn-spinner" style="display: none;">
        <div class="square-spinner"></div>
      </div>
    </button>

    <button type="button" class="back-btn" id="back-btn">
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <line x1="19" y1="12" x2="5" y2="12"></line>
        <polyline points="12,19 5,12 12,5"></polyline>
      </svg>
      Back to options
    </button>
  </form>

  <!-- OTP Form -->
  <form id="otp-form" class="otp-form" style="display: none;">
    <div class="otp-header">
      <h3>Check Your Email</h3>
      <p>
        We've sent a verification code to <strong id="email-display"></strong>
      </p>
    </div>

    <div class="form-group">
      <input
        type="text"
        id="otp-code"
        name="otp"
        class="form-input otp-input"
        placeholder="Enter 6-digit code"
        required
        maxlength="6"
      />
    </div>

    <button type="submit" class="auth-btn primary" id="verify-btn">
      <span class="btn-text">Verify Code</span>
      <div class="btn-spinner" style="display: none;">
        <div class="square-spinner"></div>
      </div>
    </button>

    <div class="otp-options">
      <button type="button" class="option-link" id="resend-code">
        <span class="resend-text">Resend code</span>
        <span class="resend-timer" style="display: none;"
          >Resend in <span id="timer">60</span>s</span
        >
      </button>
      <button type="button" class="option-link" id="back-to-email"
        >Back to email</button
      >
    </div>
  </form>

  <!-- Messages -->
  <div class="toast-message" id="toast-message" style="display: none;">
    <div class="toast-content">
      <div class="toast-icon" id="toast-icon"></div>
      <span id="toast-text"></span>
    </div>
  </div>
</div>

<style>
  .auth-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .social-buttons {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
    margin-bottom: 1.5rem;
  }

  .auth-btn {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid #e2e8f0;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-family: inherit;
  }

  .auth-btn:hover {
    border-color: #d1d5db;
    background: #f9fafb;
  }

  .auth-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .auth-btn.primary {
    background: #243788;
    color: white;
    border-color: #243788;
  }

  .auth-btn.primary:hover:not(:disabled) {
    background: #1e2d6b;
    border-color: #1e2d6b;
  }

  .email-form,
  .otp-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-input {
    width: 100%;
    padding: 0.875rem;
    border: 2px solid #e2e8f0;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    transition: border-color 0.2s ease;
    font-family: inherit;
    box-sizing: border-box;
  }

  .form-input:focus {
    outline: none;
    border-color: #243788;
  }

  .form-input::placeholder {
    color: #9ca3af;
  }

  .otp-input {
    text-align: center;
    font-size: 1.125rem;
    letter-spacing: 0.25em;
    font-weight: 600;
  }

  .otp-header {
    text-align: center;
    margin-bottom: 1rem;
  }

  .otp-header h3 {
    font-size: 1.125rem;
    font-weight: 700;
    color: #243788;
    margin: 0 0 0.5rem 0;
  }

  .otp-header p {
    color: #64748b;
    font-size: 0.875rem;
    margin: 0;
  }

  .terms-section {
    margin: 0.5rem 0;
  }

  .checkbox-label {
    display: flex;
    align-items: flex-start;
    gap: 0.75rem;
    cursor: pointer;
    font-size: 0.8125rem;
    line-height: 1.4;
  }

  .checkbox-label input[type="checkbox"] {
    display: none;
  }

  .checkbox-custom {
    width: 16px;
    height: 16px;
    border: 2px solid #d1d5db;
    background: white;
    flex-shrink: 0;
    margin-top: 2px;
    transition: all 0.2s ease;
    position: relative;
  }

  .checkbox-label input[type="checkbox"]:checked + .checkbox-custom {
    background: #243788;
    border-color: #243788;
  }

  .checkbox-label input[type="checkbox"]:checked + .checkbox-custom::after {
    content: "✓";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 10px;
    font-weight: bold;
  }

  .checkbox-text {
    color: #64748b;
  }

  .terms-link {
    color: #243788;
    text-decoration: none;
  }

  .terms-link:hover {
    text-decoration: underline;
  }

  .back-btn {
    background: none;
    border: 2px solid #e2e8f0;
    color: #64748b;
    padding: 0.5rem;
    font-size: 0.8125rem;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-family: inherit;
    transition: all 0.2s ease;
  }

  .back-btn:hover {
    border-color: #d1d5db;
    background: #f9fafb;
  }

  .auth-links {
    text-align: center;
    padding-top: 1rem;
    border-top: 2px solid #e2e8f0;
  }

  .auth-links p {
    color: #64748b;
    font-size: 0.875rem;
    margin: 0;
  }

  .auth-link {
    color: #243788;
    text-decoration: none;
    font-weight: 600;
  }

  .auth-link:hover {
    text-decoration: underline;
  }

  .otp-options {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    margin-top: 1rem;
  }

  .option-link {
    background: none;
    border: none;
    color: #243788;
    font-size: 0.8125rem;
    cursor: pointer;
    text-decoration: underline;
    font-family: inherit;
  }

  .option-link:hover {
    opacity: 0.8;
  }

  .btn-spinner {
    display: none;
    align-items: center;
    justify-content: center;
  }

  .square-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid white;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .toast-message {
    position: fixed;
    top: 2rem;
    left: 50%;
    transform: translateX(-50%) translateY(-20px);
    z-index: 9999;
    opacity: 0;
    transition: all 0.3s ease;
    max-width: 400px;
    width: 90%;
  }

  .toast-content {
    backdrop-filter: blur(16px);
    background: rgba(34, 197, 94, 0.1);
    border: 2px solid rgba(34, 197, 94, 0.3);
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: #16a34a;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .toast-content.error {
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
    color: #dc2626;
  }

  .toast-icon {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
  }

  /* Dark mode support2 */
  :global(.dark) .auth-btn {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .auth-btn:hover {
    border-color: rgb(75, 85, 99);
    background: rgb(30, 41, 59);
  }

  :global(.dark) .auth-btn.primary {
    background: #b4bce1;
    color: rgb(15, 23, 42);
    border-color: #b4bce1;
  }

  :global(.dark) .auth-btn.primary:hover:not(:disabled) {
    background: #9ca8d4;
    border-color: #9ca8d4;
  }

  :global(.dark) .form-input {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .form-input:focus {
    border-color: #b4bce1;
  }

  :global(.dark) .checkbox-custom {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
  }

  :global(.dark)
    .checkbox-label
    input[type="checkbox"]:checked
    + .checkbox-custom {
    background: #b4bce1;
    border-color: #b4bce1;
  }

  :global(.dark)
    .checkbox-label
    input[type="checkbox"]:checked
    + .checkbox-custom::after {
    color: rgb(15, 23, 42);
  }

  :global(.dark) .checkbox-text {
    color: rgb(148, 163, 184);
  }

  :global(.dark) .terms-link {
    color: #b4bce1;
  }

  :global(.dark) .back-btn {
    border-color: rgb(51, 65, 85);
    color: rgb(148, 163, 184);
  }

  :global(.dark) .back-btn:hover {
    border-color: rgb(75, 85, 99);
    background: rgb(30, 41, 59);
  }

  :global(.dark) .auth-links {
    border-top-color: rgb(51, 65, 85);
  }

  :global(.dark) .auth-links p {
    color: rgb(148, 163, 184);
  }

  :global(.dark) .auth-link {
    color: #b4bce1;
  }

  :global(.dark) .error-content {
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
  }

  :global(.dark) .success-content {
    background: rgba(34, 197, 94, 0.1);
    border-color: rgba(34, 197, 94, 0.3);
  }

  :global(.dark) .error-message p {
    color: #fca5a5;
  }

  :global(.dark) .success-message p {
    color: #86efac;
  }

  :global(.dark) .square-spinner {
    border-color: rgba(180, 188, 225, 0.3);
    border-top-color: #b4bce1;
  }

  /* Dark mode support */
  :global(.dark) .auth-btn {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .auth-btn:hover {
    border-color: rgb(75, 85, 99);
    background: rgb(30, 41, 59);
  }

  :global(.dark) .auth-btn.primary {
    background: #b4bce1;
    color: rgb(15, 23, 42);
    border-color: #b4bce1;
  }

  :global(.dark) .auth-btn.primary:hover:not(:disabled) {
    background: #9ca8d4;
    border-color: #9ca8d4;
  }

  :global(.dark) .form-input {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .form-input:focus {
    border-color: #b4bce1;
  }

  :global(.dark) .checkbox-custom {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
  }

  :global(.dark)
    .checkbox-label
    input[type="checkbox"]:checked
    + .checkbox-custom {
    background: #b4bce1;
    border-color: #b4bce1;
  }

  :global(.dark)
    .checkbox-label
    input[type="checkbox"]:checked
    + .checkbox-custom::after {
    color: rgb(15, 23, 42);
  }

  :global(.dark) .square-spinner {
    border-color: rgba(180, 188, 225, 0.3);
    border-top-color: #b4bce1;
  }

  @media (max-width: 480px) {
    .otp-options {
      flex-direction: column;
      gap: 0.5rem;
      text-align: center;
    }
  }

  .square-spinner {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid white;
    background: transparent;
    animation: square-spin 1s linear infinite;
  }

  @keyframes square-spin {
    0% {
      transform: rotate(0deg);
    }
    25% {
      transform: rotate(90deg);
    }
    50% {
      transform: rotate(180deg);
    }
    75% {
      transform: rotate(270deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }
  .toast-message {
    position: fixed;
    top: 2rem;
    left: 50%;
    transform: translateX(-50%) translateY(-20px);
    z-index: 10000; /* Increased z-index */
    opacity: 0;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    max-width: 400px;
    width: 90%;
    pointer-events: none; /* Prevent interference with other elements */
  }

  .toast-message.show {
    transform: translateX(-50%) translateY(0);
    opacity: 1;
    pointer-events: auto;
  }

  .toast-content {
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    background: rgba(34, 197, 94, 0.1);
    border: 2px solid rgba(34, 197, 94, 0.3);
    padding: 1rem 1.25rem;
    border-radius: 0px;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: #16a34a;
    font-size: 0.875rem;
    font-weight: 500;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.1);
    position: relative;
  }

  .toast-content.error {
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
    color: #dc2626;
  }

  .toast-content.warning {
    background: rgba(245, 158, 11, 0.1);
    border-color: rgba(245, 158, 11, 0.3);
    color: #d97706;
  }

  .toast-icon {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  /* Enhanced checkbox validation styles */
  .checkbox-label.error .checkbox-custom {
    border-color: #ef4444;
    animation: shake 0.5s ease-in-out;
  }

  .form-input.error {
    border-color: #ef4444;
    animation: shake 0.5s ease-in-out;
  }

  @keyframes shake {
    0%,
    100% {
      transform: translateX(0);
    }
    25% {
      transform: translateX(-5px);
    }
    75% {
      transform: translateX(5px);
    }
  }

  /* Dark mode toast enhancements */
  :global(.dark) .toast-content {
    background: rgba(34, 197, 94, 0.15);
    border-color: rgba(34, 197, 94, 0.4);
    color: #22c55e;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
  }

  :global(.dark) .toast-content.error {
    background: rgba(239, 68, 68, 0.15);
    border-color: rgba(239, 68, 68, 0.4);
    color: #ef4444;
  }

  :global(.dark) .toast-content.warning {
    background: rgba(245, 158, 11, 0.15);
    border-color: rgba(245, 158, 11, 0.4);
    color: #f59e0b;
  }

  :global(.dark) .checkbox-label.error .checkbox-custom {
    border-color: #ef4444;
  }

  :global(.dark) .form-input.error {
    border-color: #ef4444;
  }

  /* Mobile responsive toast */
  @media (max-width: 480px) {
    .toast-message {
      top: 1rem;
      width: 95%;
    }

    .toast-content {
      padding: 0.875rem 1rem;
      font-size: 0.8125rem;
    }
  }
</style>

<script>
  import { authManager } from "../../lib/auth.js";

  class SignUpFormManager {
    private initialized: boolean = false;
    private authOptions: HTMLElement | null = null;
    private emailForm: HTMLFormElement | null = null;
    private otpForm: HTMLFormElement | null = null;
    private emailSignupBtn: HTMLButtonElement | null = null;
    private googleBtn: HTMLButtonElement | null = null;
    private backBtn: HTMLButtonElement | null = null;
    private backToEmailBtn: HTMLButtonElement | null = null;
    private signupBtn: HTMLButtonElement | null = null;
    private verifyBtn: HTMLButtonElement | null = null;
    private resendBtn: HTMLButtonElement | null = null;
    private emailDisplay: HTMLElement | null = null;
    private toastMessage: HTMLElement | null = null;
    private toastText: HTMLElement | null = null;
    private toastIcon: HTMLElement | null = null;
    private currentEmail: string = "";
    private currentDisplayName: string = "";
    private resendTimer: number | null = null;
    private activeToastTimeout: number | null = null;

    constructor() {
      this.init();
    }

    async init() {
      if (this.initialized) return;

      try {
        console.log("📝 SignUpForm: Initializing...");

        // Initialize auth manager
        await authManager.initialize();

        this.setupDOM();
        this.setupEventListeners();
        this.setupFormValidation(); // Add this

        this.initialized = true;
        console.log("📝 SignUpForm: Initialized successfully");
      } catch (error) {
        console.error("❌ SignUpForm: Initialization failed:", error);
        this.showToast("Failed to initialize sign up form", "error");
      }
    }

    private setupDOM() {
      this.authOptions = document.getElementById("auth-options") as HTMLElement;
      this.emailForm = document.getElementById("email-form") as HTMLFormElement;
      this.otpForm = document.getElementById("otp-form") as HTMLFormElement;
      this.emailSignupBtn = document.getElementById(
        "email-signup"
      ) as HTMLButtonElement;
      this.googleBtn = document.getElementById(
        "google-signup"
      ) as HTMLButtonElement;
      this.backBtn = document.getElementById("back-btn") as HTMLButtonElement;
      this.backToEmailBtn = document.getElementById(
        "back-to-email"
      ) as HTMLButtonElement;
      this.signupBtn = document.getElementById(
        "signup-btn"
      ) as HTMLButtonElement;
      this.verifyBtn = document.getElementById(
        "verify-btn"
      ) as HTMLButtonElement;
      this.resendBtn = document.getElementById(
        "resend-code"
      ) as HTMLButtonElement;
      this.emailDisplay = document.getElementById(
        "email-display"
      ) as HTMLElement;
      this.toastMessage = document.getElementById(
        "toast-message"
      ) as HTMLElement;
      this.toastText = document.getElementById("toast-text") as HTMLElement;
      this.toastIcon = document.getElementById("toast-icon") as HTMLElement;
    }

    private setupEventListeners() {
      this.emailSignupBtn?.addEventListener("click", () =>
        this.showEmailForm()
      );
      this.backBtn?.addEventListener("click", () => this.showAuthOptions());
      this.backToEmailBtn?.addEventListener("click", () =>
        this.showEmailForm()
      );

      // Google signup
      this.googleBtn?.addEventListener("click", async () => {
        await this.handleGoogleSignUp();
      });

      // Email form submission
      this.emailForm?.addEventListener("submit", async (e) => {
        e.preventDefault();
        await this.handleEmailSignUp();
      });

      // OTP form submission
      this.otpForm?.addEventListener("submit", async (e) => {
        e.preventDefault();
        await this.handleOTPVerification();
      });

      // Resend code
      this.resendBtn?.addEventListener("click", async () => {
        await this.handleResendCode();
      });

      // Real-time validation
      this.setupRealTimeValidation();
    }

    // NEW: Setup form validation with button state management
    private setupFormValidation() {
      const termsCheckbox = document.getElementById(
        "terms-checkbox"
      ) as HTMLInputElement;
      const displayNameInput = document.getElementById(
        "display-name"
      ) as HTMLInputElement;
      const emailInput = document.getElementById("email") as HTMLInputElement;

      // Function to check if form is valid
      const checkFormValidity = () => {
        const displayName = displayNameInput?.value?.trim() || "";
        const email = emailInput?.value?.trim() || "";
        const termsAccepted = termsCheckbox?.checked || false;

        const isValid =
          displayName.length >= 2 && this.isValidEmail(email) && termsAccepted;

        // Enable/disable submit button
        if (this.signupBtn) {
          this.signupBtn.disabled = !isValid;
          this.signupBtn.style.opacity = isValid ? "1" : "0.6";
        }
      };

      // Add listeners to all form inputs
      displayNameInput?.addEventListener("input", checkFormValidity);
      emailInput?.addEventListener("input", checkFormValidity);
      termsCheckbox?.addEventListener("change", checkFormValidity);

      // Initial check
      checkFormValidity();
    }

    private setupRealTimeValidation() {
      const termsCheckbox = document.getElementById(
        "terms-checkbox"
      ) as HTMLInputElement;
      const checkboxLabel = termsCheckbox?.closest(
        ".checkbox-label"
      ) as HTMLElement;

      // Clear error state when checkbox is checked
      termsCheckbox?.addEventListener("change", () => {
        if (termsCheckbox.checked) {
          checkboxLabel?.classList.remove("error");
        }
      });

      // Clear error state when form inputs are focused
      const formInputs = this.emailForm?.querySelectorAll(".form-input");
      formInputs?.forEach((input) => {
        input.addEventListener("focus", () => {
          input.classList.remove("error");
        });
      });
    }

    private async handleGoogleSignUp() {
      if (!this.googleBtn) return;

      try {
        this.setButtonLoading(this.googleBtn, true);
        console.log("📝 SignUpForm: Google signup starting...");

        const result = await authManager.signInWithGoogle();

        if (!result.success) {
          throw new Error(result.error);
        }

        console.log("📝 SignUpForm: Google signup successful, redirecting...");
      } catch (error: any) {
        console.error("❌ SignUpForm: Google signup error:", error);
        this.showToast(error.message || "Google sign up failed", "error");
        this.setButtonLoading(this.googleBtn, false);
      }
    }

    private async handleEmailSignUp() {
      if (!this.emailForm || !this.signupBtn) return;

      // Clear previous error states
      this.clearValidationErrors();

      const formData = new FormData(this.emailForm);
      const displayName = formData.get("displayName") as string;
      const email = formData.get("email") as string;
      const termsCheckbox = document.getElementById(
        "terms-checkbox"
      ) as HTMLInputElement;
      const termsAccepted = termsCheckbox?.checked;

      // Enhanced validation with immediate feedback
      let hasErrors = false;
      let firstErrorElement: HTMLElement | null = null;

      if (!displayName || displayName.trim().length < 2) {
        const displayNameInput = document.getElementById(
          "display-name"
        ) as HTMLInputElement;
        displayNameInput?.classList.add("error");
        if (!firstErrorElement) firstErrorElement = displayNameInput;
        this.showToast(
          "Please enter a valid full name (at least 2 characters)",
          "error"
        );
        hasErrors = true;
      }

      if (!email || !this.isValidEmail(email)) {
        const emailInput = document.getElementById("email") as HTMLInputElement;
        emailInput?.classList.add("error");
        if (!firstErrorElement) firstErrorElement = emailInput;
        this.showToast("Please enter a valid email address", "error");
        hasErrors = true;
      }

      if (!termsAccepted) {
        const checkboxLabel = termsCheckbox?.closest(
          ".checkbox-label"
        ) as HTMLElement;
        checkboxLabel?.classList.add("error");
        if (!firstErrorElement) firstErrorElement = checkboxLabel;

        this.showToast(
          "Please accept the Terms of Service and Privacy Policy to continue",
          "warning"
        );
        hasErrors = true;
      }

      if (hasErrors) {
        // Focus the first error element
        if (firstErrorElement) {
          firstErrorElement.scrollIntoView({
            behavior: "smooth",
            block: "center",
          });

          // If it's an input, focus it
          if (firstErrorElement.tagName === "INPUT") {
            (firstErrorElement as HTMLInputElement).focus();
          }
        }
        return;
      }

      this.setButtonLoading(this.signupBtn, true);

      try {
        console.log("📝 SignUpForm: Email signup for:", email);

        // Store for later use
        this.currentDisplayName = displayName.trim();

        const result = await authManager.signUpWithEmail(
          email,
          this.currentDisplayName
        );

        if (!result.success) {
          // Handle specific error cases
          if (result.error?.includes("already exists")) {
            this.showToast(
              "An account with this email already exists. Try signing in instead.",
              "warning"
            );

            // Optionally redirect to signin after a delay
            setTimeout(() => {
              window.location.href = `/auth/signin?email=${encodeURIComponent(email)}`;
            }, 3000);
            return;
          }

          throw new Error(result.error);
        }

        console.log("✅ SignUpForm: Verification code sent successfully");
        this.showToast(
          "Verification code sent to your email! Check your inbox.",
          "success"
        );
        this.showOTPForm(email);
        this.startResendTimer();
      } catch (error: any) {
        console.error("❌ SignUpForm: Email signup error:", error);
        this.showToast(
          error.message || "Sign up failed. Please try again.",
          "error"
        );
      } finally {
        this.setButtonLoading(this.signupBtn, false);
      }
    }

    private async handleOTPVerification() {
      if (!this.otpForm || !this.verifyBtn) return;

      const formData = new FormData(this.otpForm);
      const otp = formData.get("otp") as string;

      if (!otp || otp.length !== 6) {
        const otpInput = document.getElementById(
          "otp-code"
        ) as HTMLInputElement;
        otpInput?.classList.add("error");
        this.showToast(
          "Please enter the complete 6-digit verification code",
          "error"
        );
        return;
      }

      this.setButtonLoading(this.verifyBtn, true);

      try {
        console.log("📝 SignUpForm: Verifying OTP for:", this.currentEmail);

        const result = await authManager.verifyOTP(this.currentEmail, otp);

        if (!result.success) {
          throw new Error(result.error);
        }

        console.log("✅ SignUpForm: OTP verification successful");
        this.showToast(
          "Account created successfully! Redirecting to setup...",
          "success"
        );

        setTimeout(() => {
          window.location.href = "/profile?setup=password";
        }, 1500);
      } catch (error: any) {
        console.error("❌ SignUpForm: OTP verification error:", error);
        const otpInput = document.getElementById(
          "otp-code"
        ) as HTMLInputElement;
        otpInput?.classList.add("error");

        let errorMessage = "Verification failed. Please try again.";
        if (error.message?.includes("expired")) {
          errorMessage =
            "Verification code has expired. Please request a new one.";
        } else if (error.message?.includes("invalid")) {
          errorMessage =
            "Invalid verification code. Please check and try again.";
        }

        this.showToast(errorMessage, "error");
      } finally {
        this.setButtonLoading(this.verifyBtn, false);
      }
    }

    private async handleResendCode() {
      if (!this.currentEmail || !this.resendBtn) return;

      try {
        console.log(
          "📝 SignUpForm: Resending verification code to:",
          this.currentEmail
        );

        const result = await authManager.signUpWithEmail(
          this.currentEmail,
          this.currentDisplayName
        );

        if (!result.success) {
          throw new Error(result.error);
        }

        console.log("✅ SignUpForm: New verification code sent");
        this.showToast(
          "New verification code sent! Check your email.",
          "success"
        );
        this.startResendTimer();
      } catch (error: any) {
        console.error("❌ SignUpForm: Resend code error:", error);
        this.showToast("Failed to resend code. Please try again.", "error");
      }
    }

    // Helper methods
    private isValidEmail(email: string): boolean {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    private clearValidationErrors() {
      // Clear error classes from all inputs
      const errorElements = document.querySelectorAll(".error");
      errorElements.forEach((element) => {
        element.classList.remove("error");
      });
    }

    private showEmailForm() {
      if (this.authOptions) this.authOptions.style.display = "none";
      if (this.emailForm) this.emailForm.style.display = "flex";
      if (this.otpForm) this.otpForm.style.display = "none";

      // Focus first input
      const firstInput = this.emailForm?.querySelector(
        "input"
      ) as HTMLInputElement;
      firstInput?.focus();
    }

    private showOTPForm(email: string) {
      this.currentEmail = email;
      if (this.emailDisplay) this.emailDisplay.textContent = email;
      if (this.authOptions) this.authOptions.style.display = "none";
      if (this.emailForm) this.emailForm.style.display = "none";
      if (this.otpForm) this.otpForm.style.display = "flex";

      // Focus OTP input
      const otpInput = document.getElementById("otp-code") as HTMLInputElement;
      if (otpInput) {
        otpInput.focus();
        otpInput.value = ""; // Clear any previous value
      }
    }

    private showAuthOptions() {
      if (this.authOptions) this.authOptions.style.display = "block";
      if (this.emailForm) this.emailForm.style.display = "none";
      if (this.otpForm) this.otpForm.style.display = "none";
      this.clearValidationErrors();
    }

    private startResendTimer() {
      const resendText = this.resendBtn?.querySelector(
        ".resend-text"
      ) as HTMLElement;
      const resendTimer = this.resendBtn?.querySelector(
        ".resend-timer"
      ) as HTMLElement;
      const timerSpan = document.getElementById("timer") as HTMLElement;

      if (this.resendBtn) this.resendBtn.disabled = true;
      if (resendText) resendText.style.display = "none";
      if (resendTimer) resendTimer.style.display = "block";

      let countdown = 60;
      const interval = setInterval(() => {
        if (timerSpan) timerSpan.textContent = countdown.toString();
        countdown--;

        if (countdown < 0) {
          clearInterval(interval);
          if (this.resendBtn) this.resendBtn.disabled = false;
          if (resendText) resendText.style.display = "block";
          if (resendTimer) resendTimer.style.display = "none";
        }
      }, 1000);
    }

    private setButtonLoading(button: HTMLButtonElement, isLoading: boolean) {
      const btnText = button.querySelector(".btn-text") as HTMLElement;
      const btnSpinner = button.querySelector(".btn-spinner") as HTMLElement;

      button.disabled = isLoading;
      if (btnText) btnText.style.display = isLoading ? "none" : "block";
      if (btnSpinner) btnSpinner.style.display = isLoading ? "flex" : "none";
    }

    private showToast(
      message: string,
      type: "success" | "error" | "warning" = "success"
    ) {
      if (!this.toastText || !this.toastMessage || !this.toastIcon) return;

      // Clear any existing timeout
      if (this.activeToastTimeout) {
        clearTimeout(this.activeToastTimeout);
      }

      // Set content
      this.toastText.textContent = message;

      // Set icon based on type
      const icons = {
        success:
          '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22,4 12,14.01 9,11.01"/></svg>',
        error:
          '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><line x1="15" y1="9" x2="9" y2="15"/><line x1="9" y1="9" x2="15" y2="15"/></svg>',
        warning:
          '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/><line x1="12" y1="9" x2="12" y2="13"/><line x1="12" y1="17" x2="12.01" y2="17"/></svg>',
      };

      this.toastIcon.innerHTML = icons[type];

      // Set toast content class
      const toastContent = this.toastMessage.querySelector(
        ".toast-content"
      ) as HTMLElement;
      if (toastContent) {
        toastContent.className = `toast-content ${type}`;
      }

      // Show toast
      this.toastMessage.style.display = "block";
      this.toastMessage.classList.add("show");

      // Auto-hide after delay
      const hideDelay =
        type === "error" ? 6000 : type === "warning" ? 5000 : 4000;

      this.activeToastTimeout = window.setTimeout(() => {
        this.hideToast();
      }, hideDelay);
    }

    private hideToast() {
      if (this.toastMessage) {
        this.toastMessage.classList.remove("show");
        setTimeout(() => {
          if (this.toastMessage) {
            this.toastMessage.style.display = "none";
          }
        }, 300);
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new SignUpFormManager();
  });
</script>
