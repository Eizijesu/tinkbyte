---
// src/components/magazine/NewsletterCTA.astro - FIXED TypeScript DOM errors
import Button from "../ui/Button.astro";

export interface Props {
  title?: string;
  description?: string;
  buttonText?: string;
  className?: string;
}

const {
  title = "Stay Ahead of the Curve",
  description = "Get TinkStacks weekly in your inbox. Practical insights, real-world stories, and honest analysis for builders who value substance over hype.",
  buttonText = "Subscribe",
  className = "",
} = Astro.props;

const CONVERTKIT_FORM_ID = import.meta.env.PUBLIC_CONVERTKIT_FORM_ID;
---

<section class={`newsletter-section ${className}`}>
  <div class="max-w-4xl mx-auto px-4 py-12">
    <div class="newsletter-container">
      <div class="newsletter-content">
        <h3 class="newsletter-title">{title}</h3>
        <p class="newsletter-description">{description}</p>
      </div>

      <form
        class="newsletter-form"
        action={`https://app.convertkit.com/forms/${CONVERTKIT_FORM_ID}/subscriptions`}
        method="post"
        data-sv-form={CONVERTKIT_FORM_ID}
      >
        <div class="form-group">
          <input
            type="email"
            name="email_address"
            placeholder="your@email.com"
            required
            class="newsletter-input"
            aria-label="Email address"
          />
          <Button type="submit" variant="primary" className="newsletter-button">
            {buttonText}
          </Button>
        </div>

        <p class="newsletter-note">
          Join the community of builders. Unsubscribe anytime.
        </p>

        <!-- ConvertKit hidden fields -->
        <input type="hidden" name="utf8" value="‚úì" />
        <input type="hidden" name="authenticity_token" value="" />

        <!-- Messages -->
        <div class="form-message success-message hidden">
          üéâ Welcome to TinkStacks! Check your email to confirm.
        </div>
        <div class="form-message error-message hidden">
          ‚ùå Something went wrong. Please try again.
        </div>
      </form>
    </div>
  </div>
</section>

<style>
  .newsletter-section {
    background: #f8f9fa;
    border-top: 1px solid #e5e7eb;
    margin-top: 3rem;
    transition: all 0.3s ease;
  }

  :global(.dark) .newsletter-section {
    background: rgb(31, 41, 55);
    border-top-color: rgb(55, 65, 81);
  }

  .newsletter-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    align-items: center;
  }

  .newsletter-title {
    font-size: 1.875rem;
    font-weight: 700;
    color: rgb(36, 55, 136);
    margin-bottom: 1rem;
    transition: color 0.3s ease;
  }

  :global(.dark) .newsletter-title {
    color: rgb(180, 188, 225);
  }

  .newsletter-description {
    font-size: 1.125rem;
    line-height: 1.6;
    color: #6b7280;
    transition: color 0.3s ease;
  }

  :global(.dark) .newsletter-description {
    color: rgb(156, 163, 175);
  }

  .newsletter-form {
    text-align: left;
  }

  .form-group {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .newsletter-input {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    font-size: 1rem;
    transition: all 0.2s ease;
  }

  :global(.dark) .newsletter-input {
    background: rgb(17, 24, 39);
    border-color: rgb(75, 85, 99);
    color: rgb(243, 244, 246);
  }

  .newsletter-input:focus {
    outline: none;
    border-color: rgb(36, 55, 136);
    box-shadow: 0 0 0 3px rgba(36, 55, 136, 0.1);
  }

  .newsletter-button {
    white-space: nowrap;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
  }

  .newsletter-note {
    font-size: 0.875rem;
    color: #9ca3af;
    margin: 0;
    transition: color 0.3s ease;
  }

  :global(.dark) .newsletter-note {
    color: rgb(107, 114, 128);
  }

  .form-message {
    margin-top: 1rem;
    padding: 0.75rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .success-message {
    background: #d1fae5;
    color: #065f46;
    border: 1px solid #a7f3d0;
  }

  :global(.dark) .success-message {
    background: rgba(16, 185, 129, 0.1);
    color: rgb(52, 211, 153);
    border-color: rgba(16, 185, 129, 0.2);
  }

  .error-message {
    background: #fee2e2;
    color: #991b1b;
    border: 1px solid #fca5a5;
  }

  :global(.dark) .error-message {
    background: rgba(239, 68, 68, 0.1);
    color: rgb(248, 113, 113);
    border-color: rgba(239, 68, 68, 0.2);
  }

  .hidden {
    display: none;
  }

  @media (max-width: 768px) {
    .newsletter-container {
      grid-template-columns: 1fr;
      gap: 2rem;
      text-align: center;
    }

    .form-group {
      flex-direction: column;
    }

    .newsletter-input,
    .newsletter-button {
      width: 100%;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector(".newsletter-form");
    if (!form) return;

    const input = form.querySelector('input[name="email_address"]');
    const button = form.querySelector('button[type="submit"]');
    const successMessage = form.querySelector(".success-message");
    const errorMessage = form.querySelector(".error-message");

    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // ‚úÖ FIXED: Added proper type checking
      if (
        !input ||
        !button ||
        !(input instanceof HTMLInputElement) ||
        !(button instanceof HTMLButtonElement) ||
        !(form instanceof HTMLFormElement)
      )
        return;

      const email = input.value.trim();
      if (!email) return;

      const originalText = button.textContent;
      button.textContent = "Subscribing...";
      button.disabled = true;

      if (successMessage) successMessage.classList.add("hidden");
      if (errorMessage) errorMessage.classList.add("hidden");

      try {
        const formData = new FormData(form);
        const response = await fetch(form.action, {
          method: "POST",
          body: formData,
          headers: { Accept: "application/json" },
        });

        if (response.ok) {
          input.value = "";
          if (successMessage) successMessage.classList.remove("hidden");
          button.textContent = "Subscribed!";

          setTimeout(() => {
            if (button instanceof HTMLButtonElement) {
              button.textContent = originalText;
              button.disabled = false;
            }
            if (successMessage) successMessage.classList.add("hidden");
          }, 5000);
        } else {
          throw new Error("Subscription failed");
        }
      } catch (error) {
        console.error("Newsletter subscription error:", error);
        if (errorMessage) errorMessage.classList.remove("hidden");
        if (button instanceof HTMLButtonElement) {
          button.textContent = originalText;
          button.disabled = false;
        }
      }
    });
  });
</script>
