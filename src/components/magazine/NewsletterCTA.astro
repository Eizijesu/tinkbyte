---
// src/components/magazine/NewsletterCTA.astro - COMPLETE FIXED VERSION
import Button from "../ui/Button.astro";

export interface Props {
  title?: string;
  description?: string;
  buttonText?: string;
  className?: string;
}

const {
  title = "Stay Ahead of the Curve",
  description = "Get TinkStacks weekly in your inbox. Practical insights, real-world stories, and honest analysis for builders who value substance over hype.",
  buttonText = "Subscribe",
  className = "",
} = Astro.props;

// ‚úÖ FIXED: Consistent environment variable usage
const CONVERTKIT_FORM_ID = import.meta.env.PUBLIC_CONVERTKIT_FORM_ID;
---

<section class={`newsletter-section ${className}`}>
  <div class="max-w-4xl mx-auto px-4 py-12">
    <div class="newsletter-container">
      <div class="newsletter-content">
        <h3 class="newsletter-title">{title}</h3>
        <p class="newsletter-description">{description}</p>
      </div>

      {CONVERTKIT_FORM_ID ? (
        <!-- ‚úÖ FIXED: Complete ConvertKit form setup with all required attributes -->
        <form
          class="newsletter-form"
          action={`https://app.convertkit.com/forms/${CONVERTKIT_FORM_ID}/subscriptions`}
          method="post"
          data-sv-form={CONVERTKIT_FORM_ID}
          data-uid={CONVERTKIT_FORM_ID}
          data-format="inline"
          data-version="5"
        >
          <div class="form-group">
            <input
              type="email"
              name="email_address"
              placeholder="your@email.com"
              required
              class="newsletter-input"
              aria-label="Email address"
            />
            <Button type="submit" variant="primary" className="newsletter-button">
              {buttonText}
            </Button>
          </div>

          <p class="newsletter-note">
            Join the community of builders. Unsubscribe anytime.
          </p>

          <!-- ‚úÖ FIXED: All required ConvertKit hidden fields -->
          <input type="hidden" name="utf8" value="‚úì" />
          <input type="hidden" name="authenticity_token" value="" />

          <!-- Messages -->
          <div class="form-message success-message hidden">
            üéâ Welcome to TinkStacks! Check your email to confirm.
          </div>
          <div class="form-message error-message hidden">
            ‚ùå Something went wrong. Please try again.
          </div>
        </form>
      ) : (
        <!-- Fallback when ConvertKit is not configured -->
        <div class="newsletter-form">
          <div class="form-group">
            <input
              type="email"
              placeholder="your@email.com"
              disabled
              class="newsletter-input opacity-50"
              aria-label="Email address"
            />
            <Button variant="primary" className="newsletter-button opacity-50" disabled>
              {buttonText}
            </Button>
          </div>
          <p class="newsletter-note text-yellow-600 dark:text-yellow-400">
            Newsletter signup temporarily unavailable. Please check back soon.
          </p>
        </div>
      )}
    </div>
  </div>
</section>

<style>
  .newsletter-section {
    background: #f8f9fa;
    border-top: 1px solid #e5e7eb;
    margin-top: 3rem;
    transition: all 0.3s ease;
  }

  :global(.dark) .newsletter-section {
    background: rgb(31, 41, 55);
    border-top-color: rgb(55, 65, 81);
  }

  .newsletter-container {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 3rem;
    align-items: center;
  }

  .newsletter-title {
    font-size: 1.875rem;
    font-weight: 700;
    color: rgb(36, 55, 136);
    margin-bottom: 1rem;
    transition: color 0.3s ease;
  }

  :global(.dark) .newsletter-title {
    color: rgb(180, 188, 225);
  }

  .newsletter-description {
    font-size: 1.125rem;
    line-height: 1.6;
    color: #6b7280;
    transition: color 0.3s ease;
  }

  :global(.dark) .newsletter-description {
    color: rgb(156, 163, 175);
  }

  .newsletter-form {
    text-align: left;
  }

  .form-group {
    display: flex;
    gap: 0.75rem;
    margin-bottom: 0.75rem;
  }

  .newsletter-input {
    flex: 1;
    padding: 0.75rem 1rem;
    border: 1px solid #d1d5db;
    border-radius: 0.375rem;
    font-size: 1rem;
    transition: all 0.2s ease;
    background: white;
  }

  :global(.dark) .newsletter-input {
    background: rgb(17, 24, 39);
    border-color: rgb(75, 85, 99);
    color: rgb(243, 244, 246);
  }

  .newsletter-input:focus {
    outline: none;
    border-color: rgb(36, 55, 136);
    box-shadow: 0 0 0 3px rgba(36, 55, 136, 0.1);
    transform: translateY(-1px);
  }

  .newsletter-input:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .newsletter-button {
    white-space: nowrap;
    padding: 0.75rem 1.5rem;
    border-radius: 0.375rem;
    transition: all 0.2s ease;
  }

  .newsletter-button:hover:not(:disabled) {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
  }

  .newsletter-button:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }

  .newsletter-note {
    font-size: 0.875rem;
    color: #9ca3af;
    margin: 0;
    transition: color 0.3s ease;
  }

  :global(.dark) .newsletter-note {
    color: rgb(107, 114, 128);
  }

  .form-message {
    margin-top: 1rem;
    padding: 0.75rem;
    border-radius: 0.375rem;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  .success-message {
    background: #d1fae5;
    color: #065f46;
    border: 1px solid #a7f3d0;
  }

  :global(.dark) .success-message {
    background: rgba(16, 185, 129, 0.1);
    color: rgb(52, 211, 153);
    border-color: rgba(16, 185, 129, 0.2);
  }

  .error-message {
    background: #fee2e2;
    color: #991b1b;
    border: 1px solid #fca5a5;
  }

  :global(.dark) .error-message {
    background: rgba(239, 68, 68, 0.1);
    color: rgb(248, 113, 113);
    border-color: rgba(239, 68, 68, 0.2);
  }

  .hidden {
    display: none;
  }

  /* Loading state */
  .newsletter-form.loading .newsletter-input {
    pointer-events: none;
    opacity: 0.7;
  }

  .newsletter-form.loading .newsletter-button {
    opacity: 0.7;
    cursor: wait;
    transform: scale(0.98);
  }

  /* Enhanced animations */
  .newsletter-form {
    animation: fadeInUp 0.6s ease-out;
  }

  @keyframes fadeInUp {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 768px) {
    .newsletter-container {
      grid-template-columns: 1fr;
      gap: 2rem;
      text-align: center;
    }

    .form-group {
      flex-direction: column;
    }

    .newsletter-input,
    .newsletter-button {
      width: 100%;
    }

    .newsletter-title {
      font-size: 1.5rem;
    }

    .newsletter-description {
      font-size: 1rem;
    }
  }
</style>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const form = document.querySelector(".newsletter-form");
    if (!form || !(form instanceof HTMLFormElement)) return;

    const input = form.querySelector('input[name="email_address"]');
    const button = form.querySelector('button[type="submit"]');
    const successMessage = form.querySelector(".success-message");
    const errorMessage = form.querySelector(".error-message");

    // Enhanced email validation
    const validateEmail = (email: string): boolean => {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    };

    // Show/hide messages
    const showMessage = (element: Element | null, show: boolean) => {
      if (!element) return;
      if (show) {
        element.classList.remove("hidden");
        element.scrollIntoView({ behavior: "smooth", block: "nearest" });
      } else {
        element.classList.add("hidden");
      }
    };

    // Form submission handler
    form.addEventListener("submit", async (e) => {
      e.preventDefault();

      // ‚úÖ FIXED: Proper type checking
      if (
        !input ||
        !button ||
        !(input instanceof HTMLInputElement) ||
        !(button instanceof HTMLButtonElement)
      ) {
        console.error("Required form elements not found");
        return;
      }

      const email = input.value.trim();
      
      // Validate email
      if (!email) {
        input.focus();
        return;
      }

      if (!validateEmail(email)) {
        showMessage(errorMessage, false);
        showMessage(successMessage, false);
        
        // Show inline validation
        input.style.borderColor = "#ef4444";
        input.focus();
        
        setTimeout(() => {
          input.style.borderColor = "";
        }, 3000);
        return;
      }

      // Reset messages
      showMessage(successMessage, false);
      showMessage(errorMessage, false);

      // Update UI for loading state
      const originalText = button.textContent;
      button.textContent = "Subscribing...";
      button.disabled = true;
      form.classList.add("loading");

      try {
        const formData = new FormData(form);
        const response = await fetch(form.action, {
          method: "POST",
          body: formData,
          headers: { 
            Accept: "application/json",
            "Content-Type": "application/x-www-form-urlencoded",
          },
        });

        if (response.ok || response.status === 200) {
          // Success
          input.value = "";
          button.textContent = "Subscribed!";
          button.style.background = "linear-gradient(to right, #10b981, #059669)";
          showMessage(successMessage, true);

          // Reset after 5 seconds
          setTimeout(() => {
            button.textContent = originalText;
            button.disabled = false;
            button.style.background = "";
            form.classList.remove("loading");
            showMessage(successMessage, false);
          }, 5000);
        } else {
          throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        }
      } catch (error) {
        console.error("Newsletter subscription error:", error);
        
        // Error state
        button.textContent = "Try Again";
        button.disabled = false;
        form.classList.remove("loading");
        showMessage(errorMessage, true);

        // Reset after 3 seconds
        setTimeout(() => {
          button.textContent = originalText;
          showMessage(errorMessage, false);
        }, 3000);
      }
    });

    // Real-time email validation
    input?.addEventListener("blur", function() {
      if (!(this instanceof HTMLInputElement)) return;
      
      const email = this.value.trim();
      if (email && !validateEmail(email)) {
        this.style.borderColor = "#ef4444";
        this.title = "Please enter a valid email address";
      } else {
        this.style.borderColor = "";
        this.title = "";
      }
    });

    // Clear validation on focus
    input?.addEventListener("focus", function() {
      if (!(this instanceof HTMLInputElement)) return;
      this.style.borderColor = "";
      this.title = "";
    });
  });
</script>