---
// src/components/admin/ModerationPanel.astro
import { supabase } from "../../lib/supabase";

interface Props {
  initialTab?: "pending" | "flagged" | "users" | "analytics";
}

const { initialTab = "pending" } = Astro.props;

// Get pending comments for initial load
const { data: pendingComments } = await supabase
  .from("comments")
  .select(
    `
    *,
    user_profile:profiles(display_name, avatar_type, avatar_preset_id, avatar_url, reputation_score),
    article:articles(title, slug)
  `
  )
  .eq("moderation_status", "pending")
  .order("created_at", { ascending: false })
  .limit(20);

// Get flagged comments
const { data: flaggedComments } = await supabase
  .from("comments")
  .select(
    `
    *,
    user_profile:profiles(display_name, avatar_type, avatar_preset_id, avatar_url, reputation_score),
    article:articles(title, slug),
    moderation_actions:comment_moderation(reason, created_at, moderator:profiles(display_name))
  `
  )
  .eq("moderation_status", "flagged")
  .order("created_at", { ascending: false })
  .limit(20);

// Get moderation statistics
const { data: stats } = await supabase
  .from("comments")
  .select("moderation_status")
  .gte("created_at", new Date(Date.now() - 24 * 60 * 60 * 1000).toISOString());

const moderationStats = {
  pending: stats?.filter((s) => s.moderation_status === "pending").length || 0,
  flagged: stats?.filter((s) => s.moderation_status === "flagged").length || 0,
  approved:
    stats?.filter((s) => s.moderation_status === "approved").length || 0,
  autoApproved:
    stats?.filter((s) => s.moderation_status === "auto_approved").length || 0,
  hidden: stats?.filter((s) => s.moderation_status === "hidden").length || 0,
};
---

<div class="moderation-panel">
  <!-- Panel Header -->
  <div class="panel-header">
    <h1>Content Moderation</h1>
    <div class="stats-overview">
      <div class="stat-item">
        <span class="stat-number">{moderationStats.pending}</span>
        <span class="stat-label">Pending</span>
      </div>
      <div class="stat-item">
        <span class="stat-number">{moderationStats.flagged}</span>
        <span class="stat-label">Flagged</span>
      </div>
      <div class="stat-item">
        <span class="stat-number"
          >{moderationStats.approved + moderationStats.autoApproved}</span
        >
        <span class="stat-label">Approved Today</span>
      </div>
    </div>
  </div>

  <!-- Navigation Tabs -->
  <div class="tab-navigation">
    <button class="tab-button active" data-tab="pending">
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <circle cx="12" cy="12" r="10"></circle>
        <path d="M12 6v6l4 2"></path>
      </svg>
      Pending Review ({moderationStats.pending})
    </button>
    <button class="tab-button" data-tab="flagged">
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z"
        ></path>
        <line x1="4" y1="22" x2="4" y2="15"></line>
      </svg>
      Flagged Content ({moderationStats.flagged})
    </button>
    <button class="tab-button" data-tab="users">
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
        <circle cx="9" cy="7" r="4"></circle>
        <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
        <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
      </svg>
      User Management
    </button>
    <button class="tab-button" data-tab="analytics">
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <path d="M3 3v18h18"></path>
        <path d="M18.7 8l-5.1 5.2-2.8-2.7L7 14.3"></path>
      </svg>
      Analytics
    </button>
  </div>

  <!-- Pending Comments Tab -->
  <div id="pending-tab" class="tab-content active">
    <div class="tab-header">
      <h2>Pending Comments</h2>
      <div class="bulk-actions">
        <button class="bulk-btn approve-bulk" id="bulk-approve">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M20 6L9 17l-5-5"></path>
          </svg>
          Approve Selected
        </button>
        <button class="bulk-btn reject-bulk" id="bulk-reject">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
          Reject Selected
        </button>
      </div>
    </div>

    <div class="comments-list">
      {
        pendingComments?.map((comment) => (
          <div class="comment-item" data-comment-id={comment.id}>
            <div class="comment-header">
              <div class="comment-checkbox">
                <input
                  type="checkbox"
                  class="comment-select"
                  value={comment.id}
                />
              </div>
              <div class="user-info">
                <div class="user-avatar">
                  {comment.user_profile?.avatar_type === "preset" ? (
                    <div
                      class="avatar-preset"
                      data-preset={comment.user_profile.avatar_preset_id}
                    >
                      {comment.user_profile.display_name?.charAt(0) || "U"}
                    </div>
                  ) : (
                    <img src={comment.user_profile?.avatar_url} alt="Avatar" />
                  )}
                </div>
                <div class="user-details">
                  <span class="user-name">
                    {comment.user_profile?.display_name || "Anonymous"}
                  </span>
                  <span class="user-rep">
                    Rep: {comment.user_profile?.reputation_score || 0}
                  </span>
                </div>
              </div>
              <div class="comment-meta">
                <span class="comment-date">
                  {new Date(comment.created_at).toLocaleDateString()}
                </span>
                <span class="article-title">{comment.article?.title}</span>
              </div>
            </div>

            <div class="comment-content">
              <p>{comment.content}</p>
              {comment.mention_users?.length > 0 && (
                <div class="mentions">
                  <svg
                    width="14"
                    height="14"
                    viewBox="0 0 24 24"
                    fill="none"
                    stroke="currentColor"
                    stroke-width="2"
                  >
                    <path d="M16 8a6 6 0 0 1 6 6v7h-4v-7a2 2 0 0 0-2-2 2 2 0 0 0-2 2v7h-4v-7a6 6 0 0 1 6-6z" />
                    <rect x="2" y="9" width="4" height="12" />
                    <circle cx="4" cy="4" r="2" />
                  </svg>
                  <span>Mentions: {comment.mention_users.length} users</span>
                </div>
              )}
            </div>

            <div class="comment-actions">
              <button
                class="action-btn approve"
                data-action="approve"
                data-comment-id={comment.id}
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="M20 6L9 17l-5-5" />
                </svg>
                Approve
              </button>
              <button
                class="action-btn reject"
                data-action="reject"
                data-comment-id={comment.id}
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <line x1="18" y1="6" x2="6" y2="18" />
                  <line x1="6" y1="6" x2="18" y2="18" />
                </svg>
                Reject
              </button>
              <button
                class="action-btn flag"
                data-action="flag"
                data-comment-id={comment.id}
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="M4 15s1-1 4-1 5 2 8 2 4-1 4-1V3s-1 1-4 1-5-2-8-2-4 1-4 1z" />
                  <line x1="4" y1="22" x2="4" y2="15" />
                </svg>
                Flag
              </button>
            </div>
          </div>
        ))
      }
    </div>
  </div>

  <!-- Other tabs similar structure... -->
</div>

<style>
  .moderation-panel {
    max-width: 1200px;
    margin: 0 auto;
    padding: 2rem;
    background: #0d1117;
    min-height: 100vh;
    color: #f0f6fc;
  }

  .panel-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    padding-bottom: 1rem;
    border-bottom: 1px solid #21262d;
  }

  .panel-header h1 {
    color: #f0f6fc;
    font-size: 2rem;
    font-weight: 700;
    margin: 0;
  }

  .stats-overview {
    display: flex;
    gap: 2rem;
  }

  .stat-item {
    display: flex;
    flex-direction: column;
    align-items: center;
    padding: 1rem;
    background: #161b22;
    border: 1px solid #21262d;
    min-width: 80px;
  }

  .stat-number {
    font-size: 1.5rem;
    font-weight: 700;
    color: #4285f4;
  }

  .stat-label {
    font-size: 0.875rem;
    color: #8b949e;
    margin-top: 0.25rem;
  }

  .tab-navigation {
    display: flex;
    gap: 0;
    margin-bottom: 2rem;
    border-bottom: 1px solid #21262d;
    background: #161b22;
  }

  .tab-button {
    padding: 1rem 1.5rem;
    border: none;
    background: transparent;
    color: #8b949e;
    font-weight: 500;
    cursor: pointer;
    border-bottom: 2px solid transparent;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.875rem;
  }

  .tab-button.active {
    color: #4285f4;
    border-bottom-color: #4285f4;
    background: #0d1117;
  }

  .tab-button:hover:not(.active) {
    color: #f0f6fc;
    background: #21262d;
  }

  .tab-content {
    display: none;
  }

  .tab-content.active {
    display: block;
  }

  .tab-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: #161b22;
    border: 1px solid #21262d;
  }

  .tab-header h2 {
    color: #f0f6fc;
    font-size: 1.5rem;
    font-weight: 600;
    margin: 0;
  }

  .bulk-actions {
    display: flex;
    gap: 1rem;
  }

  .bulk-btn {
    padding: 0.5rem 1rem;
    border: 1px solid #30363d;
    background: #21262d;
    color: #f0f6fc;
    cursor: pointer;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .bulk-btn:hover {
    background: #30363d;
  }

  .bulk-btn.approve-bulk:hover {
    background: #238636;
    border-color: #238636;
  }

  .bulk-btn.reject-bulk:hover {
    background: #da3633;
    border-color: #da3633;
  }

  .comments-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .comment-item {
    background: #161b22;
    border: 1px solid #21262d;
    padding: 1.5rem;
    transition: all 0.2s ease;
  }

  .comment-item:hover {
    border-color: #4285f4;
  }

  .comment-header {
    display: flex;
    align-items: center;
    gap: 1rem;
    margin-bottom: 1rem;
  }

  .comment-checkbox {
    flex-shrink: 0;
  }

  .comment-select {
    width: 16px;
    height: 16px;
    accent-color: #4285f4;
  }

  .user-info {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .user-avatar {
    width: 40px;
    height: 40px;
    overflow: hidden;
    flex-shrink: 0;
  }

  .user-avatar img {
    width: 100%;
    height: 100%;
    object-fit: cover;
  }

  .avatar-preset {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #4285f4;
    color: white;
    font-weight: 600;
    font-size: 1.25rem;
  }

  .user-details {
    display: flex;
    flex-direction: column;
  }

  .user-name {
    font-weight: 600;
    color: #f0f6fc;
  }

  .user-rep {
    font-size: 0.75rem;
    color: #8b949e;
  }

  .comment-meta {
    display: flex;
    flex-direction: column;
    margin-left: auto;
    text-align: right;
  }

  .comment-date {
    font-size: 0.875rem;
    color: #8b949e;
  }

  .article-title {
    font-size: 0.75rem;
    color: #8b949e;
    font-weight: 500;
  }

  .comment-content {
    margin-bottom: 1rem;
  }

  .comment-content p {
    color: #f0f6fc;
    line-height: 1.6;
    margin: 0;
  }

  .mentions {
    margin-top: 0.5rem;
    padding: 0.5rem;
    background: #21262d;
    border: 1px solid #30363d;
    font-size: 0.75rem;
    color: #8b949e;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .comment-actions {
    display: flex;
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .action-btn {
    padding: 0.5rem 1rem;
    border: 1px solid #30363d;
    background: #21262d;
    color: #f0f6fc;
    cursor: pointer;
    font-size: 0.75rem;
    font-weight: 500;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  .action-btn:hover {
    background: #30363d;
  }

  .action-btn.approve:hover {
    background: #238636;
    border-color: #238636;
  }

  .action-btn.reject:hover {
    background: #da3633;
    border-color: #da3633;
  }

  .action-btn.flag:hover {
    background: #fb8500;
    border-color: #fb8500;
  }

  /* Light mode styles */
  :global(.light) .moderation-panel {
    background: white;
    color: #374151;
  }

  :global(.light) .panel-header {
    border-bottom-color: #e2e8f0;
  }

  :global(.light) .panel-header h1 {
    color: #374151;
  }

  :global(.light) .stat-item {
    background: #f8f9fa;
    border-color: #e2e8f0;
  }

  :global(.light) .stat-number {
    color: #243788;
  }

  :global(.light) .stat-label {
    color: #6b7280;
  }

  :global(.light) .tab-navigation {
    background: #f8f9fa;
    border-bottom-color: #e2e8f0;
  }

  :global(.light) .tab-button {
    color: #6b7280;
  }

  :global(.light) .tab-button.active {
    color: #243788;
    border-bottom-color: #243788;
    background: white;
  }

  :global(.light) .tab-button:hover:not(.active) {
    color: #374151;
    background: #e2e8f0;
  }

  :global(.light) .tab-header {
    background: #f8f9fa;
    border-color: #e2e8f0;
  }

  :global(.light) .tab-header h2 {
    color: #374151;
  }

  :global(.light) .bulk-btn {
    background: white;
    border-color: #d1d5db;
    color: #374151;
  }

  :global(.light) .bulk-btn:hover {
    background: #f9fafb;
  }

  :global(.light) .comment-item {
    background: white;
    border-color: #e2e8f0;
  }

  :global(.light) .comment-item:hover {
    border-color: #243788;
  }

  :global(.light) .user-name {
    color: #374151;
  }

  :global(.light) .user-rep {
    color: #6b7280;
  }

  :global(.light) .comment-date {
    color: #6b7280;
  }

  :global(.light) .article-title {
    color: #6b7280;
  }

  :global(.light) .comment-content p {
    color: #374151;
  }

  :global(.light) .mentions {
    background: #f9fafb;
    border-color: #e2e8f0;
    color: #6b7280;
  }

  :global(.light) .action-btn {
    background: white;
    border-color: #d1d5db;
    color: #374151;
  }

  :global(.light) .action-btn:hover {
    background: #f9fafb;
  }

  /* Responsive Design */
  @media (max-width: 768px) {
    .moderation-panel {
      padding: 1rem;
    }

    .panel-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .stats-overview {
      flex-wrap: wrap;
      gap: 1rem;
    }

    .tab-navigation {
      flex-wrap: wrap;
      gap: 0;
    }

    .tab-button {
      padding: 0.75rem 1rem;
      font-size: 0.8125rem;
    }

    .tab-header {
      flex-direction: column;
      gap: 1rem;
      align-items: flex-start;
    }

    .bulk-actions {
      flex-wrap: wrap;
      gap: 0.5rem;
    }

    .comment-header {
      flex-direction: column;
      gap: 0.5rem;
      align-items: flex-start;
    }

    .comment-meta {
      margin-left: 0;
      text-align: left;
    }

    .comment-actions {
      flex-wrap: wrap;
      gap: 0.25rem;
    }

    .action-btn {
      flex: 1;
      min-width: 100px;
      justify-content: center;
    }
  }
</style>

<script>
  // Type definitions
  interface CommentSelectElement extends HTMLInputElement {
    checked: boolean;
    value: string;
  }

  interface ActionButtonElement extends HTMLButtonElement {
    dataset: {
      action?: string;
      commentId?: string;
    };
  }

  interface TabButtonElement extends HTMLButtonElement {
    dataset: {
      tab?: string;
    };
  }

  document.addEventListener("DOMContentLoaded", () => {
    // Tab switching functionality
    const tabButtons = document.querySelectorAll(
      ".tab-button"
    ) as NodeListOf<TabButtonElement>;
    const tabContents = document.querySelectorAll(".tab-content");

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const targetTab = button.dataset.tab;
        if (!targetTab) return;

        // Update active tab button
        tabButtons.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");

        // Show corresponding tab content
        tabContents.forEach((content) => {
          content.classList.remove("active");
          if (content.id === `${targetTab}-tab`) {
            content.classList.add("active");
          }
        });
      });
    });

    // Comment selection functionality
    const commentCheckboxes = document.querySelectorAll(
      ".comment-select"
    ) as NodeListOf<CommentSelectElement>;

    // Bulk actions
    const bulkApproveBtn = document.getElementById("bulk-approve");
    const bulkRejectBtn = document.getElementById("bulk-reject");

    bulkApproveBtn?.addEventListener("click", () => {
      const selectedComments = Array.from(commentCheckboxes)
        .filter((checkbox) => checkbox.checked)
        .map((checkbox) => checkbox.value);

      if (selectedComments.length > 0) {
        bulkModerateComments(selectedComments, "approve");
      }
    });

    bulkRejectBtn?.addEventListener("click", () => {
      const selectedComments = Array.from(commentCheckboxes)
        .filter((checkbox) => checkbox.checked)
        .map((checkbox) => checkbox.value);

      if (selectedComments.length > 0) {
        bulkModerateComments(selectedComments, "reject");
      }
    });

    // Individual comment actions
    const actionButtons = document.querySelectorAll(
      ".action-btn"
    ) as NodeListOf<ActionButtonElement>;
    actionButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const action = button.dataset.action;
        const commentId = button.dataset.commentId;

        if (action && commentId) {
          if (
            action === "delete" &&
            !confirm(
              "Are you sure you want to delete this comment? This action cannot be undone."
            )
          ) {
            return;
          }
          moderateComment(commentId, action);
        }
      });
    });
  });

  // Moderation functions
  async function moderateComment(
    commentId: string,
    action: string
  ): Promise<void> {
    try {
      const response = await fetch("/api/admin/comments/moderate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          commentId,
          action,
          reason: `Admin ${action} action`,
        }),
      });

      if (response.ok) {
        // Remove comment from current view
        const commentElement = document.querySelector(
          `[data-comment-id="${commentId}"]`
        ) as HTMLElement;
        if (commentElement) {
          commentElement.style.opacity = "0.5";
          setTimeout(() => {
            commentElement.remove();
          }, 300);
        }

        // Show success message
        showNotification(`Comment ${action}ed successfully`, "success");
      } else {
        const result = await response.json();
        showNotification(
          result.error || `Failed to ${action} comment`,
          "error"
        );
      }
    } catch (error) {
      console.error("Moderation error:", error);
      showNotification("An error occurred", "error");
    }
  }

  async function bulkModerateComments(
    commentIds: string[],
    action: string
  ): Promise<void> {
    try {
      const response = await fetch("/api/admin/comments/moderate", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          commentIds,
          action,
          reason: `Bulk ${action} action`,
        }),
      });

      if (response.ok) {
        // Remove comments from current view
        commentIds.forEach((commentId) => {
          const commentElement = document.querySelector(
            `[data-comment-id="${commentId}"]`
          ) as HTMLElement;
          if (commentElement) {
            commentElement.style.opacity = "0.5";
            setTimeout(() => {
              commentElement.remove();
            }, 300);
          }
        });

        // Show success message
        showNotification(
          `${commentIds.length} comments ${action}ed successfully`,
          "success"
        );
      } else {
        const result = await response.json();
        showNotification(
          result.error || `Failed to ${action} comments`,
          "error"
        );
      }
    } catch (error) {
      console.error("Bulk moderation error:", error);
      showNotification("An error occurred", "error");
    }
  }

  function showNotification(
    message: string,
    type: "success" | "error" | "info" = "info"
  ): void {
    const notification = document.createElement("div");
    notification.className = `notification notification-${type}`;
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 1rem 1.5rem;
      color: white;
      font-weight: 500;
      z-index: 1000;
      animation: slideInRight 0.3s ease;
    `;

    if (type === "success") {
      notification.style.backgroundColor = "#238636";
    } else if (type === "error") {
      notification.style.backgroundColor = "#da3633";
    } else {
      notification.style.backgroundColor = "#1f6feb";
    }

    document.body.appendChild(notification);

    setTimeout(() => {
      notification.remove();
    }, 5000);
  }

  // Animation styles
  if (!document.getElementById("tinkbyte-animations")) {
    const style = document.createElement("style");
    style.id = "tinkbyte-animations";
    style.textContent = `
      @keyframes slideInRight {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
    `;
    document.head.appendChild(style);
  }
</script>
