---
// src/layouts/AdminLayout.astro - COMPLETE Navigation Restored
import "../styles/admin-global.css";

declare global {
  interface WindowEventMap {
    adminMetricsUpdate: CustomEvent;
  }
  interface Window {
    handleSignOut?: () => Promise<void>;
    adminLayout?: any;
  }
}

export interface Props {
  title: string;
  description?: string;
  preloadData?: boolean;
}

const { title, description, preloadData = true } = Astro.props;
---

<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content={description || "TinkByte Admin Panel"} />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{title}</title>

    <!-- Critical CSS for instant loading -->
    <style>
      /* Perfect Square Loader - Critical CSS */
      .admin-loading {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: #0f172a;
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 9999;
        font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", sans-serif;
      }

      .loading-content {
        text-align: center;
        color: #f8fafc;
      }

      /* Perfect Square Spinner */
      .perfect-square-spinner {
        width: 40px;
        height: 40px;
        margin: 0 auto 1.5rem;
        position: relative;
      }

      .square-block {
        width: 18px;
        height: 18px;
        background: #3b82f6;
        position: absolute;
        animation: square-pulse 1.5s ease-in-out infinite;
      }

      .square-block:nth-child(1) {
        top: 0;
        left: 0;
        animation-delay: 0s;
      }

      .square-block:nth-child(2) {
        top: 0;
        right: 0;
        animation-delay: 0.1s;
      }

      .square-block:nth-child(3) {
        bottom: 0;
        left: 0;
        animation-delay: 0.2s;
      }

      .square-block:nth-child(4) {
        bottom: 0;
        right: 0;
        animation-delay: 0.3s;
      }

      @keyframes square-pulse {
        0%,
        100% {
          opacity: 0.3;
          transform: scale(0.8);
        }
        50% {
          opacity: 1;
          transform: scale(1);
        }
      }

      .loading-text h3 {
        font-size: 1.25rem;
        font-weight: 600;
        margin-bottom: 0.5rem;
        color: #f8fafc;
      }

      .loading-text p {
        font-size: 0.875rem;
        color: #cbd5e1;
        margin-bottom: 1rem;
      }

      /* Progress Bar */
      .loading-progress {
        width: 200px;
        height: 3px;
        background: #1e293b;
        margin: 0 auto;
        overflow: hidden;
      }

      .progress-bar {
        height: 100%;
        background: #3b82f6;
        width: 0%;
        transition: width 0.3s ease;
      }

      /* Hide admin content initially */
      .admin-content {
        display: none;
      }
    </style>

    <!-- Performance optimizations -->
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
    <link rel="dns-prefetch" href="https://cdnjs.cloudflare.com" />

    <!-- Fonts -->
    <link
      href="https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&display=swap"
      rel="stylesheet"
    />

    <!-- Font Awesome -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css"
    />

    <!-- Preload admin modules for faster loading -->
    {
      preloadData && (
        <>
          <link rel="modulepreload" href="/src/lib/admin-api.js" />
          <link rel="modulepreload" href="/src/lib/supabase.js" />
          <link rel="modulepreload" href="/src/lib/admin/auth.js" />
        </>
      )
    }
  </head>

  <script>
    import { adminAPIManager } from "../lib/admin-api.js";
    import { adminAuthManager } from "../lib/admin/auth.js";

    // OPTIMIZED: Faster admin layout management
    class AdminLayout {
      private isAuthenticated: boolean = false;
      private currentUser: any = null;
      private pendingCommentsCount: number = 0;
      private loadingProgress: number = 0;
      private initStartTime: number = Date.now();

      constructor() {
        this.init();
      }

      async init(): Promise<void> {
        try {
          console.log("üöÄ Fast admin layout initialization...");

          const [authResult, setupResult] = await Promise.allSettled([
            this.initializeAuth(),
            this.setupEventListeners(),
          ]);

          if (authResult.status === "rejected") {
            throw authResult.reason;
          }

          this.showAdminInterface();
          this.loadInitialDataInBackground();

          const totalTime = Date.now() - this.initStartTime;
          console.log(`‚úÖ Admin layout ready in ${totalTime}ms`);
        } catch (error) {
          console.error("‚ùå Admin layout initialization error:", error);
          this.handleInitError(error);
        }
      }

      private async initializeAuth(): Promise<void> {
        this.updateLoadingStatus("Verifying authentication...", 30);

        try {
          const [authInit, userCheck] = await Promise.all([
            adminAuthManager.initialize(),
            adminAuthManager.getCurrentUser(),
          ]);

          if (!userCheck) {
            throw new Error("No admin session found");
          }

          this.isAuthenticated = true;
          this.currentUser = userCheck;
          this.updateLoadingStatus("Authentication verified", 60);
        } catch (error) {
          console.error("‚ùå Authentication failed:", error);
          this.redirectToSignIn((error as Error).message);
          throw error;
        }
      }

      private async setupEventListeners(): Promise<void> {
        this.updateLoadingStatus("Setting up interface...", 80);

        this.setupCriticalListeners();
        this.setActiveNavigation();

        setTimeout(() => {
          this.setupNonCriticalListeners();
        }, 100);
      }

      private setupCriticalListeners(): void {
        const signoutBtn = document.getElementById("admin-signout");
        if (signoutBtn) {
          signoutBtn.addEventListener("click", () => {
            this.handleSignOut();
          });
        }
      }

      private setupNonCriticalListeners(): void {
        // Mobile menu toggle
        const mobileMenuToggle = document.getElementById("mobile-menu-toggle");
        const adminNav = document.getElementById("admin-nav");

        mobileMenuToggle?.addEventListener("click", () => {
          adminNav?.classList.toggle("mobile-open");
        });

        // User menu toggle
        const userMenuToggle = document.getElementById("user-menu-toggle");
        const userDropdown = document.getElementById("user-dropdown");

        if (userMenuToggle && userDropdown) {
          userMenuToggle.addEventListener("click", (e) => {
            e.stopPropagation();
            userDropdown.style.display =
              userDropdown.style.display === "none" ? "block" : "none";
          });
        }

        document.addEventListener("click", (e) => {
          if (userDropdown && !userDropdown.contains(e.target as Node)) {
            userDropdown.style.display = "none";
          }
        });

        this.setupKeyboardShortcuts();
      }

      private showAdminInterface(): void {
        this.updateLoadingStatus("Ready!", 100);
        this.updateUserInfo();

        setTimeout(() => {
          const loadingElement = document.getElementById("admin-loading");
          const contentElement = document.getElementById("admin-content");

          if (loadingElement) {
            loadingElement.style.opacity = "0";
            loadingElement.style.transition = "opacity 0.3s ease";
            setTimeout(() => {
              loadingElement.style.display = "none";
            }, 300);
          }

          if (contentElement) {
            contentElement.style.display = "flex";
            contentElement.style.opacity = "0";
            contentElement.style.transition = "opacity 0.3s ease";
            setTimeout(() => {
              contentElement.style.opacity = "1";
            }, 50);
          }
        }, 200);
      }

      private async loadInitialDataInBackground(): Promise<void> {
        try {
          await this.updatePendingCommentsCount();
          this.setupPeriodicRefresh();
          console.log("‚úÖ Background data loaded");
        } catch (error) {
          console.warn("‚ö†Ô∏è Some background data failed to load:", error);
        }
      }

      private updateUserInfo(): void {
        const userNameElement = document.getElementById("admin-user-name");
        const userAvatar = document.getElementById("user-avatar");

        if (this.currentUser?.email && userNameElement) {
          const displayName = this.currentUser.email.split("@")[0];
          userNameElement.textContent = displayName;

          if (userAvatar) {
            userAvatar.innerHTML = `<span>${displayName.charAt(0).toUpperCase()}</span>`;
          }
        }
      }

      private async updatePendingCommentsCount(): Promise<void> {
        try {
          const result = await adminAPIManager.getComments({
            status: "pending",
            limit: 1,
          });

          if (result.success && result.pagination) {
            this.pendingCommentsCount = result.pagination.total;
            this.updatePendingBadge();
          }
        } catch (error) {
          console.warn("Failed to load pending comments count:", error);
        }
      }

      private updatePendingBadge(): void {
        const badge = document.getElementById("pending-comments-badge");
        const countElement = document.getElementById("pending-count");

        if (badge && countElement) {
          if (this.pendingCommentsCount > 0) {
            countElement.textContent = this.pendingCommentsCount.toString();
            badge.style.display = "block";
          } else {
            badge.style.display = "none";
          }
        }
      }

      private setActiveNavigation(): void {
        try {
          const currentPath = window.location.pathname;
          const navLinks = document.querySelectorAll(
            '.nav-link:not([target="_blank"])'
          );

          navLinks.forEach((link) => {
            const href = link.getAttribute("href");
            if (href && currentPath === href) {
              link.classList.add("active");
            } else {
              link.classList.remove("active");
            }
          });
        } catch (error) {
          console.error("Navigation setup error:", error);
        }
      }

      private setupKeyboardShortcuts(): void {
        document.addEventListener("keydown", (e) => {
          if (e.altKey && e.key === "d") {
            e.preventDefault();
            window.location.href = "/admin/dashboard";
          }
          if (e.altKey && e.key === "m") {
            e.preventDefault();
            window.location.href = "/admin/moderation";
          }
          if (e.altKey && e.key === "u") {
            e.preventDefault();
            window.location.href = "/admin/users";
          }
          if (e.altKey && e.key === "a") {
            e.preventDefault();
            window.location.href = "/admin/analytics";
          }
          if (e.key === "Escape") {
            const userDropdown = document.getElementById("user-dropdown");
            if (userDropdown) {
              userDropdown.style.display = "none";
            }
          }
        });
      }

      private setupPeriodicRefresh(): void {
        setInterval(
          () => {
            this.updatePendingCommentsCount();
          },
          2 * 60 * 1000
        );
      }

      private updateLoadingStatus(status: string, progress: number): void {
        const statusElement = document.getElementById("loading-status");
        const progressBar = document.getElementById("progress-bar");

        if (statusElement) {
          statusElement.textContent = status;
        }

        if (progressBar) {
          progressBar.style.width = `${progress}%`;
        }

        this.loadingProgress = progress;
      }

      private handleInitError(error: any): void {
        const loadingElement = document.getElementById("admin-loading");
        const errorMessage =
          error instanceof Error
            ? error.message
            : "An unexpected error occurred";

        if (loadingElement) {
          loadingElement.innerHTML = `
            <div class="loading-content">
              <div style="color: #ef4444; font-size: 3rem; margin-bottom: 1rem;">
                <i class="fas fa-exclamation-triangle"></i>
              </div>
              <div class="loading-text">
                <h3>Initialization Failed</h3>
                <p>${errorMessage}</p>
              </div>
              <button 
                onclick="window.location.reload()" 
                style="
                  padding: 0.75rem 1.5rem; 
                  background: #3b82f6; 
                  color: white; 
                  border: none; 
                  cursor: pointer; 
                  font-weight: 500;
                  margin-top: 1rem;
                  border-radius: 4px;
                "
              >
                <i class="fas fa-refresh"></i> Retry
              </button>
            </div>
          `;
        }
      }

      private redirectToSignIn(reason?: string): void {
        const params = new URLSearchParams();
        if (reason) params.set("error", reason);
        params.set("redirect", window.location.pathname);

        window.location.href = `/auth/admin-signin?${params.toString()}`;
      }

      private async handleSignOut(): Promise<void> {
        try {
          await adminAuthManager.signOut();
          window.location.href = "/auth/admin-signin";
        } catch (error) {
          console.error("Sign out error:", error);
          window.location.href = "/auth/admin-signin";
        }
      }

      // All your public methods preserved
      public showGlobalLoading(message: string = "Loading..."): void {
        const loadingElement = document.getElementById("global-loading");
        const loadingText = document.getElementById("global-loading-text");

        if (loadingElement) {
          loadingElement.style.display = "flex";
        }

        if (loadingText) {
          loadingText.textContent = message;
        }
      }

      public hideGlobalLoading(): void {
        const loadingElement = document.getElementById("global-loading");
        if (loadingElement) {
          loadingElement.style.display = "none";
        }
      }

      public showNotification(
        message: string,
        type: "success" | "error" | "warning" | "info" = "info",
        duration: number = 5000
      ): void {
        const container = document.getElementById("notifications-container");
        if (!container) return;

        const notification = document.createElement("div");
        notification.className = `notification ${type}`;

        const icon = this.getNotificationIcon(type);
        notification.innerHTML = `
          <i class="${icon}"></i>
          <span>${message}</span>
        `;

        container.appendChild(notification);

        setTimeout(() => {
          if (notification.parentNode) {
            notification.style.animation = "slideOutRight 0.3s ease";
            setTimeout(() => {
              notification.remove();
            }, 300);
          }
        }, duration);

        notification.addEventListener("click", () => {
          notification.remove();
        });
      }

      private getNotificationIcon(type: string): string {
        switch (type) {
          case "success":
            return "fas fa-check-circle";
          case "error":
            return "fas fa-exclamation-circle";
          case "warning":
            return "fas fa-exclamation-triangle";
          case "info":
            return "fas fa-info-circle";
          default:
            return "fas fa-info-circle";
        }
      }

      public updatePendingCount(count: number): void {
        this.pendingCommentsCount = count;
        this.updatePendingBadge();
      }

      public getCurrentUser(): any {
        return this.currentUser;
      }

      public isUserAuthenticated(): boolean {
        return this.isAuthenticated;
      }
    }

    // Initialize immediately when DOM is ready
    if (document.readyState === "loading") {
      document.addEventListener("DOMContentLoaded", () => {
        const adminLayoutInstance = new AdminLayout();
        (window as any).adminLayout = adminLayoutInstance;
      });
    } else {
      const adminLayoutInstance = new AdminLayout();
      (window as any).adminLayout = adminLayoutInstance;
    }
  </script>
</html>

<body>
  <div id="admin-app">
    <!-- Perfect Square Loader -->
    <div id="admin-loading" class="admin-loading">
      <div class="loading-content">
        <div class="perfect-square-spinner">
          <div class="square-block"></div>
          <div class="square-block"></div>
          <div class="square-block"></div>
          <div class="square-block"></div>
        </div>
        <div class="loading-text">
          <h3>Loading Admin Panel...</h3>
          <p id="loading-status">Initializing...</p>
        </div>
        <div class="loading-progress">
          <div class="progress-bar" id="progress-bar"></div>
        </div>
      </div>
    </div>

    <!-- COMPLETE Admin Content with ALL Navigation -->
    <div id="admin-content" class="admin-content">
      <!-- Enhanced Admin Navigation - COMPLETE -->
      <nav class="admin-nav" id="admin-nav">
        <!-- Mobile Menu Toggle -->
        <div class="mobile-menu-toggle" id="mobile-menu-toggle">
          <i class="fas fa-bars"></i>
        </div>

        <!-- Brand Section -->
        <div class="nav-brand">
          <a href="/admin/dashboard" class="brand-link">
            <div class="brand-logo">
              <!-- TinkByte Logo SVG -->
              <svg
                xmlns="http://www.w3.org/2000/svg"
                viewBox="0 0 200 200"
                class="logo-svg"
                aria-label="TinkByte Logo"
              >
                <defs>
                  <style>
                    .logo-accent {
                      fill: #4285f4;
                    }
                    .logo-primary {
                      fill: #f0f6fc;
                    }
                    .logo-bg {
                      fill: none;
                    }
                  </style>
                </defs>
                <rect class="logo-bg" width="200" height="200"></rect>
                <g>
                  <g>
                    <rect
                      class="logo-primary"
                      x="63.34"
                      y="118.44"
                      width="10.6"
                      height="40.2"></rect>
                    <polygon
                      class="logo-primary"
                      points="115.73 73.67 115.73 63.07 21.54 63.07 21.54 73.67 63.4 73.67 63.4 115.75 74 115.75 74 73.67 115.73 73.67"
                    ></polygon>
                  </g>
                  <path
                    class="logo-accent"
                    d="M177.02,91.46c-.96-2.09-2.4-4.58-4.32-7.46.52-1.05.94-2.16,1.24-3.34.3-1.18.46-2.38.46-3.6v-20.02c0-2.88-.7-5.52-2.09-7.92-1.4-2.4-3.29-4.29-5.69-5.69-2.4-1.39-5.04-2.09-7.92-2.09h-74.44v10.6h74.44c1.39,0,2.57.5,3.53,1.5.96,1,1.44,2.2,1.44,3.6v20.02c0,1.4-.48,2.6-1.44,3.6-.96,1-2.14,1.5-3.53,1.5h-74.44v53.38h78.5c2.88,0,5.52-.7,7.92-2.09,2.4-1.39,4.29-3.29,5.69-5.69,1.39-2.4,2.09-5.04,2.09-7.92v-21.98c0-2.18-.48-4.32-1.44-6.41ZM167.86,119.85c0,1.4-.5,2.6-1.5,3.6-1,1-2.2,1.5-3.6,1.5h-62.8c-1.4,0-2.6-.5-3.6-1.5-1-1-1.5-2.2-1.5-3.6v-21.98c0-1.39.5-2.59,1.5-3.6,1-1,2.2-1.5,3.6-1.5h62.8c1.39,0,2.59.5,3.6,1.5,1,1,1.5,2.2,1.5,3.6v21.98Z"
                  ></path>
                </g>
              </svg>
            </div>
            <div class="brand-info">
              <span class="brand-name">TinkByte Admin</span>
              <span class="brand-version">v1.0</span>
            </div>
          </a>
        </div>

        <!-- Navigation Menu - COMPLETE -->
        <div class="nav-menu" id="nav-menu">
          <div class="nav-section">
            <div class="nav-section-title">Overview</div>
            <a href="/admin/dashboard" class="nav-link" data-page="dashboard">
              <i class="fas fa-tachometer-alt"></i>
              <span>Dashboard</span>
              <div class="nav-indicator"></div>
            </a>
            <a href="/admin/analytics" class="nav-link" data-page="analytics">
              <i class="fas fa-chart-line"></i>
              <span>Analytics</span>
              <div class="nav-indicator"></div>
            </a>
          </div>

          <div class="nav-section">
            <div class="nav-section-title">Content Management</div>
            <a href="/admin/moderation" class="nav-link" data-page="moderation">
              <i class="fas fa-shield-alt"></i>
              <span>Moderation</span>
              <div
                class="pending-badge"
                id="pending-comments-badge"
                style="display: none;"
              >
                <span id="pending-count">0</span>
              </div>
              <div class="nav-indicator"></div>
            </a>
            <a href="/admin/articles" class="nav-link" data-page="articles">
              <i class="fas fa-file-alt"></i>
              <span>Articles</span>
              <div class="nav-indicator"></div>
            </a>
            <a href="/admin/categories" class="nav-link" data-page="categories">
              <i class="fas fa-tags"></i>
              <span>Categories</span>
              <div class="nav-indicator"></div>
            </a>
            <a href="/admin/authors" class="nav-link" data-page="authors">
              <i class="fas fa-user-edit"></i>
              <span>Authors</span>
              <div class="nav-indicator"></div>
            </a>
            <a href="/admin/podcasts" class="nav-link" data-page="podcasts">
              <i class="fas fa-podcast"></i>
              <span>Podcasts</span>
              <div class="nav-indicator"></div>
            </a>
            <a href="/admin/users" class="nav-link" data-page="users">
              <i class="fas fa-users"></i>
              <span>Users</span>
              <div class="nav-indicator"></div>
            </a>
            <a href="/admin/feedback" class="nav-link" data-page="feedback">
              <i class="fas fa-comment-dots"></i>
              <span>Feedback</span>
              <div class="nav-indicator"></div>
            </a>
            <a
              href="/admin/newsletters"
              class="nav-link"
              data-page="newsletters"
            >
              <i class="fas fa-envelope"></i>
              <span>Newsletters</span>
              <div class="nav-indicator"></div>
            </a>
          </div>

          <!-- CMS Access Section -->
          <div class="nav-section">
            <div class="nav-section-title">Content Creation</div>
              <a href="/admin?cms=true" class="nav-link cms-link" target="_blank" rel="noopener noreferrer">
                <i class="fas fa-edit"></i>
                <span>TinaCMS</span>
                <i class="fas fa-external-link-alt nav-external"></i>
                <div class="nav-indicator"></div>
              </a>
              <i class="fas fa-edit"></i>
              <span>TinaCMS</span>
              <i class="fas fa-external-link-alt nav-external"></i>
              <div class="nav-indicator"></div>
            </a>
          </div>

          <!-- Quick Links -->
          <div class="nav-section">
            <div class="nav-section-title">Quick Access</div>
            <a
              href="/"
              class="nav-link"
              target="_blank"
              rel="noopener noreferrer"
            >
              <i class="fas fa-home"></i>
              <span>View Site</span>
              <i class="fas fa-external-link-alt nav-external"></i>
              <div class="nav-indicator"></div>
            </a>
            <a href="/admin/settings" class="nav-link" data-page="settings">
              <i class="fas fa-cog"></i>
              <span>Settings</span>
              <div class="nav-indicator"></div>
            </a>
          </div>
        </div>

        <!-- Fixed User Section - COMPLETE -->
        <div class="nav-user" id="nav-user">
          <div class="user-profile">
            <div class="user-avatar" id="user-avatar">
              <i class="fas fa-user"></i>
            </div>
            <div class="user-details">
              <span class="user-name" id="admin-user-name">Loading...</span>
              <span class="user-role">Administrator</span>
              <div class="user-status online" id="user-status">
                <span class="status-dot"></span>
                <span class="status-text">Online</span>
              </div>
            </div>
          </div>

          <div class="user-actions">
            <button
              class="user-action-btn"
              id="user-menu-toggle"
              title="User Menu"
            >
              <i class="fas fa-ellipsis-v"></i>
            </button>
          </div>

          <!-- User Dropdown Menu -->
          <div class="user-dropdown" id="user-dropdown" style="display: none;">
            <a href="/admin/profile" class="dropdown-item">
              <i class="fas fa-user-edit"></i>
              <span>Edit Profile</span>
            </a>
            <a href="/admin/reset-password" class="dropdown-item">
              <i class="fas fa-key"></i>
              <span>Change Password</span>
            </a>
            <div class="dropdown-divider"></div>
            <button class="dropdown-item signout-btn" id="admin-signout">
              <i class="fas fa-sign-out-alt"></i>
              <span>Sign Out</span>
            </button>
          </div>
        </div>
      </nav>

      <!-- Main Content Area -->
      <main class="admin-main" id="admin-main">
        <div class="page-content">
          <slot />
        </div>

        <!-- Global Notifications Container -->
        <div id="notifications-container" class="notifications-container"></div>

        <!-- Global Loading Overlay -->
        <div id="global-loading" class="global-loading" style="display: none;">
          <div class="loading-overlay">
            <div class="perfect-square-spinner">
              <div class="square-block"></div>
              <div class="square-block"></div>
              <div class="square-block"></div>
              <div class="square-block"></div>
            </div>
            <p id="global-loading-text">Loading...</p>
          </div>
        </div>
      </main>
    </div>
  </div>
</body>
