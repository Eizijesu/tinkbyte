---
// src/layouts/Layout.astro
import { SITE } from "../config/site";
import Header from "../components/ui/Header.astro";
import Footer from "../components/ui/Footer.astro";
import "../styles/global.css";

export interface Props {
  title?: string;
  description?: string;
  image?: string;
  canonical?: string;
  noindex?: boolean;
  type?: "website" | "article";
  publishedTime?: string;
  modifiedTime?: string;
  author?: string;
  tags?: string[];
}

const {
  title = SITE.title,
  description = SITE.description,
  image = SITE.defaultImage,
  canonical,
  noindex = false,
  type = "website",
  publishedTime,
  modifiedTime,
  author = SITE.author,
  tags = [],
} = Astro.props;

// Safe URL construction with proper error handling
const getSafeCanonicalURL = () => {
  try {
    if (canonical) {
      return canonical.startsWith("http")
        ? canonical
        : new URL(canonical, Astro.site).toString();
    }
    if (Astro.site) {
      return new URL(Astro.url.pathname, Astro.site).toString();
    }
    return `${Astro.url.origin}${Astro.url.pathname}`;
  } catch (error) {
    console.warn("Error constructing canonical URL:", error);
    return Astro.url.href;
  }
};

const getSafeSocialImage = () => {
  try {
    if (image.startsWith("http://") || image.startsWith("https://")) {
      return image;
    }
    if (Astro.site) {
      return new URL(image, Astro.site).toString();
    }
    return `${Astro.url.origin}${image}`;
  } catch (error) {
    console.warn("Error constructing social image URL:", error);
    return `${Astro.url.origin}${SITE.defaultImage}`;
  }
};

const canonicalURL = getSafeCanonicalURL();
const socialImage = getSafeSocialImage();

// Enhanced structured data
const getStructuredData = () => {
  const baseData = {
    "@context": "https://schema.org",
    "@type": type === "article" ? "Article" : "WebSite",
    name: title,
    description: description,
    url: canonicalURL,
    publisher: {
      "@type": "Organization",
      name: SITE.name,
      logo: {
        "@type": "ImageObject",
        url: `${Astro.url.origin}/logo.png`,
      },
      url: SITE.url,
      sameAs: [
        `https://twitter.com/${SITE.social.twitter.replace("@", "")}`,
        `https://linkedin.com/${SITE.social.linkedin}`,
        `https://github.com/${SITE.social.github}`,
        `https://youtube.com/${SITE.social.youtube.replace("@", "")}`,
        `https://instagram.com/${SITE.social.instagram.replace("@", "")}`,
        `https://tiktok.com/${SITE.social.tiktok.replace("@", "")}`,
      ],
    },
  };

  if (type === "article") {
    return {
      ...baseData,
      "@type": "Article",
      headline: title,
      image: {
        "@type": "ImageObject",
        url: socialImage,
        width: 1200,
        height: 630,
      },
      datePublished: publishedTime,
      dateModified: modifiedTime || publishedTime,
      author: {
        "@type": "Person",
        name: author,
      },
      mainEntityOfPage: {
        "@type": "WebPage",
        "@id": canonicalURL,
      },
      keywords: tags.join(", "),
    };
  }

  return {
    ...baseData,
    potentialAction: {
      "@type": "SearchAction",
      target: {
        "@type": "EntryPoint",
        urlTemplate: `${SITE.url}/search?q={search_term_string}`,
      },
      "query-input": "required name=search_term_string",
    },
  };
};

const structuredData = getStructuredData();
---

<!doctype html>
<html lang={SITE.locale.split("-")[0]} class="scroll-smooth">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta name="generator" content={Astro.generator} />

    <!-- Performance Optimizations -->
    <link rel="dns-prefetch" href="//images.unsplash.com" />
    <link rel="dns-prefetch" href="//fonts.googleapis.com" />
    <link rel="dns-prefetch" href="//fonts.gstatic.com" />
    <link rel="dns-prefetch" href="//cdnjs.cloudflare.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />

    <!-- FontAwesome Icons - THIS IS WHAT WAS MISSING! -->
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css"
      integrity="sha512-DTOQO9RWCH3ppGqcWaEA1BIZOC6xxalwEsw9c2QQeAIftl+Vegovlnee1c9QX4TctnWMn13TZye+giMm8e2LwA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />

    <!-- Primary Meta Tags -->
    <title>{title}</title>
    <meta name="title" content={title} />
    <meta name="description" content={description} />
    <meta name="author" content={author} />
    <link rel="canonical" href={canonicalURL} />

    <!-- Robots and SEO -->
    {
      noindex ? (
        <meta name="robots" content="noindex, nofollow" />
      ) : (
        <meta name="robots" content="index, follow" />
      )
    }
    <meta name="language" content="English" />
    {tags.length > 0 && <meta name="keywords" content={tags.join(", ")} />}

    <!-- Open Graph / Facebook -->
    <meta property="og:type" content={type} />
    <meta property="og:url" content={canonicalURL} />
    <meta property="og:title" content={title} />
    <meta property="og:description" content={description} />
    <meta property="og:image" content={socialImage} />
    <meta property="og:image:width" content="1200" />
    <meta property="og:image:height" content="630" />
    <meta property="og:site_name" content={SITE.name} />
    <meta property="og:locale" content={SITE.locale} />

    <!-- Article specific Open Graph tags -->
    {
      publishedTime && (
        <meta property="article:published_time" content={publishedTime} />
      )
    }
    {
      modifiedTime && (
        <meta property="article:modified_time" content={modifiedTime} />
      )
    }
    {author && <meta property="article:author" content={author} />}
    {tags.map((tag) => <meta property="article:tag" content={tag} />)}

    <!-- Twitter Card -->
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:site" content={SITE.social.twitter} />
    <meta name="twitter:creator" content={SITE.social.twitter} />
    <meta name="twitter:url" content={canonicalURL} />
    <meta name="twitter:title" content={title} />
    <meta name="twitter:description" content={description} />
    <meta name="twitter:image" content={socialImage} />

    <!-- Favicons -->
    <link rel="icon" type="image/svg+xml" href={SITE.favicon} />
    <link rel="icon" type="image/png" sizes="32x32" href="/favicon-32x32.png" />
    <link rel="icon" type="image/png" sizes="16x16" href="/favicon-16x16.png" />
    <link rel="apple-touch-icon" sizes="180x180" href="/apple-touch-icon.png" />
    <link rel="manifest" href="/site.webmanifest" />
    <meta name="theme-color" content={SITE.brand.primary} />

    <!-- RSS and Alternate Links -->
    <link
      rel="alternate"
      type="application/rss+xml"
      title={`${SITE.name} RSS Feed`}
      href="/rss.xml"
    />

    <!-- Structured Data -->
    <script
      type="application/ld+json"
      set:html={JSON.stringify(structuredData)}
    />

    <!-- Theme Detection Script (Prevent FOUC) -->
    <script is:inline>
      (function () {
        const getTheme = () => {
          if (typeof localStorage !== "undefined") {
            const stored = localStorage.getItem("theme");
            if (stored && ["light", "dark"].includes(stored)) {
              return stored;
            }
          }

          if (
            window.matchMedia &&
            window.matchMedia("(prefers-color-scheme: dark)").matches
          ) {
            return "dark";
          }

          return "light";
        };

        const theme = getTheme();

        if (theme === "dark") {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.remove("dark");
        }

        // Store the theme
        if (typeof localStorage !== "undefined") {
          localStorage.setItem("theme", theme);
        }
      })();
    </script>
  </head>

  <body
    class="bg-white dark:bg-zinc-900 text-zinc-900 dark:text-zinc-100 transition-colors duration-300 font-space-grotesk antialiased"
  >
    <!-- Skip Navigation Link -->
    <a
      href="#main-content"
      class="sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 focus:bg-white focus:dark:bg-zinc-900 focus:px-4 focus:py-2 focus:rounded-lg focus:shadow-lg focus:z-50 focus:ring-2 focus:ring-blue-500 focus:outline-none"
    >
      Skip to main content
    </a>

    <div class="min-h-screen flex flex-col">
      <Header />

      <main id="main-content" class="flex-1">
        <slot />
      </main>

      <Footer />
    </div>

    <!-- Enhanced Scripts -->
    <script>
      document.addEventListener("DOMContentLoaded", () => {
        // Smooth scroll for anchor links
        document.querySelectorAll('a[href^="#"]').forEach((anchor) => {
          anchor.addEventListener("click", function (e) {
            e.preventDefault();
            const target = document.querySelector(this.getAttribute("href"));
            if (target) {
              target.scrollIntoView({
                behavior: "smooth",
                block: "start",
              });
            }
          });
        });

        // Intersection Observer for animations
        const observerOptions = {
          threshold: 0.1,
          rootMargin: "0px 0px -50px 0px",
        };

        const observer = new IntersectionObserver((entries) => {
          entries.forEach((entry) => {
            if (entry.isIntersecting) {
              entry.target.classList.add("animate-in");
              observer.unobserve(entry.target);
            }
          });
        }, observerOptions);

        // Observe elements with fade-in class
        document.querySelectorAll(".fade-in").forEach((el) => {
          observer.observe(el);
        });

        // External link handling
        document.querySelectorAll('a[href^="http"]').forEach((link) => {
          if (!link.href.includes(window.location.hostname)) {
            link.setAttribute("target", "_blank");
            link.setAttribute("rel", "noopener noreferrer");
          }
        });

        // Reading progress bar (if exists)
        const progressBar = document.querySelector(".reading-progress");
        if (progressBar) {
          window.addEventListener("scroll", () => {
            const winScroll =
              document.body.scrollTop || document.documentElement.scrollTop;
            const height =
              document.documentElement.scrollHeight -
              document.documentElement.clientHeight;
            const scrolled = (winScroll / height) * 100;
            progressBar.style.width = scrolled + "%";
          });
        }
      });
    </script>
  </body>
</html>
