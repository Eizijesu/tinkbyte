---
// src/pages/profile/preferences.astro - CLEAN VERSION
import ProfileLayout from "../../layouts/ProfileLayout.astro";
---

<ProfileLayout
  title="Preferences | TinkByte"
  description="Customize your TinkByte experience"
>
  <div class="preferences-page">
    <!-- Notifications -->
    <div class="section">
      <h2 class="section-title">
        <i class="fas fa-bell"></i>
        Notifications
      </h2>
      <div class="preferences-list">
        <div class="preference-item">
          <div class="preference-info">
            <span class="preference-name">Email Notifications</span>
            <span class="preference-description">New articles and updates</span>
          </div>
          <label class="toggle-switch">
            <input type="checkbox" id="email-notifications" />
            <span class="toggle-slider"></span>
          </label>
        </div>
        <div class="preference-item">
          <div class="preference-info">
            <span class="preference-name">Comment Notifications</span>
            <span class="preference-description">Replies and mentions</span>
          </div>
          <label class="toggle-switch">
            <input type="checkbox" id="comment-notifications" />
            <span class="toggle-slider"></span>
          </label>
        </div>
        <div class="preference-item">
          <div class="preference-info">
            <span class="preference-name">Newsletter Frequency</span>
            <span class="preference-description"
              >How often to receive newsletters</span
            >
          </div>
          <select id="newsletter-frequency" class="preference-select">
            <option value="weekly">Weekly</option>
            <option value="monthly">Monthly</option>
            <option value="never">Never</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Display -->
    <div class="section">
      <h2 class="section-title">
        <i class="fas fa-palette"></i>
        Display
      </h2>
      <div class="preferences-list">
        <div class="preference-item">
          <div class="preference-info">
            <span class="preference-name">Theme</span>
            <span class="preference-description">Choose your color scheme</span>
          </div>
          <select id="theme-preference" class="preference-select">
            <option value="system">System</option>
            <option value="light">Light</option>
            <option value="dark">Dark</option>
          </select>
        </div>
        <div class="preference-item">
          <div class="preference-info">
            <span class="preference-name">Language</span>
            <span class="preference-description">Interface language</span>
          </div>
          <select id="language-preference" class="preference-select">
            <option value="en">English</option>
            <option value="es">Espa√±ol</option>
            <option value="fr">Fran√ßais</option>
          </select>
        </div>
      </div>
    </div>

    <!-- Privacy -->
    <div class="section">
      <h2 class="section-title">
        <i class="fas fa-shield-alt"></i>
        Privacy
      </h2>
      <div class="preferences-list">
        <div class="preference-item">
          <div class="preference-info">
            <span class="preference-name">Profile Visibility</span>
            <span class="preference-description">Who can see your profile</span>
          </div>
          <select id="profile-visibility" class="preference-select">
            <option value="public">Public</option>
            <option value="members">Members Only</option>
            <option value="private">Private</option>
          </select>
        </div>
        <div class="preference-item">
          <div class="preference-info">
            <span class="preference-name">Show Email</span>
            <span class="preference-description">Display email on profile</span>
          </div>
          <label class="toggle-switch">
            <input type="checkbox" id="show-email" />
            <span class="toggle-slider"></span>
          </label>
        </div>
      </div>
    </div>

    <!-- Save Button -->
    <div class="save-section">
      <button type="button" class="btn-save" id="save-preferences-btn">
        <i class="fas fa-save"></i>
        Save Preferences
      </button>
    </div>
  </div>
</ProfileLayout>

<style>
  .preferences-page {
    max-width: 1200px;
    margin: 0 auto;
    display: flex;
    flex-direction: column;
    gap: 2rem;
    padding: 2rem;
  }

  .section {
    background: white;
    border: 2px solid #e2e8f0;
    padding: 1.5rem;
    display: flex;
    flex-direction: column;
    gap: 1.25rem;
  }

  html.dark .section {
    background: #1e293b;
    border-color: #334155;
  }

  .section-title {
    font-size: 1.125rem;
    font-weight: 700;
    color: #1e293b;
    margin: 0;
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  html.dark .section-title {
    color: #f1f5f9;
  }

  .preferences-list {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .preference-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    background: #f8fafc;
    border: 2px solid transparent;
    gap: 1rem;
  }

  html.dark .preference-item {
    background: #0f172a;
    border-color: #334155;
  }

  .preference-info {
    flex: 1;
  }

  .preference-name {
    display: block;
    font-size: 0.875rem;
    font-weight: 600;
    color: #1e293b;
    margin-bottom: 0.25rem;
  }

  html.dark .preference-name {
    color: #f1f5f9;
  }

  .preference-description {
    display: block;
    font-size: 0.75rem;
    color: #64748b;
  }

  html.dark .preference-description {
    color: #94a3b8;
  }

  /* Toggle Switch */
  .toggle-switch {
    position: relative;
    display: inline-block;
    width: 50px;
    height: 28px;
    cursor: pointer;
  }

  .toggle-switch input {
    opacity: 0;
    width: 0;
    height: 0;
  }

  .toggle-slider {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #e2e8f0;
    transition: 0.3s;
    border: 2px solid #e2e8f0;
  }

  .toggle-slider:before {
    position: absolute;
    content: "";
    height: 18px;
    width: 18px;
    left: 2px;
    bottom: 2px;
    background-color: #64748b;
    transition: 0.3s;
  }

  input:checked + .toggle-slider {
    background-color: #243788;
    border-color: #243788;
  }

  input:checked + .toggle-slider:before {
    transform: translateX(22px);
    background-color: white;
  }

  html.dark .toggle-slider {
    background-color: #334155;
    border-color: #334155;
  }

  html.dark .toggle-slider:before {
    background-color: #94a3b8;
  }

  html.dark input:checked + .toggle-slider {
    background-color: #b4bce1;
    border-color: #b4bce1;
  }

  html.dark input:checked + .toggle-slider:before {
    background-color: #0f172a;
  }

  /* Select Dropdown */
  .preference-select {
    padding: 0.5rem 0.75rem;
    border: 2px solid #e2e8f0;
    background: white;
    color: #1e293b;
    font-size: 0.875rem;
    min-width: 120px;
    cursor: pointer;
    font-family: inherit;
    font-weight: 600;
  }

  .preference-select:focus {
    outline: none;
    border-color: #243788;
  }

  html.dark .preference-select {
    background: #0f172a;
    border-color: #334155;
    color: #f1f5f9;
  }

  html.dark .preference-select:focus {
    border-color: #b4bce1;
  }

  /* Save Section */
  .save-section {
    text-align: center;
    padding: 1.5rem;
    background: white;
    border: 2px solid #e2e8f0;
  }

  html.dark .save-section {
    background: #1e293b;
    border-color: #334155;
  }

  .btn-save {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: #10b981;
    color: white;
    border: 2px solid #10b981;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    font-family: inherit;
  }

  .btn-save:hover {
    background: white;
    color: #10b981;
  }

  .btn-save:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Responsive */
  @media (max-width: 768px) {
    .preferences-page {
      padding: 1rem;
    }

    .preference-item {
      flex-direction: column;
      text-align: center;
      gap: 0.75rem;
    }

    .preference-select {
      width: 100%;
    }
  }
</style>

<script>
  import { authManager } from "../../lib/auth.js";
  import { supabase } from "../../lib/supabase.js";

  class PreferencesManager {
    private authManager = authManager;
    private currentUser: any = null;
    private initialized = false;

    constructor() {
      this.init();
    }

    async init() {
      if (this.initialized) return;

      try {
        console.log("üöÄ Preferences: Starting initialization...");

        // Initialize auth manager
        await this.authManager.initialize();

        // Check authentication
        this.currentUser = this.authManager.getUser();
        if (!this.currentUser) {
          console.log("‚ùå Not authenticated, redirecting to signin");
          window.location.href = "/auth/signin";
          return;
        }

        console.log("‚úÖ User authenticated:", this.currentUser.email);

        // Load user preferences
        await this.loadUserPreferences();
        this.setupEventListeners();

        this.initialized = true;
        console.log("‚úÖ Preferences: Initialization complete");
      } catch (error) {
        console.error("‚ùå Preferences: Initialization failed:", error);
        // Show error but don't redirect
        this.showToast("Failed to load preferences", "error");
      }
    }

    async loadUserPreferences() {
      try {
        console.log("üìä Loading user preferences...");

        const { data: userPrefs, error } = await supabase
          .from("user_preferences")
          .select("*")
          .eq("id", this.currentUser.id)
          .single();

        if (error && error.code !== "PGRST116") {
          throw error;
        }

        if (userPrefs) {
          console.log("‚úÖ Preferences loaded:", userPrefs);
          this.updateUI(userPrefs);
        } else {
          console.log("üìù Creating default preferences...");
          await this.createDefaultPreferences();
        }
      } catch (error) {
        console.error("‚ùå Error loading preferences:", error);
        throw error;
      }
    }

    async createDefaultPreferences() {
      try {
        const defaultPrefs = {
          id: this.currentUser.id,
          email_notifications: true,
          comment_notifications: true,
          newsletter_frequency: "weekly",
          theme_preference: "system",
          language: "en",
          profile_visibility: "public",
          show_email: false,
          created_at: new Date().toISOString(),
          updated_at: new Date().toISOString(),
        };

        const { error } = await supabase
          .from("user_preferences")
          .insert(defaultPrefs);

        if (error) throw error;

        console.log("‚úÖ Default preferences created");
        this.updateUI(defaultPrefs);
      } catch (error) {
        console.error("‚ùå Error creating default preferences:", error);
        throw error;
      }
    }

    updateUI(prefs: any) {
      try {
        const emailNotifications = document.getElementById(
          "email-notifications"
        ) as HTMLInputElement;
        if (emailNotifications)
          emailNotifications.checked = prefs.email_notifications ?? true;

        const commentNotifications = document.getElementById(
          "comment-notifications"
        ) as HTMLInputElement;
        if (commentNotifications)
          commentNotifications.checked = prefs.comment_notifications ?? true;

        const newsletterFrequency = document.getElementById(
          "newsletter-frequency"
        ) as HTMLSelectElement;
        if (newsletterFrequency)
          newsletterFrequency.value = prefs.newsletter_frequency || "weekly";

        const themePreference = document.getElementById(
          "theme-preference"
        ) as HTMLSelectElement;
        if (themePreference)
          themePreference.value = prefs.theme_preference || "system";

        const languagePreference = document.getElementById(
          "language-preference"
        ) as HTMLSelectElement;
        if (languagePreference)
          languagePreference.value = prefs.language || "en";

        const profileVisibility = document.getElementById(
          "profile-visibility"
        ) as HTMLSelectElement;
        if (profileVisibility)
          profileVisibility.value = prefs.profile_visibility || "public";

        const showEmail = document.getElementById(
          "show-email"
        ) as HTMLInputElement;
        if (showEmail) showEmail.checked = prefs.show_email ?? false;

        console.log("‚úÖ UI updated with preferences");
      } catch (error) {
        console.error("‚ùå Error updating UI:", error);
      }
    }

    setupEventListeners() {
      const saveBtn = document.getElementById(
        "save-preferences-btn"
      ) as HTMLButtonElement;
      saveBtn?.addEventListener("click", () => this.savePreferences());

      const themeSelect = document.getElementById(
        "theme-preference"
      ) as HTMLSelectElement;
      themeSelect?.addEventListener("change", (e) => this.handleThemeChange(e));
    }

    async savePreferences() {
      if (!this.currentUser) {
        this.showToast("Not authenticated", "error");
        return;
      }

      const saveBtn = document.getElementById(
        "save-preferences-btn"
      ) as HTMLButtonElement;
      if (!saveBtn) return;

      const originalContent = saveBtn.innerHTML;
      saveBtn.disabled = true;
      saveBtn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Saving...';

      try {
        const emailNotifications = document.getElementById(
          "email-notifications"
        ) as HTMLInputElement;
        const commentNotifications = document.getElementById(
          "comment-notifications"
        ) as HTMLInputElement;
        const newsletterFrequency = document.getElementById(
          "newsletter-frequency"
        ) as HTMLSelectElement;
        const themePreference = document.getElementById(
          "theme-preference"
        ) as HTMLSelectElement;
        const languagePreference = document.getElementById(
          "language-preference"
        ) as HTMLSelectElement;
        const profileVisibility = document.getElementById(
          "profile-visibility"
        ) as HTMLSelectElement;
        const showEmail = document.getElementById(
          "show-email"
        ) as HTMLInputElement;

        const formData = {
          id: this.currentUser.id,
          email_notifications: emailNotifications?.checked ?? true,
          comment_notifications: commentNotifications?.checked ?? true,
          newsletter_frequency: newsletterFrequency?.value || "weekly",
          theme_preference: themePreference?.value || "system",
          language: languagePreference?.value || "en",
          profile_visibility: profileVisibility?.value || "public",
          show_email: showEmail?.checked ?? false,
          updated_at: new Date().toISOString(),
        };

        console.log("üíæ Saving preferences:", formData);

        const { error } = await supabase
          .from("user_preferences")
          .upsert(formData, { onConflict: "id" });

        if (error) throw error;

        console.log("‚úÖ Preferences saved successfully");
        this.showToast("Preferences saved successfully!");
      } catch (error: any) {
        console.error("‚ùå Error saving preferences:", error);
        this.showToast("Failed to save preferences", "error");
      } finally {
        saveBtn.disabled = false;
        saveBtn.innerHTML = originalContent;
      }
    }

    handleThemeChange(event: Event) {
      const theme = (event.target as HTMLSelectElement).value;

      if (theme === "dark") {
        document.documentElement.classList.add("dark");
        localStorage.setItem("theme", "dark");
      } else if (theme === "light") {
        document.documentElement.classList.remove("dark");
        localStorage.setItem("theme", "light");
      } else {
        const prefersDark = window.matchMedia(
          "(prefers-color-scheme: dark)"
        ).matches;
        if (prefersDark) {
          document.documentElement.classList.add("dark");
        } else {
          document.documentElement.classList.remove("dark");
        }
        localStorage.setItem("theme", "system");
      }

      console.log("üé® Theme changed to:", theme);
    }

    showToast(message: string, type: "success" | "error" = "success") {
      const toast = document.createElement("div");
      toast.className = `toast ${type}`;
      toast.style.cssText = `
        position: fixed;
        top: 20px;
        right: 20px;
        padding: 1rem 1.5rem;
        background: ${type === "success" ? "#10b981" : "#ef4444"};
        color: white;
        font-weight: 600;
        font-size: 0.875rem;
        z-index: 10000;
        opacity: 0;
        transform: translateX(100%);
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        gap: 0.5rem;
        border-radius: 4px;
        box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
      `;

      toast.innerHTML = `
        <i class="fas fa-${type === "success" ? "check-circle" : "exclamation-triangle"}"></i>
        ${message}
      `;

      document.body.appendChild(toast);

      setTimeout(() => {
        toast.style.opacity = "1";
        toast.style.transform = "translateX(0)";
      }, 100);

      setTimeout(() => {
        toast.style.opacity = "0";
        toast.style.transform = "translateX(100%)";
        setTimeout(() => toast.remove(), 300);
      }, 3000);
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new PreferencesManager();
  });
</script>
