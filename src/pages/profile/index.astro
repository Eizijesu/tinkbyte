---
// src/pages/profile/index.astro - OPTIMIZED SINGLETON VERSION
import ProfileLayout from "../../layouts/ProfileLayout.astro";
---

<ProfileLayout
  title="My Profile | TinkByte"
  description="Manage your TinkByte profile and preferences"
>
  <div class="profile-page">
    <div class="profile-container">
      <!-- Profile Header Card -->
      <div class="profile-header-card">
        <div class="profile-info">
          <div class="avatar-section">
            <img
              id="profile-avatar"
              src="/images/avatars/preset-1.svg"
              alt="Profile Avatar"
              class="profile-avatar"
            />
            <button
              class="avatar-edit-btn"
              id="edit-avatar-btn"
              title="Edit Profile"
            >
              <i class="fas fa-edit"></i>
            </button>
          </div>

          <div class="profile-details">
            <h1 class="profile-username" id="profile-name">Loading...</h1>
            <p class="profile-id" id="profile-id">#TB000000</p>
            <p class="follower-count" id="follower-count">0 Followers</p>
            <p class="member-since" id="member-since">Loading...</p>
          </div>

          <div class="profile-stats">
            <div class="following-stats">
              <span class="following-label">Following:</span>
              <div class="stats-row">
                <span class="stat-item" id="articles-count">0 Articles</span>
                <span class="stat-item" id="topics-count">0 Topics</span>
                <span class="stat-item" id="authors-count">0 Authors</span>
                <span class="stat-item" id="users-count">0 Users</span>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Content Grid -->
      <div class="content-grid">
        <!-- Profile Statistics -->
        <div class="stats-card">
          <div class="card-header">
            <h2 class="card-title">Profile Statistics</h2>
          </div>
          <div class="stats-grid">
            <div class="stat-box">
              <span class="stat-number" id="total-reads">0</span>
              <span class="stat-label">Articles Read</span>
            </div>
            <div class="stat-box">
              <span class="stat-number" id="total-comments">0</span>
              <span class="stat-label">Comments</span>
            </div>
          </div>

          <div class="quick-settings">
            <h3 class="settings-title">Quick Settings</h3>
            <div class="settings-list">
              <a href="/profile/account" class="setting-item">
                <i class="fas fa-user"></i>
                Account Settings
              </a>
              <a href="/profile/preferences" class="setting-item">
                <i class="fas fa-cog"></i>
                Preferences
              </a>
              <a href="/profile/following" class="setting-item">
                <i class="fas fa-heart"></i>
                Manage Following
              </a>
            </div>
          </div>
        </div>

        <!-- Activity Timeline -->
        <div class="activity-card">
          <div class="card-header">
            <h2 class="card-title">
              <i class="fas fa-chart-line"></i>
              Activity (<span id="activity-count">0</span>)
            </h2>
          </div>
          <div class="activity-timeline" id="activity-timeline">
            <div class="loading-state">Loading timeline...</div>
          </div>
        </div>

        <!-- Notifications - Full Width -->
        <div class="notifications-card">
          <div class="card-header">
            <h2 class="card-title">
              <i class="fas fa-bell"></i>
              Recent Notifications (<span id="notification-count-profile"
                >0</span
              >)
            </h2>
            <button
              class="clear-all-btn"
              id="clear-all-notifications"
              style="display: none;"
            >
              Clear All
            </button>
          </div>
          <div class="notification-timeline" id="notification-timeline">
            <div class="loading-state">Loading notifications...</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</ProfileLayout>

<style is:global>
  /* FIXED: Profile Container Layout */
  .profile-page {
    font-family: "Space Grotesk", sans-serif;
    background: white;
    min-height: 100vh;
    color: #1e293b;
    width: 100%;
  }

  html.dark .profile-page {
    background: #0f172a;
    color: #f8fafc;
  }

  /* CRITICAL FIX: Proper container constraints */
  .profile-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 1rem;
    width: 100%; /* Ensure full width within max-width */
    box-sizing: border-box; /* Include padding in width calculation */
  }

  /* FIXED: Profile Header Card - Proper width constraints */
  .profile-header-card {
    background: white;
    border: 2px solid #e2e8f0;
    padding: 1.5rem;
    border-radius: 0;
    width: 100%; /* Stay within container */
    box-sizing: border-box; /* Include padding and border in width */
    overflow: hidden; /* Prevent content overflow */
  }

  html.dark .profile-header-card {
    background: #1e293b;
    border-color: #334155;
  }

  /* FIXED: Profile Info Layout - Prevent overflow */
  .profile-info {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
    text-align: center;
    width: 100%;
    max-width: 100%; /* Prevent expansion beyond container */
  }

  .avatar-section {
    position: relative;
    align-self: center;
    flex-shrink: 0; /* Prevent shrinking */
  }

  .profile-avatar {
    width: 100px;
    height: 100px;
    border: 3px solid #e2e8f0;
    object-fit: cover;
    display: block;
    border-radius: 0;
  }

  html.dark .profile-avatar {
    border-color: #334155;
  }

  .avatar-edit-btn {
    position: absolute;
    top: 6px;
    right: 6px;
    width: 28px;
    height: 28px;
    background: #243788;
    color: white;
    border: 2px solid white;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 0.75rem;
    transition: all 0.2s ease;
    border-radius: 0;
  }

  .avatar-edit-btn:hover {
    background: #1e2d6b;
    transform: translateY(-1px);
  }

  html.dark .avatar-edit-btn {
    background: #b4bce1;
    color: #0f172a;
  }

  html.dark .avatar-edit-btn:hover {
    background: #94a3b8;
  }

  .profile-details {
    flex: 1;
    min-width: 0; /* Allow text truncation if needed */
  }

  .profile-username {
    font-size: 1.75rem;
    font-weight: 800;
    color: #1e293b;
    margin: 0 0 0.5rem 0;
    text-transform: uppercase;
    letter-spacing: -0.025em;
    line-height: 1.2;
    word-break: break-word; /* Handle long usernames */
  }

  html.dark .profile-username {
    color: #f8fafc;
  }

  .profile-id {
    font-size: 0.875rem;
    color: #64748b;
    margin: 0 0 0.75rem 0;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  html.dark .profile-id {
    color: #94a3b8;
  }

  .follower-count {
    font-size: 1rem;
    color: #1e293b;
    margin: 0 0 1rem 0;
    font-weight: 600;
  }

  html.dark .follower-count {
    color: #f8fafc;
  }

  .member-since {
    color: #64748b;
    font-size: 0.875rem;
    margin: 0;
    font-weight: 500;
  }

  html.dark .member-since {
    color: #94a3b8;
  }

  /* FIXED: Profile Stats - Proper width constraints */
  .profile-stats {
    width: 100%;
    max-width: 100%; /* Prevent overflow */
  }

  .following-stats {
    background: #f8fafc;
    padding: 1.5rem;
    border: 2px solid #e2e8f0;
    border-radius: 0;
    width: 100%;
    box-sizing: border-box;
  }

  html.dark .following-stats {
    background: #0f172a;
    border-color: #334155;
  }

  .following-label {
    display: block;
    color: #64748b;
    font-size: 0.875rem;
    font-weight: 600;
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    text-align: center;
  }

  html.dark .following-label {
    color: #94a3b8;
  }

  /* FIXED: Stats Row - Prevent overflow */
  .stats-row {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.75rem;
    width: 100%;
  }

  .stat-item {
    color: #1e293b;
    font-size: 0.8125rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.025em;
    padding: 0.75rem 0.5rem;
    background: white;
    border: 1px solid #e2e8f0;
    text-align: center;
    border-radius: 0;
    min-width: 0; /* Allow shrinking */
    overflow: hidden; /* Prevent text overflow */
    text-overflow: ellipsis; /* Add ellipsis for long text */
    white-space: nowrap; /* Keep text on one line */
  }

  html.dark .stat-item {
    color: #f8fafc;
    background: #1e293b;
    border-color: #334155;
  }

  /* TABLET: 768px and up - FIXED HORIZONTAL LAYOUT */
  @media (min-width: 768px) {
    .profile-container {
      padding: 1.5rem;
      gap: 1.5rem;
    }

    .profile-header-card {
      padding: 2rem;
    }

    /* CRITICAL FIX: Horizontal layout with proper constraints */
    .profile-info {
      flex-direction: row;
      text-align: left;
      gap: 2rem;
      align-items: flex-start;
      max-width: 100%; /* Stay within container */
    }

    .avatar-section {
      align-self: flex-start;
      flex-shrink: 0;
    }

    .profile-avatar {
      width: 120px;
      height: 120px;
    }

    .avatar-edit-btn {
      top: 8px;
      right: 8px;
      width: 32px;
      height: 32px;
      font-size: 0.875rem;
    }

    .profile-username {
      font-size: 2rem;
    }

    .profile-details {
      flex: 1;
      min-width: 0; /* Allow shrinking */
    }

    /* FIXED: Stats section width constraints */
    .profile-stats {
      min-width: 280px; /* Reduced from 300px */
      max-width: 320px; /* Add max-width constraint */
      flex-shrink: 0;
    }

    .following-label {
      text-align: left;
    }

    .stats-row {
      grid-template-columns: 1fr 1fr;
    }

    .stat-item {
      font-size: 0.875rem;
      padding: 0.5rem;
      white-space: normal; /* Allow wrapping on larger screens */
    }
  }

  /* DESKTOP: 1024px and up - Enhanced constraints */
  @media (min-width: 1024px) {
    .profile-container {
      padding: 2rem;
      gap: 2rem;
    }

    .profile-stats {
      min-width: 300px;
      max-width: 350px; /* Ensure it doesn't get too wide */
    }
  }

  /* LARGE DESKTOP: 1200px and up - Final constraints */
  @media (min-width: 1200px) {
    .profile-info {
      gap: 3rem; /* More space on very large screens */
    }

    .profile-stats {
      max-width: 380px; /* Allow slightly more width on very large screens */
    }
  }

  .content-grid {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .stats-card,
  .activity-card,
  .notifications-card {
    background: white;
    border: 2px solid #e2e8f0;
    border-radius: 0;
    width: 100%;
    box-sizing: border-box;
  }

  html.dark .stats-card,
  html.dark .activity-card,
  html.dark .notifications-card {
    background: #1e293b;
    border-color: #334155;
  }

  @media (min-width: 768px) {
    .content-grid {
      display: grid;
      grid-template-columns: 1fr 1fr;
      gap: 1.5rem;
    }

    .notifications-card {
      grid-column: 1 / -1;
    }
  }

  @media (min-width: 1024px) {
    .content-grid {
      gap: 2rem;
    }
  }
</style>

<script>
  import { authManager } from "../../lib/auth.js";
  import { TinkByteAPI } from "../../lib/supabase.js";

  class ProfilePageManager {
    private authManager = authManager;
    private initialized = false;
    private unsubscribeAuth: (() => void) | null = null;
    private dataCache = new Map<
      string,
      { data: any; timestamp: number; ttl: number }
    >();

    constructor() {
      this.init();
    }

    async init() {
      if (this.initialized) return;

      try {
        console.log("🚀 Profile Page: Starting initialization...");

        // Initialize auth manager
        await this.authManager.initialize();

        // Check authentication
        const user = this.authManager.getUser();
        const profile = this.authManager.getProfile();

        if (!user) {
          console.log("❌ Not authenticated, redirecting to signin");
          window.location.href = "/auth/signin";
          return;
        }

        console.log("✅ Profile Page: User authenticated:", user.email);

        // Update UI immediately with available data
        this.updateProfileUI(user, profile, null);

        // Load additional data in background
        await this.loadBackgroundData(user.id);

        // Setup event listeners
        this.setupEventListeners();

        // Listen for auth changes
        this.unsubscribeAuth = this.authManager.onAuthChange(
          (user, profile) => {
            if (!user) {
              window.location.href = "/auth/signin";
            } else {
              this.updateProfileUI(user, profile, null);
            }
          }
        );

        this.initialized = true;
        console.log("✅ Profile Page: Initialization complete");
      } catch (error) {
        console.error("❌ Profile Page: Initialization failed:", error);
        this.showError("Failed to load profile data");
      }
    }

    private getCachedData(key: string): any | null {
      const cached = this.dataCache.get(key);
      if (!cached) return null;

      const now = Date.now();
      if (now - cached.timestamp > cached.ttl) {
        this.dataCache.delete(key);
        return null;
      }

      return cached.data;
    }

    private setCachedData(
      key: string,
      data: any,
      ttlMinutes: number = 5
    ): void {
      this.dataCache.set(key, {
        data,
        timestamp: Date.now(),
        ttl: ttlMinutes * 60 * 1000,
      });
    }

    private async loadBackgroundData(userId: string) {
      try {
        console.log("📊 Loading background data for user:", userId);

        const [stats, activities] = await Promise.all([
          this.getUserStats(userId),
          this.getRecentActivities(userId),
        ]);

        const user = this.authManager.getUser();
        const profile = this.authManager.getProfile();

        this.updateProfileUI(user, profile, stats);
        this.updateActivityTimeline(activities);

        // Load notifications
        await this.loadProfileNotifications();

        console.log("✅ Background data loaded successfully");
      } catch (error) {
        console.error("❌ Error loading background data:", error);
      }
    }

    private async getUserStats(userId: string) {
      const cacheKey = `user-stats-${userId}`;
      let stats = this.getCachedData(cacheKey);

      if (stats) {
        console.log("⚡ Using cached user stats");
        return stats;
      }

      try {
        console.log("🔄 Fetching fresh user stats");

        const [followedArticles, followingTopics, followingUsers] =
          await Promise.all([
            TinkByteAPI.searchContent("", "users"), // Placeholder - replace with actual API calls
            Promise.resolve({ data: [] }), // Topics following
            Promise.resolve({ data: [] }), // Users following
          ]);

        stats = {
          followers: 0,
          followed_articles: 0,
          following_topics: 0,
          following_users: 0,
          articles_read: 0,
          comments_posted: 0,
        };

        this.setCachedData(cacheKey, stats, 5);
        return stats;
      } catch (error) {
        console.error("Error loading user stats:", error);
        return {
          followers: 0,
          followed_articles: 0,
          following_topics: 0,
          following_users: 0,
          articles_read: 0,
          comments_posted: 0,
        };
      }
    }

    private async getRecentActivities(userId: string) {
      const cacheKey = `user-activities-${userId}`;
      let activities = this.getCachedData(cacheKey);

      if (activities) {
        console.log("⚡ Using cached activities");
        return activities;
      }

      try {
        console.log("🔄 Fetching fresh activities");

        // For now, return mock data - replace with actual API call
        activities = [];

        this.setCachedData(cacheKey, activities, 2);
        return activities;
      } catch (error) {
        console.error("Error loading activities:", error);
        return [];
      }
    }

    private async loadProfileNotifications() {
      try {
        console.log("🔔 Loading profile notifications");

        const result = await TinkByteAPI.getUserNotifications(15);

        const notificationTimeline = document.getElementById(
          "notification-timeline"
        ) as HTMLElement;
        const notificationCountProfile = document.getElementById(
          "notification-count-profile"
        ) as HTMLElement;
        const clearAllBtn = document.getElementById(
          "clear-all-notifications"
        ) as HTMLButtonElement;

        if (!notificationTimeline || !notificationCountProfile) {
          console.warn("Notification elements not found");
          return;
        }

        if (result.success && result.data && result.data.length > 0) {
          const notifications = result.data;

          notificationCountProfile.textContent =
            notifications.length.toString();

          notificationTimeline.innerHTML = notifications
            .map((notification) => {
              const timeAgo = this.formatTime(notification.created_at);
              const commenterName =
                notification.comments?.profiles?.display_name || "Someone";
              const isUnread = !notification.is_read;

              return `
                <div class="notification-timeline-item ${isUnread ? "unread" : ""}" data-notification-id="${notification.id}">
                  <div class="notification-timeline-marker"></div>
                  <div class="notification-timeline-content">
                    <span class="notification-timeline-action">
                      <strong>${commenterName}</strong> mentioned you in a comment
                      ${isUnread ? '<span style="color: #3b82f6; font-size: 0.75rem; margin-left: 0.5rem;">NEW</span>' : ""}
                    </span>
                    <span class="notification-timeline-meta">${timeAgo}</span>
                  </div>
                </div>
              `;
            })
            .join("");

          // Show clear all button if there are notifications
          if (clearAllBtn) {
            clearAllBtn.style.display = "block";
            clearAllBtn.addEventListener("click", () =>
              this.clearAllNotifications()
            );
          }

          // Add click handlers for unread notifications
          notificationTimeline
            .querySelectorAll(".notification-timeline-item.unread")
            .forEach((item) => {
              const htmlItem = item as HTMLElement;
              htmlItem.addEventListener("click", async () => {
                const notificationId = htmlItem.dataset.notificationId;
                if (notificationId) {
                  await this.markNotificationAsRead(notificationId);
                  htmlItem.classList.remove("unread");
                  const newBadge = htmlItem.querySelector(
                    'span[style*="color: #3b82f6"]'
                  );
                  if (newBadge) newBadge.remove();
                }
              });
            });
        } else {
          notificationTimeline.innerHTML =
            '<div class="loading-state">No notifications yet</div>';
          notificationCountProfile.textContent = "0";
          if (clearAllBtn) clearAllBtn.style.display = "none";
        }
      } catch (error) {
        console.error("Error loading profile notifications:", error);
        const notificationTimeline = document.getElementById(
          "notification-timeline"
        ) as HTMLElement;
        if (notificationTimeline) {
          notificationTimeline.innerHTML =
            '<div class="loading-state">Failed to load notifications</div>';
        }
      }
    }

    private async clearAllNotifications() {
      try {
        const unreadItems = document.querySelectorAll(
          ".notification-timeline-item.unread"
        );

        for (const item of unreadItems) {
          const htmlItem = item as HTMLElement;
          const notificationId = htmlItem.dataset.notificationId;
          if (notificationId) {
            await TinkByteAPI.markNotificationAsRead(notificationId);
          }
        }

        // Refresh the notifications display
        await this.loadProfileNotifications();
      } catch (error) {
        console.error("Error clearing notifications:", error);
      }
    }

    private async markNotificationAsRead(notificationId: string) {
      try {
        await TinkByteAPI.markNotificationAsRead(notificationId);
      } catch (error) {
        console.error("Error marking notification as read:", error);
      }
    }

    private updateProfileUI(user: any, profile: any, stats: any) {
      const displayName = this.authManager.getDisplayName();
      const avatarUrl = this.authManager.getAvatarUrl();

      this.updateElement("profile-name", displayName);
      this.updateElement(
        "profile-id",
        `#TB${user?.id?.slice(-6)?.toUpperCase() || "000000"}`
      );
      this.updateElement(
        "member-since",
        `Member since ${this.formatDate(user?.created_at || new Date().toISOString())}`
      );

      const avatarElement = document.getElementById(
        "profile-avatar"
      ) as HTMLImageElement;
      if (avatarElement) {
        avatarElement.src = avatarUrl;
      }

      if (stats) {
        this.updateElement("follower-count", `${stats.followers} Followers`);
        this.updateElement(
          "articles-count",
          `${stats.followed_articles} Articles`
        );
        this.updateElement("topics-count", `${stats.following_topics} Topics`);
        this.updateElement("authors-count", `0 Authors`);
        this.updateElement("users-count", `${stats.following_users} Users`);
        this.updateElement("total-reads", stats.articles_read.toString());
        this.updateElement("total-comments", stats.comments_posted.toString());
      }
    }

    private updateActivityTimeline(activities: any[]) {
      const timelineElement = document.getElementById("activity-timeline");
      const activityCountElement = document.getElementById("activity-count");

      if (!timelineElement || !activityCountElement) return;

      activityCountElement.textContent = activities.length.toString();

      if (activities.length === 0) {
        timelineElement.innerHTML = `<div class="loading-state">No recent activity</div>`;
        return;
      }

      const groupedActivities = this.groupActivitiesByDate(activities);
      let timelineHTML = "";

      Object.entries(groupedActivities).forEach(([date, dateActivities]) => {
        timelineHTML += `<div class="timeline-date">${date}</div>`;
        (dateActivities as any[]).forEach((activity) => {
          timelineHTML += `
            <div class="timeline-item">
              <div class="timeline-marker"></div>
              <div class="timeline-content">
                <span class="timeline-action">${activity.description}</span>
                <span class="timeline-meta">${this.formatTime(activity.created_at)}</span>
              </div>
            </div>
          `;
        });
      });

      timelineElement.innerHTML = timelineHTML;
    }

    private groupActivitiesByDate(activities: any[]) {
      return activities.reduce(
        (groups, activity) => {
          const date = this.formatDate(activity.created_at);
          if (!groups[date]) {
            groups[date] = [];
          }
          groups[date].push(activity);
          return groups;
        },
        {} as Record<string, any[]>
      );
    }

    private setupEventListeners() {
      const editAvatarBtn = document.getElementById("edit-avatar-btn");
      editAvatarBtn?.addEventListener("click", () => {
        window.location.href = "/profile/account";
      });
    }

    private updateElement(id: string, value: string) {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value;
      }
    }

    private formatDate(dateString: string): string {
      try {
        return new Date(dateString).toLocaleDateString("en-US", {
          year: "numeric",
          month: "long",
          day: "numeric",
        });
      } catch {
        return "Unknown";
      }
    }

    private formatTime(dateString: string): string {
      try {
        const date = new Date(dateString);
        const now = new Date();
        const diffInSeconds = Math.floor(
          (now.getTime() - date.getTime()) / 1000
        );

        if (diffInSeconds < 60) return "Just now";
        if (diffInSeconds < 3600)
          return `${Math.floor(diffInSeconds / 60)}m ago`;
        if (diffInSeconds < 86400)
          return `${Math.floor(diffInSeconds / 3600)}h ago`;
        if (diffInSeconds < 2592000)
          return `${Math.floor(diffInSeconds / 86400)}d ago`;

        return date.toLocaleDateString();
      } catch {
        return "Unknown";
      }
    }

    private showError(message: string) {
      console.error(message);
      // You could add a toast notification here
    }

    // Cleanup method
    destroy() {
      if (this.unsubscribeAuth) {
        this.unsubscribeAuth();
        this.unsubscribeAuth = null;
      }
      this.dataCache.clear();
      this.initialized = false;
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new ProfilePageManager();
  });
</script>
