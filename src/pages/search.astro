---
import Layout from "../layouts/Layout.astro";
import ArticleCard from "../components/blog/ArticleCard.astro";
import Button from "../components/ui/Button.astro";
import { getAllPosts } from "../utils/content";
import { formatDate } from "../utils/helpers";
import type { BlogPost } from "../utils/types";

const allPosts = await getAllPosts();

// Transform posts to match ArticleCard props
const articles = allPosts.map((post: BlogPost) => ({
  title: post.data.title,
  excerpt: post.data.description || post.data.excerpt || "",
  date: formatDate(post.data.pubDate),
  readTime: `${post.data.readingTime || 5} min read`,
  slug: post.slug,
  image: post.data.heroImage || "/images/default-post.jpg",
  tags: post.data.tags || [], // Ensure tags is always an array
  category: post.data.category || "General", // Provide fallback
  author: {
    name: post.data.author || "TinkByte Team",
    avatar: "/images/default-avatar.jpg",
    role: "Author",
    bio: "Content creator and writer"
  }
}));

const featuredArticles = articles.filter((article: any) => 
  allPosts.find((post: BlogPost) => post.slug === article.slug)?.data.featured
).slice(0, 3);

// FIXED: Filter out undefined/null values and ensure we have valid strings
const categories = [...new Set(
  allPosts
    .map((post: BlogPost) => post.data.category)
    .filter((category): category is string => Boolean(category && typeof category === 'string'))
)];

const popularTags = [...new Set(
  allPosts
    .flatMap((post: BlogPost) => post.data.tags || [])
    .filter((tag): tag is string => Boolean(tag && typeof tag === 'string'))
)].slice(0, 10);
---

<Layout 
  title="Search - Find Your Next Read"
  description="Search through our comprehensive collection of articles, tutorials, and insights on technology, AI, and product development."
>
  <!-- Hero Section -->
  <section class="relative py-16 lg:py-24 overflow-hidden">
    <div class="absolute inset-0 bg-gradient-to-r from-blue-600 via-purple-600 to-pink-600 opacity-10"></div>
    <div class="absolute inset-0 bg-[url('/images/pattern.svg')] opacity-5"></div>
    
    <div class="container mx-auto px-4 relative z-10">
      <div class="max-w-4xl mx-auto text-center">
        <h1 class="text-4xl lg:text-6xl font-bold text-zinc-900 dark:text-white mb-6">
          Discover Your Next
          <span class="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent">
            Great Read
          </span>
        </h1>
        <p class="text-xl text-zinc-600 dark:text-zinc-300 mb-12 max-w-2xl mx-auto">
          Search through our comprehensive collection of articles, tutorials, and insights on technology, AI, and product development.
        </p>
        
        <!-- Search Bar -->
        <div class="relative max-w-2xl mx-auto mb-8">
          <div class="relative">
            <input
              type="text"
              id="search-input"
              placeholder="Search articles, topics, or keywords..."
              class="w-full px-6 py-4 text-lg bg-white dark:bg-zinc-800 border-2 border-zinc-200 dark:border-zinc-700 rounded-sm focus:border-blue-500 dark:focus:border-blue-400 focus:outline-none focus:ring-4 focus:ring-blue-500/20 transition-all duration-200 pr-14"
            />
            <button
              id="search-button"
              class="absolute right-2 top-1/2 -translate-y-1/2 p-2 bg-zinc-600 hover:bg-zinc-800 text-white rounded-sm transition-colors duration-200"
              aria-label="Search"
            >
              <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
              </svg>
            </button>
          </div>
          
          <!-- Clear Button -->
          <button
            id="clear-search"
            class="absolute right-16 top-1/2 -translate-y-1/2 p-2 text-zinc-400 hover:text-zinc-600 dark:hover:text-zinc-300 transition-colors duration-200 hidden"
            aria-label="Clear search"
          >
            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
        
        <!-- Quick Search Suggestions -->
        {popularTags.length > 0 && (
          <div class="flex flex-wrap justify-center gap-2 mb-8">
            {popularTags.slice(0, 6).map((tag: string) => (
              <button
                class="px-4 py-2 text-sm bg-zinc-100 dark:bg-zinc-800 text-zinc-700 dark:text-zinc-300 rounded-sm hover:bg-zinc-200 dark:hover:bg-zinc-700 transition-colors duration-200 quick-search-tag"
                data-search={tag}
              >
                {tag}
              </button>
            ))}
          </div>
        )}
      </div>
    </div>
  </section>

  <!-- Search Results -->
  <section class="py-16" id="search-results" style="display: none;">
    <div class="container mx-auto px-4">
      <div class="mb-8">
        <h2 class="text-2xl font-bold text-zinc-900 dark:text-white mb-2" id="results-title">
          Search Results
        </h2>
        <p class="text-zinc-600 dark:text-zinc-400" id="results-count">
          Found 0 articles
        </p>
      </div>
      
      <div class="grid gap-8 lg:gap-12" id="results-container">
        <!-- Results will be populated here -->
      </div>
      
      <!-- No Results -->
      <div id="no-results" class="text-center py-16" style="display: none;">
        <div class="max-w-md mx-auto">
          <div class="w-24 h-24 mx-auto mb-6 bg-zinc-100 dark:bg-zinc-800 rounded-sm flex items-center justify-center">
            <svg class="w-12 h-12 text-zinc-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-zinc-900 dark:text-white mb-2">
            No articles found
          </h3>
          <p class="text-zinc-600 dark:text-zinc-400 mb-6">
            Try adjusting your search terms or browse our categories below.
          </p>
          <Button href="/blog" variant="primary">
            Browse All Articles
          </Button>
        </div>
      </div>
    </div>
  </section>

  <!-- Featured Articles -->
  {featuredArticles.length > 0 && (
    <section class="py-16 bg-zinc-50 dark:bg-zinc-900/50" id="featured-section">
      <div class="container mx-auto px-4">
        <div class="text-center mb-12">
          <h2 class="text-3xl font-bold text-zinc-900 dark:text-white mb-4">
            Featured Articles
          </h2>
          <p class="text-zinc-600 dark:text-zinc-400 max-w-2xl mx-auto">
            Discover our most popular and trending articles across various topics.
          </p>
        </div>
        
        <div class="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {featuredArticles.map((article: any) => (
            <ArticleCard {...article} />
          ))}
        </div>
      </div>
    </section>
  )}

  <!-- Categories & Tags -->
  <section class="py-16" id="browse-section">
    <div class="container mx-auto px-4">
      <div class="grid lg:grid-cols-2 gap-12">
        <!-- Categories -->
        {categories.length > 0 && (
          <div>
            <h3 class="text-2xl font-bold text-zinc-900 dark:text-white mb-6">
              Browse by Category
            </h3>
            <div class="grid gap-3">
              {categories.map((category: string) => {
                // FIXED: Safe URL generation
                const categorySlug = category.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
                return (
                  <a
                    href={`/blog/categories/${categorySlug}`}
                    class="flex items-center justify-between p-4 bg-white dark:bg-zinc-800 rounded-sm border border-zinc-200 dark:border-zinc-700 hover:border-blue-300 dark:hover:border-blue-600 transition-colors duration-200 group"
                  >
                    <span class="font-medium text-zinc-900 dark:text-white group-hover:text-blue-600 dark:group-hover:text-blue-400">
                      {category}
                    </span>
                    <svg class="w-5 h-5 text-zinc-400 group-hover:text-blue-600 dark:group-hover:text-blue-400 transition-colors duration-200" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                    </svg>
                  </a>
                );
              })}
            </div>
          </div>
        )}
        
        <!-- Popular Tags -->
        {popularTags.length > 0 && (
          <div>
            <h3 class="text-2xl font-bold text-zinc-900 dark:text-white mb-6">
              Popular Tags
            </h3>
            <div class="flex flex-wrap gap-3">
              {popularTags.map((tag: string) => {
                // FIXED: Safe URL generation
                const tagSlug = tag.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '');
                return (
                  <a
                    href={`/blog/tags/${tagSlug}`}
                    class="px-4 py-2 bg-white dark:bg-zinc-800 text-zinc-700 dark:text-zinc-300 rounded-sm border border-zinc-200 dark:border-zinc-700 hover:border-blue-300 dark:hover:border-blue-600 hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200"
                  >
                    {tag}
                  </a>
                );
              })}
            </div>
          </div>
        )}
      </div>
    </div>
  </section>
</Layout>

<script>
  interface SearchableArticle {
    title: string;
    excerpt: string;
    date: string;
    readTime: string;
    slug: string;
    image: string;
    tags: string[];
    category: string;
    author: {
      name: string;
      avatar: string;
      role: string;
      bio: string;
    };
  }

  // FIXED: Safe JSON parsing with fallback
  let articles: SearchableArticle[] = [];
  try {
    const articlesData = document.getElementById('articles-data')?.textContent;
    if (articlesData) {
      articles = JSON.parse(articlesData);
    }
  } catch (error) {
    console.error('Error parsing articles data:', error);
    articles = [];
  }

  let recentSearches: string[] = [];
  try {
    recentSearches = JSON.parse(localStorage.getItem('recentSearches') || '[]');
  } catch (error) {
    console.error('Error parsing recent searches:', error);
    recentSearches = [];
  }

  const searchInput = document.getElementById('search-input') as HTMLInputElement;
  const searchButton = document.getElementById('search-button') as HTMLButtonElement;
  const clearButton = document.getElementById('clear-search') as HTMLButtonElement;
  const resultsSection = document.getElementById('search-results') as HTMLElement;
  const featuredSection = document.getElementById('featured-section') as HTMLElement;
  const browseSection = document.getElementById('browse-section') as HTMLElement;
  const resultsContainer = document.getElementById('results-container') as HTMLElement;
  const resultsTitle = document.getElementById('results-title') as HTMLElement;
  const resultsCount = document.getElementById('results-count') as HTMLElement;
  const noResults = document.getElementById('no-results') as HTMLElement;

  // FIXED: Search functionality with better error handling
  function performSearch(query: string): void {
    if (!query.trim()) {
      clearSearch();
      return;
    }

    const searchTerm = query.toLowerCase();
    const results = articles.filter((article: SearchableArticle) => {
      try {
        return (
          article.title?.toLowerCase().includes(searchTerm) ||
          article.excerpt?.toLowerCase().includes(searchTerm) ||
          article.category?.toLowerCase().includes(searchTerm) ||
          (article.tags && Array.isArray(article.tags) && article.tags.some((tag: string) => 
            tag && typeof tag === 'string' && tag.toLowerCase().includes(searchTerm)
          ))
        );
      } catch (error) {
        console.error('Error filtering article:', article, error);
        return false;
      }
    });

    showSearchResults(query, results);
    addToRecentSearches(query);
  }

  function showSearchResults(query: string, results: SearchableArticle[]): void {
    // Hide other sections
    if (featuredSection) featuredSection.style.display = 'none';
    if (browseSection) browseSection.style.display = 'none';
    
    // Show results section
    if (resultsSection) resultsSection.style.display = 'block';
    
    // Update title and count
    if (resultsTitle) resultsTitle.textContent = `Search Results for "${query}"`;
    if (resultsCount) resultsCount.textContent = `Found ${results.length} article${results.length !== 1 ? 's' : ''}`;
    
    if (results.length === 0) {
      if (resultsContainer) resultsContainer.style.display = 'none';
      if (noResults) noResults.style.display = 'block';
    } else {
      if (noResults) noResults.style.display = 'none';
      if (resultsContainer) {
        resultsContainer.style.display = 'grid';
        resultsContainer.innerHTML = results.map((article: SearchableArticle) => {
          // FIXED: Safe property access
          const title = article.title || 'Untitled';
          const excerpt = article.excerpt || 'No description available';
          const image = article.image || '/images/default-post.jpg';
          const category = article.category || 'General';
          const date = article.date || '';
          const readTime = article.readTime || '';
          const slug = article.slug || '';
          const authorName = article.author?.name || 'Unknown Author';
          const authorAvatar = article.author?.avatar || '/images/default-avatar.jpg';
          const authorRole = article.author?.role || 'Author';
          const tags = Array.isArray(article.tags) ? article.tags.filter(tag => tag && typeof tag === 'string') : [];

          return `
            <article class="bg-white dark:bg-zinc-800 rounded-sm border border-zinc-200 dark:border-zinc-700 overflow-hidden hover:shadow-lg transition-shadow duration-200">
              <div class="md:flex">
                <div class="md:w-1/3">
                  <img
                    src="${image}"
                    alt="${title}"
                    class="w-full h-48 md:h-full object-cover"
                    loading="lazy"
                  />
                </div>
                <div class="md:w-2/3 p-6">
                  <div class="flex items-center gap-3 mb-3">
                    <span class="px-3 py-1 text-xs font-medium bg-blue-100 dark:bg-blue-900/30 text-blue-600 dark:text-blue-400 rounded-sm">
                      ${category}
                    </span>
                    ${date ? `<span class="text-sm text-zinc-500 dark:text-zinc-400">${date}</span>` : ''}
                    ${readTime ? `<span class="text-sm text-zinc-500 dark:text-zinc-400">${readTime}</span>` : ''}
                  </div>
                  
                  <h3 class="text-xl font-bold text-zinc-900 dark:text-white mb-3 line-clamp-2">
                    <a href="/blog/${slug}" class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors duration-200">
                      ${title}
                    </a>
                  </h3>
                  
                  <p class="text-zinc-600 dark:text-zinc-300 mb-4 line-clamp-2">
                    ${excerpt}
                  </p>
                  
                  <div class="flex items-center justify-between">
                    <div class="flex items-center gap-3">
                      <img
                        src="${authorAvatar}"
                        alt="${authorName}"
                        class="w-8 h-8 rounded-sm"
                      />
                      <div>
                        <p class="text-sm font-medium text-zinc-900 dark:text-white">
                          ${authorName}
                        </p>
                        <p class="text-xs text-zinc-500 dark:text-zinc-400">
                          ${authorRole}
                        </p>
                      </div>
                    </div>
                    
                    ${tags.length > 0 ? `
                      <div class="flex flex-wrap gap-2">
                        ${tags.slice(0, 2).map((tag: string) => `
                          <span class="px-2 py-1 text-xs bg-zinc-100 dark:bg-zinc-700 text-zinc-600 dark:text-zinc-300 rounded">
                            ${tag}
                          </span>
                        `).join('')}
                      </div>
                    ` : ''}
                  </div>
                </div>
              </div>
            </article>
          `;
        }).join('');
      }
    }
    
    // Show clear button
    if (clearButton) clearButton.classList.remove('hidden');
  }

  function clearSearch(): void {
    if (searchInput) searchInput.value = '';
    if (clearButton) clearButton.classList.add('hidden');
    if (resultsSection) resultsSection.style.display = 'none';
    if (featuredSection) featuredSection.style.display = 'block';
    if (browseSection) browseSection.style.display = 'block';
  }

  function addToRecentSearches(query: string): void {
    try {
      // Remove if already exists
      recentSearches = recentSearches.filter((item: string) => item !== query);
      // Add to beginning
      recentSearches.unshift(query);
      // Keep only last 5
      recentSearches = recentSearches.slice(0, 5);
      // Save to localStorage
      localStorage.setItem('recentSearches', JSON.stringify(recentSearches));
    } catch (error) {
      console.error('Error saving recent searches:', error);
    }
  }

  // Event listeners
  if (searchInput) {
    searchInput.addEventListener('input', (e: Event) => {
      const target = e.target as HTMLInputElement;
      const query = target.value.trim();
      if (query.length > 2) {
        performSearch(query);
      } else if (query.length === 0) {
        clearSearch();
      }
    });

    searchInput.addEventListener('keypress', (e: KeyboardEvent) => {
      if (e.key === 'Enter') {
        const target = e.target as HTMLInputElement;
        performSearch(target.value);
      }
    });
  }

  if (searchButton) {
    searchButton.addEventListener('click', () => {
      if (searchInput) {
        performSearch(searchInput.value);
      }
    });
  }

  if (clearButton) {
    clearButton.addEventListener('click', clearSearch);
  }

  // Quick search tags
  document.querySelectorAll('.quick-search-tag').forEach((button: Element) => {
    button.addEventListener('click', () => {
      const searchTerm = (button as HTMLElement).dataset.search;
      if (searchTerm && searchInput) {
        searchInput.value = searchTerm;
        performSearch(searchTerm);
      }
    });
  });

  // URL search parameter handling
  try {
    const urlParams = new URLSearchParams(window.location.search);
    const searchQuery = urlParams.get('q');
    if (searchQuery && searchInput) {
      searchInput.value = searchQuery;
      performSearch(searchQuery);
    }
  } catch (error) {
    console.error('Error handling URL parameters:', error);
  }
</script>

<!-- Articles data for search -->
<script is:inline id="articles-data" type="application/json">
  {JSON.stringify(articles)}
</script>