---
// src/pages/blog/authors/[author].astro - Fixed with Newsletter Grid Pattern
import Layout from "../../../layouts/Layout.astro";
import ArticleCard from "../../../components/blog/ArticleCard.astro";
import Button from "../../../components/ui/Button.astro";
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";

type Author = CollectionEntry<'authors'>;
type BlogPost = CollectionEntry<'blog'>;

export async function getStaticPaths() {
  const authors = await getCollection("authors");
  
  return authors.map((author) => {
    const authorSlug = author.data.name
      .toLowerCase()
      .replace(/\s+/g, '-')
      .replace(/[^\w-]+/g, '');
    
    return {
      params: { author: authorSlug },
      props: { author },
    };
  });
}

interface Props {
  author: Author;
}

const { author } = Astro.props;

// Render the content component
const { Content } = await author.render();

// Get all blog posts by this author
const allPosts = await getCollection("blog", ({ data }) => !data.draft);
const authorPosts = allPosts.filter(post => {
  const postAuthor = post.data.authorInfo?.name || post.data.author || 'TinkByte Team';
  return postAuthor.toLowerCase() === author.data.name.toLowerCase();
}).sort((a, b) => new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime());

// Format posts for ArticleCard
const formatPost = (post: BlogPost) => {
  let authorData = {
    name: post.data.authorInfo?.name || post.data.author || 'TinkByte Team',
    avatar: post.data.authorInfo?.avatar || post.data.authorAvatar || author.data.avatar,
    role: post.data.authorInfo?.role || post.data.authorRole || author.data.role,
    bio: post.data.authorInfo?.bio || post.data.authorBio || author.data.bio
  };

  return {
    title: post.data.title,
    excerpt: post.data.excerpt,
    date: post.data.pubDate.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }),
    readTime: post.data.readTime || "5 min read",
    slug: post.slug,
    image: post.data.image || "https://images.unsplash.com/photo-1677442136019-21780ecad995?w=600&h=400&fit=crop",
    tags: post.data.tags || [],
    category: post.data.category,
    author: authorData,
    audioUrl: post.data.audioUrl,
    featured: post.data.featured,
    trending: post.data.trending,
  };
};

const featuredPosts = authorPosts.filter(post => post.data.featured);
const recentPosts = authorPosts.slice(0, 6);

const pageTitle = `${author.data.name} | TinkByte Authors`;
const pageDescription = author.data.bio || `Articles and insights by ${author.data.name}`;
---

<Layout title={pageTitle} description={pageDescription}>
  <!-- Author Hero -->
  <section class="relative py-12 lg:py-16 overflow-hidden">
    <div class="absolute inset-0 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 opacity-5"></div>

    <div class="container mx-auto px-4 relative z-10">
      <div class="max-w-4xl mx-auto">
        <!-- Breadcrumb -->
        <nav class="mb-6">
          <div class="flex items-center space-x-2 text-sm text-zinc-500 dark:text-zinc-400">
            <a href="/blog" class="hover:text-zinc-700 dark:hover:text-zinc-300 uppercase tracking-wide font-semibold transition-colors">
              Blog
            </a>
            <i class="fas fa-chevron-right text-xs mx-2"></i>
            <a href="/blog/authors" class="hover:text-zinc-700 dark:hover:text-zinc-300 uppercase tracking-wide transition-colors">
              Authors
            </a>
            <i class="fas fa-chevron-right text-xs mx-2"></i>
            <span class="text-zinc-700 dark:text-zinc-300 uppercase tracking-wide font-semibold">
              {author.data.name}
            </span>
          </div>
        </nav>

        <!-- Author Profile -->
        <div class="author-profile">
          <div class="profile-content">
            <!-- Author Avatar -->
            <div class="profile-avatar">
              {author.data.avatar ? (
                <img
                  src={author.data.avatar}
                  alt={`${author.data.name} profile picture`}
                  class="w-24 h-24 rounded-sm object-cover border-4 border-white dark:border-zinc-800 shadow-lg"
                  loading="eager"
                />
              ) : (
                <div class="w-24 h-24 rounded-sm bg-gradient-to-br from-blue-100 to-purple-100 dark:from-blue-900/30 dark:to-purple-900/30 flex items-center justify-center border-4 border-white dark:border-zinc-800 shadow-lg">
                  <i class="fas fa-user text-3xl text-blue-600 dark:text-blue-400"></i>
                </div>
              )}
              {author.data.featured && (
                <div class="featured-badge">FEATURED AUTHOR</div>
              )}
            </div>

            <!-- Author Info -->
            <div class="profile-info">
              <h1 class="profile-name">{author.data.name}</h1>
              
              {author.data.role && (
                <p class="profile-role">{author.data.role}</p>
              )}
              
              {author.data.company && (
                <p class="profile-company">at {author.data.company}</p>
              )}

              {author.data.bio && (
                <p class="profile-bio">{author.data.bio}</p>
              )}

              <!-- Author Stats -->
              <div class="profile-stats">
                <div class="stat-item">
                  <span class="stat-number">{authorPosts.length}</span>
                  <span class="stat-label">ARTICLES</span>
                </div>
                {featuredPosts.length > 0 && (
                  <div class="stat-item">
                    <span class="stat-number">{featuredPosts.length}</span>
                    <span class="stat-label">FEATURED</span>
                  </div>
                )}
              </div>

              <!-- Social Links -->
              {author.data.social && Object.values(author.data.social).some(link => link) && (
                <div class="profile-social">
                  {author.data.social.twitter && (
                    <a href={author.data.social.twitter} target="_blank" rel="noopener noreferrer" class="social-link">
                      <i class="fab fa-twitter"></i>
                      <span>Twitter</span>
                    </a>
                  )}
                  {author.data.social.linkedin && (
                    <a href={author.data.social.linkedin} target="_blank" rel="noopener noreferrer" class="social-link">
                      <i class="fab fa-linkedin"></i>
                      <span>LinkedIn</span>
                    </a>
                  )}
                  {author.data.social.github && (
                    <a href={author.data.social.github} target="_blank" rel="noopener noreferrer" class="social-link">
                      <i class="fab fa-github"></i>
                      <span>GitHub</span>
                    </a>
                  )}
                  {author.data.social.website && (
                    <a href={author.data.social.website} target="_blank" rel="noopener noreferrer" class="social-link">
                      <i class="fas fa-globe"></i>
                      <span>Website</span>
                    </a>
                  )}
                </div>
              )}
            </div>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Author Articles -->
  <main class="newsletter-page" data-theme-aware="true">
    <!-- FIXED: Using exact same container structure as newsletter page -->
    <div class="max-w-7xl mx-auto px-4 py-16">
      
      {authorPosts.length > 0 ? (
        <>
          <!-- Featured Articles -->
          {featuredPosts.length > 0 && (
            <section class="newsletter-section">
              <!-- FIXED: Consistent spacing with mb-6 -->
              <h2 class="section-title mb-6">
                <i class="fas fa-star mr-3 text-yellow-500"></i>
                Featured Articles
              </h2>
              <!-- FIXED: Using exact same grid as newsletter page -->
              <div class="newsletter-grid">
                {featuredPosts.slice(0, 3).map((post, index) => (
                  <div class="newsletter-card featured-article" data-newsletter={post.slug}>
                    <div class="card-content">
                      <div class="card-header">
                        <div class="card-frequency">FEATURED</div>
                      </div>
                      <h3 class="card-title">
                        <a href={`/blog/${post.slug}`}>{post.data.title}</a>
                      </h3>
                      <p class="card-description">{post.data.excerpt?.slice(0, 100)}...</p>
                      <div class="card-meta">
                        <span class="card-audience">
                          {formatPost(post).date} â€¢ {formatPost(post).readTime}
                        </span>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </section>
          )}

          <!-- All Articles -->
          <section class="newsletter-section">
            <div class="section-header">
              <div>
                <h2 class="section-title mb-2">
                  <i class="fas fa-newspaper mr-3 text-blue-600"></i>
                  All Articles by {author.data.name}
                </h2>
                <p class="section-subtitle">{authorPosts.length} {authorPosts.length === 1 ? 'article' : 'articles'} published</p>
              </div>
            </div>

            <!-- FIXED: Using exact same grid as newsletter page -->
            <div class="newsletter-grid">
              {authorPosts.map((post, index) => (
                <div class="newsletter-card" data-newsletter={post.slug}>
                  <div class="card-content">
                    <div class="card-header">
                      <div class="card-frequency">
                        {post.data.category?.toUpperCase() || "ARTICLE"}
                      </div>
                    </div>
                    <h3 class="card-title">
                      <a href={`/blog/${post.slug}`}>{post.data.title}</a>
                    </h3>
                    <p class="card-description">{post.data.excerpt?.slice(0, 120)}...</p>
                    <div class="card-meta">
                      <span class="card-audience">
                        {formatPost(post).date} â€¢ {formatPost(post).readTime}
                        {post.data.featured && <> â€¢ Featured</>}
                      </span>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          </section>
        </>
      ) : (
        <!-- No Articles State -->
        <section class="empty-state">
          <div class="empty-icon">
            <i class="fas fa-newspaper"></i>
          </div>
          <h3 class="empty-title">NO ARTICLES YET</h3>
          <p class="empty-description">
            {author.data.name} hasn't published any articles yet. Check back soon for fresh insights!
          </p>
          <div class="flex flex-col sm:flex-row gap-3 justify-center">
            <Button href="/blog" variant="primary" className="empty-action">
              BROWSE ALL ARTICLES
            </Button>
            <Button href="/blog/authors" variant="outline" className="empty-action">
              OTHER AUTHORS
            </Button>
          </div>
        </section>
      )}
    </div>
  </main>

  <!-- Author Content (if exists) - FIXED -->
  {author.body && author.body.trim() && (
    <section class="py-12 px-4 bg-zinc-50 dark:bg-zinc-900/50">
      <div class="max-w-4xl mx-auto">
        <div class="prose prose-lg prose-zinc dark:prose-invert max-w-none">
          <Content />
        </div>
      </div>
    </section>
  )}
</Layout>

<style>
  /* FIXED: Using exact same CSS structure as newsletter page */
  
  /* Newsletter Page - Enhanced with new colors */
  .newsletter-page {
    font-family: "Space Grotesk", sans-serif;
    background-color: white;
    color: rgb(17 24 39);
    min-height: 100vh;
  }

  :global(.dark) .newsletter-page {
    background-color: rgb(15 23 42);
    color: rgb(248 250 252);
  }

  /* Author Profile Styling */
  .author-profile {
    background: white;
    border: 2px solid rgb(229 231 235);
    padding: 2rem;
    margin-bottom: 2rem;
  }

  :global(.dark) .author-profile {
    background: rgb(30 41 59);
    border-color: rgb(51 65 85);
  }

  .profile-content {
    display: flex;
    gap: 2rem;
    align-items: flex-start;
  }

  .profile-avatar {
    position: relative;
    flex-shrink: 0;
  }

  .featured-badge {
    position: absolute;
    top: -12px;
    right: -12px;
    background: #243788;
    color: white;
    font-size: 0.625rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    padding: 0.25rem 0.5rem;
    border-radius: 2px;
    white-space: nowrap;
  }

  .profile-info {
    flex: 1;
    min-width: 0;
  }

  .profile-name {
    font-size: 2rem;
    font-weight: 800;
    color: rgb(17 24 39);
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  :global(.dark) .profile-name {
    color: rgb(248 250 252);
  }

  .profile-role {
    font-size: 1.125rem;
    color: rgb(55 65 81);
    font-weight: 600;
    margin-bottom: 0.25rem;
  }

  :global(.dark) .profile-role {
    color: rgb(226 232 240);
  }

  .profile-company {
    font-size: 1rem;
    color: rgb(107 114 128);
    margin-bottom: 1rem;
  }

  :global(.dark) .profile-company {
    color: rgb(148 163 184);
  }

  .profile-bio {
    font-size: 1rem;
    color: rgb(55 65 81);
    line-height: 1.6;
    margin-bottom: 1.5rem;
  }

  :global(.dark) .profile-bio {
    color: rgb(226 232 240);
  }

  .profile-stats {
    display: flex;
    gap: 2rem;
    margin-bottom: 1.5rem;
  }

  .stat-item {
    text-align: center;
  }

  .stat-number {
    display: block;
    font-size: 1.5rem;
    font-weight: 800;
    color: rgb(17 24 39);
    line-height: 1;
  }

  :global(.dark) .stat-number {
    color: rgb(248 250 252);
  }

  .stat-label {
    font-size: 0.75rem;
    font-weight: 700;
    color: rgb(107 114 128);
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  :global(.dark) .stat-label {
    color: rgb(148 163 184);
  }

  .profile-social {
    display: flex;
    gap: 1rem;
    flex-wrap: wrap;
  }

  .social-link {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: rgb(248 250 252);
    border: 1px solid rgb(229 231 235);
    color: rgb(55 65 81);
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 500;
    transition: all 0.3s ease;
  }

  :global(.dark) .social-link {
    background: rgb(30 41 59);
    border-color: rgb(51 65 85);
    color: rgb(226 232 240);
  }

  .social-link:hover {
    background: #243788;
    color: white;
    border-color: #243788;
  }

  /* FIXED: Newsletter Section Structure (Same as newsletter page) */
  .newsletter-section {
    margin-bottom: 3rem;
  }

  .section-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: rgb(17 24 39);
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border-bottom: 2px solid rgb(229 231 235);
    padding-bottom: 0.5rem;
    display: flex;
    align-items: center;
  }

  :global(.dark) .section-title {
    color: rgb(248 250 252);
    border-color: rgb(51 65 85);
  }

  .section-subtitle {
    font-size: 1.125rem;
    color: rgb(55 65 81);
    margin-bottom: 2rem;
  }

  :global(.dark) .section-subtitle {
    color: rgb(226 232 240);
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: flex-start;
    margin-bottom: 3rem;
  }

  /* FIXED: Newsletter Grid - Exact same as newsletter page */
  .newsletter-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 1rem;
  }

  .newsletter-card {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.25rem;
    background: white;
    border: 2px solid rgb(229 231 235);
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
  }

  :global(.dark) .newsletter-card {
    background: rgb(30 41 59);
    border-color: rgb(51 65 85);
  }

  .newsletter-card:hover {
    border-color: #243788;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  :global(.dark) .newsletter-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .featured-article {
    border-color: #243788;
  }

  /* FIXED: Card Content Structure (Same as newsletter page) */
  .card-content {
    flex: 1;
    min-width: 0;
    display: block;
  }

  .card-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
  }

  .card-frequency {
    padding: 0.25rem 0.75rem;
    font-size: 0.6875rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    background: rgb(248 250 252);
    color: rgb(55 65 81);
    border: 1px solid rgb(229 231 235);
  }

  :global(.dark) .card-frequency {
    background: rgb(30 41 59);
    color: rgb(226 232 240);
    border-color: rgb(51 65 85);
  }

  .card-title {
    font-size: 1rem;
    font-weight: 700;
    color: rgb(17 24 39);
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  :global(.dark) .card-title {
    color: rgb(248 250 252);
  }

  .card-title a {
    color: inherit;
    text-decoration: none;
    transition: color 0.3s ease;
  }

  .card-title a:hover {
    color: #243788;
  }

  :global(.dark) .card-title a:hover {
    color: rgb(96 165 250);
  }

  .card-description {
    font-size: 0.875rem;
    color: rgb(55 65 81);
    line-height: 1.3;
    margin-bottom: 0.5rem;
  }

  :global(.dark) .card-description {
    color: rgb(226 232 240);
  }

  .card-meta {
    margin-bottom: 1rem;
  }

  .card-audience {
    font-size: 0.75rem;
    color: rgb(107 114 128);
    font-style: italic;
    word-wrap: break-word;
    hyphens: auto;
    line-height: 1.2;
  }

  :global(.dark) .card-audience {
    color: rgb(148 163 184);
  }

  /* Empty State */
  .empty-state {
    text-align: center;
    padding: 4rem 2rem;
  }

  .empty-icon {
    font-size: 4rem;
    color: rgb(107 114 128);
    margin-bottom: 1.5rem;
  }

  :global(.dark) .empty-icon {
    color: rgb(148 163 184);
  }

  .empty-title {
    font-size: 1.5rem;
    font-weight: 800;
    color: rgb(17 24 39);
    margin-bottom: 1rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  :global(.dark) .empty-title {
    color: rgb(248 250 252);
  }

  .empty-description {
    font-size: 1rem;
    color: rgb(55 65 81);
    margin-bottom: 2rem;
    max-width: 400px;
    margin-left: auto;
    margin-right: auto;
  }

  :global(.dark) .empty-description {
    color: rgb(226 232 240);
  }

  .empty-action {
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 700;
  }

  /* FIXED: Responsive Design - Same as newsletter page */
  @media (max-width: 768px) {
    .newsletter-grid {
      grid-template-columns: 1fr;
    }

    .newsletter-card {
      flex-direction: column;
      text-align: center;
      gap: 1rem;
    }

    .profile-content {
      flex-direction: column;
      text-align: center;
    }

    .profile-avatar {
      align-self: center;
    }

    .profile-stats {
      justify-content: center;
    }

    .profile-social {
      justify-content: center;
    }

    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 1rem;
    }

    .section-title {
      font-size: 1.25rem;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Make newsletter cards clickable (same as newsletter page)
    const newsletterCards = document.querySelectorAll(".newsletter-card");

    newsletterCards.forEach((card) => {
      card.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;
        if (target.tagName === "A") return;

        const link = card.querySelector("a");
        if (link) {
          window.location.href = link.href;
        }
      });
    });

    // Enhanced hover effects
    newsletterCards.forEach((card, index) => {
      const element = card as HTMLElement;
      
      card.addEventListener('mouseenter', () => {
        element.style.transform = 'translateY(-4px) scale(1.02)';
      });
      
      card.addEventListener('mouseleave', () => {
        element.style.transform = 'translateY(0) scale(1)';
      });
    });
  });
</script>