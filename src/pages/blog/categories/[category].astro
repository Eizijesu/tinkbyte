---
// src/pages/blog/categories/[category].astro - FIXED VERSION
import Layout from "../../../layouts/Layout.astro";
import ArticleCard from "../../../components/blog/ArticleCard.astro";
import Button from "../../../components/ui/Button.astro";
import { getCollection } from "astro:content";
import { SITE } from "../../../config/site";
import type { CollectionEntry } from "astro:content";

type BlogPost = CollectionEntry<"blog">;

export async function getStaticPaths() {
  const allPosts = await getCollection("blog", ({ data }) => !data.draft);

  // ✅ MOVE THE DISPLAY NAMES LOGIC INSIDE getStaticPaths
  const displayNames: Record<string, string> = {
    "build-thinking": "Build Thinking",
    "learning-by-doing": "Learning by Doing",
    "product-lessons": "Product Lessons", 
    "fail-iterate-ship": "Fail / Iterate / Ship",
    "startup-insight": "Startup Insight",
    "product-strategy": "Product Strategy",
    "ai-evolution": "AI Evolution",
    "developer-tools": "Developer Tools",
    "research-bites": "Research Bites",
    "global-perspective": "Global Perspective",
    "community-innovation": "Community Innovation",
    "tech-culture": "Tech Culture",
    "system-thinking": "System Thinking",
    "the-interface": "The Interface",
    "career-stacks": "Career Stacks",
    "future-stacks": "Future Stacks",
    "creator-economy": "Creator Economy",
    "business-models-monetization": "Business Models & Monetization",
    "consumer-behavior-attention": "Consumer Behavior & Attention",
    "ecosystem-shifts-market-maps": "Ecosystem Shifts & Market Maps",
    "people-systems": "People Systems"
  };

  // Helper function inside getStaticPaths
  const getCategoryDisplayName = (slug: string): string => {
    return displayNames[slug] || slug.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
  };

  // Get unique categories from posts
  const postCategories: string[] = [...new Set(allPosts.map((post: BlogPost) => post.data.category))].filter((cat): cat is string => Boolean(cat));
  
  // Define all possible categories
  const allCategories: string[] = [
    "build-thinking",
    "learning-by-doing", 
    "product-lessons",
    "fail-iterate-ship",
    "startup-insight",
    "product-strategy",
    "ai-evolution",
    "developer-tools",
    "research-bites",
    "global-perspective",
    "community-innovation",
    "tech-culture",
    "system-thinking",
    "the-interface",
    "career-stacks",
    "future-stacks",
    "creator-economy",
    "business-models-monetization",
    "consumer-behavior-attention",
    "ecosystem-shifts-market-maps",
    "people-systems"
  ];

  // Combine and deduplicate
  const finalCategories: string[] = [...new Set([...postCategories, ...allCategories])];

  return finalCategories.map((category: string) => {
    // Filter posts for this exact category
    const categoryPosts: BlogPost[] = allPosts.filter((post: BlogPost) => post.data.category === category);

    return {
      params: { category },
      props: {
        categoryName: getCategoryDisplayName(category), // ✅ Now this works!
        posts: categoryPosts,
      },
    };
  });
}

interface Props {
  categoryName: string;
  posts: BlogPost[];
}

const { categoryName, posts }: Props = Astro.props;

// Enhanced category color and icon mapping
const getCategoryColor = (categoryName: string): string => {
  const colorMap: Record<string, string> = {
    "Build Thinking": "blue",
    "Learning by Doing": "purple",
    "Product Lessons": "green",
    "Startup Insight": "red",
    "Product Strategy": "indigo",
    "AI Evolution": "violet",
    "Developer Tools": "emerald",
    "Research Bites": "pink",
    "Global Perspective": "cyan",
    "Community Innovation": "green",
    "Tech Culture": "pink",
    "System Thinking": "emerald",
    "The Interface": "blue",
    "Fail / Iterate / Ship": "orange",
    "Career Stacks": "red",
    "Future Stacks": "violet",
    "Creator Economy": "pink",
    "Business Models & Monetization": "indigo",
    "Consumer Behavior & Attention": "cyan",
    "Ecosystem Shifts & Market Maps": "emerald",
    "People Systems": "orange"
  };
  
  return colorMap[categoryName] || "blue";
};

const getCategoryIcon = (categoryName: string): string => {
  const iconMap: Record<string, string> = {
    "Build Thinking": "fas fa-hammer",
    "Learning by Doing": "fas fa-book",
    "Product Lessons": "fas fa-lightbulb",
    "Startup Insight": "fas fa-rocket",
    "Product Strategy": "fas fa-chess",
    "AI Evolution": "fas fa-brain",
    "Developer Tools": "fas fa-tools",
    "Research Bites": "fas fa-chart-line",
    "Global Perspective": "fas fa-globe",
    "Community Innovation": "fas fa-users",
    "Tech Culture": "fas fa-users-cog",
    "System Thinking": "fas fa-sitemap",
    "The Interface": "fas fa-desktop",
    "Fail / Iterate / Ship": "fas fa-repeat",
    "Career Stacks": "fas fa-briefcase",
    "Future Stacks": "fas fa-rocket",
    "Creator Economy": "fas fa-paint-brush",
    "Business Models & Monetization": "fas fa-dollar-sign",
    "Consumer Behavior & Attention": "fas fa-eye",
    "Ecosystem Shifts & Market Maps": "fas fa-map",
    "People Systems": "fas fa-network-wired"
  };
  
  return iconMap[categoryName] || "fas fa-tag";
};

const categoryColor = getCategoryColor(categoryName);
const categoryIcon = getCategoryIcon(categoryName);

// Format post data with consistent author handling
const formatPost = (post: BlogPost) => {
  let authorData: {
    name: string;
    avatar?: string;
    bio?: string;
    role?: string;
  };

  if (post.data.authorInfo && typeof post.data.authorInfo === "object") {
    authorData = {
      name: post.data.authorInfo.name || "TinkByte Team",
      avatar: post.data.authorInfo.avatar,
      bio: post.data.authorInfo.bio,
      role: post.data.authorInfo.role,
    };
  } else if (typeof post.data.author === "string" && post.data.author.trim()) {
    authorData = {
      name: post.data.author,
      avatar: post.data.authorAvatar,
      bio: post.data.authorBio,
      role: post.data.authorRole,
    };
  } else if (typeof post.data.author === "object" && post.data.author !== null) {
    authorData = {
      name: (post.data.author as any).name || "TinkByte Team",
      avatar: (post.data.author as any).avatar || post.data.authorAvatar,
      bio: (post.data.author as any).bio || post.data.authorBio,
      role: (post.data.author as any).role || post.data.authorRole,
    };
  } else {
    authorData = {
      name: "TinkByte Team",
      avatar: post.data.authorAvatar,
      bio: post.data.authorBio,
      role: post.data.authorRole,
    };
  }

  return {
    title: post.data.title,
    excerpt: post.data.excerpt,
    date: post.data.pubDate.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }),
    readTime: post.data.readTime || "5 min read",
    slug: post.slug,
    image: post.data.image || "https://images.unsplash.com/photo-1677442136019-21780ecad995?w=600&h=400&fit=crop",
    tags: post.data.tags || [],
    category: post.data.category,
    author: authorData,
    audioUrl: post.data.audioUrl,
    featured: post.data.featured,
    trending: post.data.trending,
  };
};

// Get category stats
const featuredPosts = posts.filter(post => post.data.featured);
const trendingPosts = posts.filter(post => post.data.trending);

// Sort posts by date (newest first)
const sortedPosts = posts.sort((a, b) => 
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

const safeCategoryName = typeof categoryName === "string" ? categoryName.toLowerCase() : "unknown";
---

<Layout
  title={`${categoryName} Articles | ${SITE.name}`}
  description={`Explore our ${safeCategoryName} articles. Deep insights and practical knowledge for builders and innovators.`}
>
  <!-- Compact Category Hero -->
  <section class="relative py-12 lg:py-16 overflow-hidden">
    <div class="absolute inset-0 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 opacity-5"></div>
    <div class="absolute inset-0 bg-[url('/images/pattern.svg')] opacity-0"></div>

    <div class="container mx-auto px-4 relative z-10">
      <div class="max-w-4xl mx-auto">
<!-- Breadcrumb Navigation - FIXED FOR MOBILE -->
        <nav class="breadcrumb-container">
          <div class="breadcrumb-wrapper">
            <a href="/blog" class="breadcrumb-item">BLOG</a>
            <span class="breadcrumb-arrow">></span>
            <a href="/blog/categories" class="breadcrumb-item">CATEGORIES</a>
            <span class="breadcrumb-arrow">></span>
            <span class="breadcrumb-current">{categoryName.toUpperCase()}</span>
          </div>
        </nav>

        <div class="text-center">
          <!-- Category Badge -->
          <div class="inline-flex items-center gap-2 px-4 py-2 bg-white/80 dark:bg-zinc-800/80 backdrop-blur-sm border border-zinc-200 dark:border-zinc-700 mb-4">
            <div class={`w-3 h-3 rounded-full ${
              categoryColor === "purple" ? "bg-purple-500" :
              categoryColor === "blue" ? "bg-blue-500" :
              categoryColor === "green" ? "bg-green-500" :
              categoryColor === "orange" ? "bg-orange-500" :
              categoryColor === "red" ? "bg-red-500" :
              categoryColor === "cyan" ? "bg-cyan-500" :
              categoryColor === "pink" ? "bg-pink-500" :
              categoryColor === "indigo" ? "bg-indigo-500" :
              categoryColor === "violet" ? "bg-violet-500" :
              categoryColor === "emerald" ? "bg-emerald-500" :
              "bg-blue-500"
            }`}></div>
            <span class="text-sm font-bold uppercase tracking-wider text-zinc-700 dark:text-zinc-300">
              CATEGORY
            </span>
          </div>

          <!-- Category Title with Icon -->
          <div class="flex items-center justify-center gap-3 mb-4">
            <i class={`${categoryIcon} text-2xl ${
              categoryColor === "purple" ? "text-purple-600" :
              categoryColor === "blue" ? "text-blue-600" :
              categoryColor === "green" ? "text-green-600" :
              categoryColor === "orange" ? "text-orange-600" :
              categoryColor === "red" ? "text-red-600" :
              categoryColor === "cyan" ? "text-cyan-600" :
              categoryColor === "pink" ? "text-pink-600" :
              categoryColor === "indigo" ? "text-indigo-600" :
              categoryColor === "violet" ? "text-violet-600" :
              categoryColor === "emerald" ? "text-emerald-600" :
              "text-blue-600"
            }`}></i>
            <h1 class="text-3xl lg:text-4xl font-bold text-zinc-900 dark:text-white">
              <span class={`bg-gradient-to-r ${
                categoryColor === "purple" ? "from-purple-600 to-pink-600" :
                categoryColor === "blue" ? "from-blue-600 to-indigo-600" :
                categoryColor === "green" ? "from-green-600 to-emerald-600" :
                categoryColor === "orange" ? "from-orange-600 to-red-600" :
                categoryColor === "red" ? "from-red-600 to-pink-600" :
                categoryColor === "cyan" ? "from-cyan-600 to-blue-600" :
                categoryColor === "pink" ? "from-pink-600 to-rose-600" :
                categoryColor === "indigo" ? "from-indigo-600 to-purple-600" :
                categoryColor === "violet" ? "from-violet-600 to-purple-600" :
                categoryColor === "emerald" ? "from-emerald-600 to-green-600" :
                "from-blue-600 to-purple-600"
              } bg-clip-text text-transparent`}>
                {categoryName}
              </span>
            </h1>
          </div>

          <!-- Stats -->
          <div class="flex justify-center gap-6 mb-6 stats-grid">
            <div class="text-center">
              <div class="text-2xl font-bold text-zinc-900 dark:text-white">{posts.length}</div>
              <div class="text-xs text-zinc-500 dark:text-zinc-400 uppercase tracking-wider">ARTICLES</div>
            </div>
            {featuredPosts.length > 0 && (
              <div class="text-center">
                <div class="text-2xl font-bold text-zinc-900 dark:text-white">{featuredPosts.length}</div>
                <div class="text-xs text-zinc-500 dark:text-zinc-400 uppercase tracking-wider">FEATURED</div>
              </div>
            )}
            {trendingPosts.length > 0 && (
              <div class="text-center">
                <div class="text-2xl font-bold text-zinc-900 dark:text-white">{trendingPosts.length}</div>
                <div class="text-xs text-zinc-500 dark:text-zinc-400 uppercase tracking-wider">TRENDING</div>
              </div>
            )}
          </div>

          <!-- Description -->
          <p class="text-lg text-zinc-600 dark:text-zinc-300 leading-relaxed max-w-2xl mx-auto mb-6 category-description">
            {posts.length === 0 
              ? `No articles in ${categoryName} yet. Check back soon for fresh insights!`
              : `Discover ${posts.length} ${posts.length === 1 ? 'article' : 'articles'} covering ${safeCategoryName}. Deep insights and practical knowledge for builders and innovators.`
            }
          </p>

          <!-- Action Buttons -->
          <div class="flex flex-col sm:flex-row gap-3 justify-center action-buttons">
            <Button
              variant="outline"
              href="/blog"
              className="group compact-btn"
            >
              <span class="flex items-center gap-2">
                <i class="fas fa-arrow-left text-sm transition-transform duration-300 group-hover:-translate-x-1"></i>
                ALL ARTICLES
              </span>
            </Button>
            <Button
              variant="outline"
              href="/all-topics"
              className="group compact-btn"
            >
              <span class="flex items-center gap-2">
                <i class="fas fa-th-large text-sm"></i>
                ALL TOPICS
              </span>
            </Button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Quick Actions Sidebar -->
  <div class="quick-actions-sidebar" id="quick-actions">
    <div class="actions-content">
      <button 
        id="follow-topic" 
        class="action-btn follow-btn"
        data-topic-name={categoryName}
        data-topic-slug={Astro.params.category}
      >
        <svg width="14" height="14" viewBox="0 0 16 16" fill="none" class="follow-icon">
          <path
            d="M8 2V14M2 8H14"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
        <svg width="14" height="14" viewBox="0 0 16 16" fill="none" class="following-icon" style="display: none;">
          <path
            d="M13.5 3L6 10.5L2.5 7"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      </button>

      <button id="share-category" class="action-btn secondary">
        <svg width="14" height="14" viewBox="0 0 16 16" fill="none">
          <path
            d="M13 10.5C12.1716 10.5 11.5 11.1716 11.5 12C11.5 12.8284 12.1716 13.5 13 13.5C13.8284 13.5 14.5 12.8284 14.5 12C14.5 11.1716 13.8284 10.5 13 10.5ZM13 10.5L8.5 8M3 5.5C2.17157 5.5 1.5 6.17157 1.5 7C1.5 7.82843 2.17157 8.5 3 8.5C3.82843 8.5 4.5 7.82843 4.5 7C4.5 6.17157 3.82843 5.5 3 5.5ZM3 5.5L8.5 8M8.5 8L13 5.5"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      </button>

      <div class="follower-count" id="follower-count" style="display: none;">
        <span class="count-number">0</span>
      </div>
    </div>
  </div>

  <!-- Articles Section -->
  <main class="category-articles-page">
    <div class="max-w-7xl mx-auto px-4 py-12">
      
      {posts.length > 0 ? (
        <>
          <!-- Featured Articles -->
          {featuredPosts.length > 0 && (
            <section class="mb-12">
              <h2 class="text-2xl font-bold text-zinc-900 dark:text-white mb-6 flex items-center">
                <i class="fas fa-star mr-3 text-yellow-500"></i>
                Featured Articles
              </h2>
              <div class="featured-articles-grid">
                {featuredPosts.slice(0, 3).map((post: BlogPost) => (
                  <div class="featured-article-wrapper">
                    <ArticleCard {...formatPost(post)} />
                  </div>
                ))}
              </div>
            </section>
          )}

          <!-- All Articles -->
          <section>
            <div class="flex items-center justify-between mb-8">
              <h2 class="text-2xl font-bold text-zinc-900 dark:text-white flex items-center">
                <i class={`${categoryIcon} mr-3 ${
                  categoryColor === "purple" ? "text-purple-600" :
                  categoryColor === "blue" ? "text-blue-600" :
                  categoryColor === "green" ? "text-green-600" :
                  categoryColor === "orange" ? "text-orange-600" :
                  categoryColor === "red" ? "text-red-600" :
                  categoryColor === "cyan" ? "text-cyan-600" :
                  categoryColor === "pink" ? "text-pink-600" :
                  categoryColor === "indigo" ? "text-indigo-600" :
                  categoryColor === "violet" ? "text-violet-600" :
                  categoryColor === "emerald" ? "text-emerald-600" :
                  "text-blue-600"
                }`}></i>
                All {categoryName} Articles
              </h2>
              <span class="text-sm text-zinc-500 dark:text-zinc-400">
                {posts.length} {posts.length === 1 ? 'article' : 'articles'}
              </span>
            </div>

            <div class="articles-grid">
              {sortedPosts.map((post: BlogPost, index) => (
                <div class="article-wrapper" style={`--animation-delay: ${index * 0.1}s`}>
                  <ArticleCard {...formatPost(post)} />
                </div>
              ))}
            </div>
          </section>
        </>
      ) : (
        <!-- Empty State -->
        <section class="text-center py-16">
          <div class="max-w-md mx-auto">
            <div class="mb-6">
              <i class={`${categoryIcon} text-4xl ${
                categoryColor === "purple" ? "text-purple-300 dark:text-purple-600" :
                categoryColor === "blue" ? "text-blue-300 dark:text-blue-600" :
                categoryColor === "green" ? "text-green-300 dark:text-green-600" :
                categoryColor === "orange" ? "text-orange-300 dark:text-orange-600" :
                categoryColor === "red" ? "text-red-300 dark:text-red-600" :
                categoryColor === "cyan" ? "text-cyan-300 dark:text-cyan-600" :
                categoryColor === "pink" ? "text-pink-300 dark:text-pink-600" :
                categoryColor === "indigo" ? "text-indigo-300 dark:text-indigo-600" :
                categoryColor === "violet" ? "text-violet-300 dark:text-violet-600" :
                categoryColor === "emerald" ? "text-emerald-300 dark:text-emerald-600" :
                "text-blue-300 dark:text-blue-600"
              }`}></i>
            </div>
            <h3 class="text-xl font-bold text-zinc-900 dark:text-zinc-100 mb-4">
              No {categoryName} Articles Yet
            </h3>
            <p class="text-zinc-600 dark:text-zinc-400 mb-6">
              We're working on creating amazing content for this category. 
              Check back soon or explore other categories!
            </p>
            <div class="flex flex-col sm:flex-row gap-3 justify-center">
              <Button href="/blog" variant="primary" className="compact-btn">
                <i class="fas fa-newspaper mr-2"></i>
                EXPLORE ALL ARTICLES
              </Button>
              <Button href="/all-topics" variant="outline" className="compact-btn">
                <i class="fas fa-th-large mr-2"></i>
                ALL TOPICS
              </Button>
            </div>
          </div>
        </section>
      )}
    </div>
  </main>
</Layout>

<style>
  .category-articles-page {
    font-family: "Space Grotesk", sans-serif;
    background-color: var(--color-bg-primary);
    color: var(--color-text-primary);
  }

  .hero-section {
    padding: 3rem 0;
  }

  /* Quick Actions Sidebar */
  .quick-actions-sidebar {
    position: fixed;
    right: 1.5rem;
    top: 50%;
    transform: translateY(-50%);
    z-index: 50;
    background: var(--color-bg-primary);
    border: 2px solid var(--color-border);
    padding: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    opacity: 1;
    min-width: 60px;
  }

  :global(.dark) .quick-actions-sidebar {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  .actions-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: stretch;
  }

  .action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem;
    background: var(--color-bg-primary);
    border: 2px solid #243788;
    color: #243788;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: "Space Grotesk", sans-serif;
    font-weight: 600;
    width: 48px;
    height: 48px;
    position: relative;
  }

  .action-btn:hover {
    background: #243788;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(36, 55, 136, 0.3);
  }

  .action-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .action-btn.secondary {
    border-color: var(--color-border);
    color: var(--color-text-secondary);
  }

  .action-btn.secondary:hover {
    background: var(--color-bg-secondary);
    color: var(--color-text-primary);
    border-color: var(--color-text-muted);
  }

  .follow-btn.following {
    background: #10b981;
    border-color: #10b981;
    color: white;
  }

  .follow-btn.following:hover {
    background: #ef4444;
    border-color: #ef4444;
  }

  .follow-btn.following .follow-icon {
    display: none;
  }

  .follow-btn.following .following-icon {
    display: block !important;
  }

  .follower-count {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    text-align: center;
    width: 48px;
    height: 32px;
  }

  .count-number {
    font-size: 0.875rem;
    font-weight: 800;
    color: var(--color-text-primary);
    line-height: 1;
  }

  .compact-btn {
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 700;
    font-size: 0.875rem;
    padding: 0.75rem 1.5rem;
  }

  .featured-articles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    max-width: 1200px;
  }

  .featured-article-wrapper {
    position: relative;
  }

  .featured-article-wrapper::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, #243788, #8B5CF6, #06B6D4);
    border-radius: 4px;
    z-index: -1;
    opacity: 0.6;
  }

  .articles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }

  .article-wrapper {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.6s ease forwards;
    animation-delay: var(--animation-delay, 0s);
    transition: transform 0.3s ease;
  }

  .article-wrapper:hover {
    transform: translateY(-4px);
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .toast-notification {
    position: fixed;
    top: 2rem;
    right: 2rem;
    background: #10b981;
    color: white;
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    z-index: 1002;
    border: 2px solid #10b981;
    border-radius: 6px;
    animation: slideInRight 0.3s ease;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Breadcrumb Navigation - COMPLETE FIX */
  .breadcrumb-container {
    margin-bottom: 1.5rem;
    width: 100%;
  }

  .breadcrumb-wrapper {
    display: flex;
    align-items: center;
    justify-content: flex-start;
    gap: 0.5rem;
    font-family: "Space Grotesk", sans-serif;
    font-size: 0.875rem;
    font-weight: 600;
    letter-spacing: 0.05em;
    text-transform: uppercase;
    line-height: 1;
    flex-wrap: nowrap;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    -ms-overflow-style: none;
  }

  .breadcrumb-wrapper::-webkit-scrollbar {
    display: none;
  }

  .breadcrumb-item {
    color: #9ca3af;
    text-decoration: none;
    transition: color 0.3s ease;
    white-space: nowrap;
    flex-shrink: 0;
  }

  .breadcrumb-item:hover {
    color: #d1d5db;
  }

  .breadcrumb-arrow {
    color: #6b7280;
    font-size: 0.75rem;
    font-weight: 400;
    flex-shrink: 0;
  }

  .breadcrumb-current {
    color: #d1d5db;
    font-weight: 700;
    white-space: nowrap;
    flex-shrink: 0;
  }

  :global(.dark) .breadcrumb-item {
    color: #9ca3af;
  }

  :global(.dark) .breadcrumb-item:hover {
    color: #d1d5db;
  }

  :global(.dark) .breadcrumb-arrow {
    color: #6b7280;
  }

  :global(.dark) .breadcrumb-current {
    color: #d1d5db;
  }

  /* Mobile Responsive Fixes */
  @media (max-width: 768px) {
    .quick-actions-sidebar {
      display: none !important;
    }

    .category-articles-page {
      padding: 0;
    }

    .container {
      padding-left: 1rem;
      padding-right: 1rem;
    }

    .category-title {
      font-size: 2rem !important;
      line-height: 1.2;
    }

    .stats-grid {
      flex-wrap: wrap;
      gap: 1rem;
    }

    .featured-articles-grid,
    .articles-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }

    .action-buttons {
      flex-direction: column;
      width: 100%;
    }

    .compact-btn {
      width: 100%;
      max-width: none;
    }

    .hero-section {
      padding: 2rem 0;
    }

    .category-badge {
      font-size: 0.75rem;
      padding: 0.5rem 1rem;
    }

    .category-description {
      font-size: 1rem;
    }

    .breadcrumb-wrapper {
      font-size: 0.8125rem;
      gap: 0.375rem;
    }

    .breadcrumb-arrow {
      font-size: 0.6875rem;
    }
  }

  @media (max-width: 480px) {
    .category-title {
      font-size: 1.75rem !important;
    }

    .breadcrumb-wrapper {
      font-size: 0.75rem;
      gap: 0.25rem;
    }

    .breadcrumb-arrow {
      font-size: 0.625rem;
      opacity: 0.7;
    }
  }

  @media (max-width: 1024px) {
    .featured-articles-grid {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    }
    
    .articles-grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }
  }

  @keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .bg-gradient-to-r.bg-clip-text {
    background-size: 200% 200%;
    animation: gradient 3s ease-in-out infinite;
  }
</style>

<script>
  import { getSupabaseClient } from '../../../lib/supabase.js';
  import { config } from '../../../lib/config.js';
  
  document.addEventListener('DOMContentLoaded', async () => {
    const supabase = getSupabaseClient();
    const followBtn = document.getElementById('follow-topic') as HTMLButtonElement | null;
    const shareBtn = document.getElementById('share-category') as HTMLButtonElement | null;
    const followerCount = document.getElementById('follower-count') as HTMLElement | null;
    
    if (!followBtn) return;
  
    const topicName = followBtn.getAttribute('data-topic-name');
    const topicSlug = followBtn.getAttribute('data-topic-slug');
    
    let currentUser: any = null;
    let isFollowing = false;

    // Debug logging (only in development)
    const debugLog = (message: string, data?: any) => {
      if (config.environment !== 'production') {
        console.log(`[CategoryFollow] ${message}`, data || '');
      }
    };
  
    try {
      debugLog('Initializing category follow functionality...');
      
      // Get current user
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (authError) {
        debugLog('Auth error:', authError);
      } else {
        currentUser = user;
        debugLog('Current user:', user?.email || 'Anonymous');
      }
      
      // Load follower count first (this should work for everyone)
      await loadFollowerCount();
      
      // Check follow status only if user is logged in
      if (user && topicSlug) {
        debugLog('Checking follow status for authenticated user...');
        
        const { data: followData, error: followError } = await supabase
          .from('user_category_follows')
          .select('id')
          .eq('user_id', user.id)
          .eq('category_slug', topicSlug)
          .eq('environment', config.environment)
          .maybeSingle();
        
        if (followError) {
          debugLog('Follow check error:', followError);
          console.error('Error checking follow status:', followError);
        } else {
          isFollowing = !!followData;
          debugLog('Follow status:', isFollowing);
        }
      }
      
      updateFollowButton();
      
    } catch (error) {
      console.error('Initialization failed:', error);
    }

    async function loadFollowerCount() {
      try {
        debugLog('Loading follower count...');
        
        // Use a simpler query that should work with RLS
        const { data, error } = await supabase
          .from('user_category_follows')
          .select('id')
          .eq('category_slug', topicSlug)
          .eq('environment', config.environment);

        if (error) {
          debugLog('Follower count error:', error);
          // If we can't read due to RLS, that's okay for now
          if (error.code !== 'PGRST301') {
            console.error('Error loading follower count:', error);
          }
          return;
        }

        const count = data?.length || 0;
        debugLog('Follower count:', count);

        if (followerCount && count > 0) {
          const countElement = followerCount.querySelector('.count-number');
          if (countElement) {
            countElement.textContent = count.toString();
            followerCount.style.display = 'flex';
          }
        }
      } catch (error) {
        debugLog('Error loading follower count:', error);
      }
    }
  
    followBtn.addEventListener('click', async () => {
      debugLog('Follow button clicked');
      
      if (!currentUser) {
        if (confirm('Sign in to follow topics and get personalized content?')) {
          window.location.href = '/auth/signin';
        }
        return;
      }

      try {
        followBtn.disabled = true;
        debugLog('Processing follow action...', { 
          isFollowing, 
          userId: currentUser.id, 
          topicSlug,
          environment: config.environment 
        });
        
        if (isFollowing) {
          // Unfollow
          const { error } = await supabase
            .from('user_category_follows')
            .delete()
            .eq('user_id', currentUser.id)
            .eq('category_slug', topicSlug)
            .eq('environment', config.environment);
          
          if (error) {
            debugLog('Unfollow error:', error);
            throw error;
          }
          
          isFollowing = false;
          debugLog('Successfully unfollowed');
          showToast(`Unfollowed ${topicName}`);
        } else {
          // Follow - make sure we have all required fields
          const followData = {
            user_id: currentUser.id,
            category_slug: topicSlug,
            environment: config.environment,
            created_at: new Date().toISOString()
          };
          
          debugLog('Inserting follow data:', followData);
          
          const { error } = await supabase
            .from('user_category_follows')
            .insert(followData);
          
          if (error) {
            debugLog('Follow error:', error);
            throw error;
          }
          
          isFollowing = true;
          debugLog('Successfully followed');
          showToast(`Now following ${topicName}!`);
        }
        
        updateFollowButton();
        await loadFollowerCount();
        
      } catch (error: any) {
        console.error('Follow action failed:', error);
        
        // Handle specific error cases
        if (error.code === '23505') {
          showToast('Already following this topic');
          isFollowing = true;
          updateFollowButton();
        } else if (error.code === 'PGRST301' || error.message?.includes('permission')) {
          showToast('Permission denied. Please sign in again.');
          // Redirect to sign in
          setTimeout(() => {
            window.location.href = '/auth/signin';
          }, 2000);
        } else if (error.code === '23502') {
          showToast('Missing required information');
          debugLog('Missing required field error:', error);
        } else {
          showToast('Failed to update follow status');
        }
      } finally {
        followBtn.disabled = false;
      }
    });

    if (shareBtn) {
      shareBtn.addEventListener('click', async () => {
        const url = window.location.href;
        const title = `${topicName} Articles | TinkByte`;
        
        if (navigator.share) {
          try {
            await navigator.share({
              title: title,
              text: `Check out these ${topicName} articles on TinkByte`,
              url: url
            });
          } catch (error) {
            debugLog('Share cancelled or failed');
          }
        } else {
          try {
            await navigator.clipboard.writeText(url);
            showToast('Link copied to clipboard!');
          } catch (error) {
            debugLog('Copy failed');
            showToast('Failed to copy link');
          }
        }
      });
    }
  
    function updateFollowButton(): void {
      if (!followBtn) return;
      
      followBtn.classList.toggle('following', isFollowing);
      
      // Update button text/state based on authentication and follow status
      if (!currentUser) {
        followBtn.title = 'Sign in to follow topics';
      } else if (isFollowing) {
        followBtn.title = `Unfollow ${topicName}`;
      } else {
        followBtn.title = `Follow ${topicName}`;
      }
      
      debugLog('Button updated:', { isFollowing, authenticated: !!currentUser });
    }
  
    function showToast(message: string): void {
      // Remove any existing toasts
      const existingToast = document.querySelector('.toast-notification');
      if (existingToast) {
        existingToast.remove();
      }
      
      const toast = document.createElement('div');
      toast.className = 'toast-notification';
      toast.textContent = message;
      document.body.appendChild(toast);
      
      setTimeout(() => {
        if (toast.parentNode) {
          toast.remove();
        }
      }, 3000);
    }
  
    // Animation setup remains the same...
    const articleWrappers = document.querySelectorAll('.article-wrapper');
    
    articleWrappers.forEach((wrapper, index) => {
      const element = wrapper as HTMLElement;
      element.style.setProperty('--animation-delay', `${index * 0.1}s`);
    });
  
    const observerOptions: IntersectionObserverInit = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px',
    };
  
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const element = entry.target as HTMLElement;
          element.style.opacity = '1';
          element.style.transform = 'translateY(0)';
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);
  
    articleWrappers.forEach((wrapper) => {
      observer.observe(wrapper);
    });
  });
</script>