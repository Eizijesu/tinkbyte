---
// src/pages/blog/categories/[category].astro - FIXED with perfect square design
import Layout from "../../../layouts/Layout.astro";
import ArticleCard from "../../../components/blog/ArticleCard.astro";
import Button from "../../../components/ui/Button.astro";
import { getCollection } from "astro:content";
import { SITE } from "../../../config/site";
import type { CollectionEntry } from "astro:content";

type BlogPost = CollectionEntry<"blog">;

export async function getStaticPaths() {
  const allPosts = await getCollection("blog", ({ data }) => !data.draft);

  // Category display names mapping
  const displayNames: Record<string, string> = {
    "build-thinking": "Build Thinking",
    "learning-by-doing": "Learning by Doing",
    "product-lessons": "Product Lessons", 
    "fail-iterate-ship": "Fail / Iterate / Ship",
    "startup-insight": "Startup Insight",
    "startup-insights": "Startup Insights",
    "building-thinking": "Building Thinking",
    "product-strategy": "Product Strategy",
    "ai-evolution": "AI Evolution",
    "developer-tools": "Developer Tools",
    "research-bites": "Research Bites",
    "global-perspective": "Global Perspective",
    "community-innovation": "Community Innovation",
    "tech-culture": "Tech Culture",
    "system-thinking": "System Thinking",
    "the-interface": "The Interface",
    "career-stacks": "Career Stacks",
    "future-stacks": "Future Stacks",
    "creator-economy": "Creator Economy",
    "business-models-monetization": "Business Models & Monetization",
    "consumer-behavior-attention": "Consumer Behavior & Attention",
    "ecosystem-shifts-market-maps": "Ecosystem Shifts & Market Maps",
    "people-systems": "People Systems"
  };

  const getCategoryDisplayName = (slug: string): string => {
    return displayNames[slug] || slug.split('-').map(word => 
      word.charAt(0).toUpperCase() + word.slice(1)
    ).join(' ');
  };

  // Get categories from posts
  const postCategories: string[] = [...new Set(allPosts.map((post: BlogPost) => post.data.category))].filter((cat): cat is string => Boolean(cat));
  
  // Define all static categories (prevents 404s)
  const staticCategories: string[] = [
    "build-thinking",
    "building-thinking",
    "learning-by-doing", 
    "product-lessons",
    "fail-iterate-ship",
    "startup-insight",
    "startup-insights",
    "product-strategy",
    "ai-evolution",
    "developer-tools",
    "research-bites",
    "global-perspective",
    "community-innovation",
    "tech-culture",
    "system-thinking",
    "the-interface",
    "career-stacks",
    "future-stacks",
    "creator-economy",
    "business-models-monetization",
    "consumer-behavior-attention",
    "ecosystem-shifts-market-maps",
    "people-systems"
  ];

  // Combine and deduplicate
  const allCategories: string[] = [...new Set([...postCategories, ...staticCategories])];

  return allCategories.map((category: string) => {
    const categoryPosts: BlogPost[] = allPosts.filter((post: BlogPost) => post.data.category === category);

    return {
      params: { category },
      props: {
        categoryName: getCategoryDisplayName(category),
        posts: categoryPosts,
        categorySlug: category,
      },
    };
  });
}

interface Props {
  categoryName: string;
  posts: BlogPost[];
  categorySlug: string;
}

const { categoryName, posts, categorySlug }: Props = Astro.props;

// Category styling system
const getCategoryColor = (slug: string): string => {
  const colorMap: Record<string, string> = {
    "build-thinking": "#2563eb",
    "building-thinking": "#2563eb",
    "learning-by-doing": "#8b5cf6",
    "product-lessons": "#10b981",
    "startup-insight": "#ef4444",
    "startup-insights": "#ef4444",
    "product-strategy": "#f59e0b",
    "ai-evolution": "#8b5cf6",
    "developer-tools": "#06b6d4",
    "research-bites": "#ec4899",
    "global-perspective": "#06b6d4",
    "community-innovation": "#10b981",
    "tech-culture": "#ec4899",
    "system-thinking": "#059669",
    "the-interface": "#3b82f6",
    "fail-iterate-ship": "#f97316",
    "career-stacks": "#dc2626",
    "future-stacks": "#7c3aed",
    "creator-economy": "#f472b6",
    "business-models-monetization": "#6366f1",
    "consumer-behavior-attention": "#0891b2",
    "ecosystem-shifts-market-maps": "#059669",
    "people-systems": "#ea580c"
  };
  
  return colorMap[slug] || "#2563eb";
};

const getCategoryIcon = (slug: string): string => {
  const iconMap: Record<string, string> = {
    "build-thinking": "fas fa-hammer",
    "building-thinking": "fas fa-hammer",
    "learning-by-doing": "fas fa-book-open",
    "product-lessons": "fas fa-lightbulb",
    "startup-insight": "fas fa-rocket",
    "startup-insights": "fas fa-rocket",
    "product-strategy": "fas fa-chess",
    "ai-evolution": "fas fa-brain",
    "developer-tools": "fas fa-tools",
    "research-bites": "fas fa-chart-line",
    "global-perspective": "fas fa-globe",
    "community-innovation": "fas fa-users",
    "tech-culture": "fas fa-users-cog",
    "system-thinking": "fas fa-sitemap",
    "the-interface": "fas fa-desktop",
    "fail-iterate-ship": "fas fa-repeat",
    "career-stacks": "fas fa-briefcase",
    "future-stacks": "fas fa-rocket",
    "creator-economy": "fas fa-paint-brush",
    "business-models-monetization": "fas fa-dollar-sign",
    "consumer-behavior-attention": "fas fa-eye",
    "ecosystem-shifts-market-maps": "fas fa-map",
    "people-systems": "fas fa-network-wired"
  };
  
  return iconMap[slug] || "fas fa-tag";
};

const categoryColor = getCategoryColor(categorySlug);
const categoryIcon = getCategoryIcon(categorySlug);

// Format post data with proper tag handling
const formatPost = (post: BlogPost) => {
  let authorData: {
    name: string;
    avatar?: string;
    bio?: string;
    role?: string;
  };

  if (post.data.authorInfo && typeof post.data.authorInfo === "object") {
    authorData = {
      name: post.data.authorInfo.name || "TinkByte Team",
      avatar: post.data.authorInfo.avatar,
      bio: post.data.authorInfo.bio,
      role: post.data.authorInfo.role,
    };
  } else if (typeof post.data.author === "string" && post.data.author.trim()) {
    authorData = {
      name: post.data.author,
      avatar: post.data.authorAvatar,
      bio: post.data.authorBio,
      role: post.data.authorRole,
    };
  } else {
    authorData = {
      name: "TinkByte Team",
      avatar: post.data.authorAvatar,
      bio: post.data.authorBio,
      role: post.data.authorRole,
    };
  }

  // FIXED: Ensure tags is always an array
  const ensureTagsArray = (tags: any): string[] => {
    if (Array.isArray(tags)) {
      return tags.filter(tag => tag && typeof tag === 'string' && tag.trim());
    }
    return [];
  };

  return {
    title: post.data.title,
    excerpt: post.data.excerpt,
    date: post.data.pubDate.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }),
    readTime: post.data.readTime || "5 min read",
    slug: post.slug,
    image: post.data.image || "https://images.unsplash.com/photo-1677442136019-21780ecad995?w=600&h=400&fit=crop",
    tags: ensureTagsArray(post.data.tags), // FIXED: Always returns string[]
    category: post.data.category,
    author: authorData,
    audioUrl: post.data.audioUrl,
    featured: post.data.featured,
    trending: post.data.trending,
  };
};

// Get category stats
const featuredPosts = posts.filter(post => post.data.featured);
const trendingPosts = posts.filter(post => post.data.trending);

// Sort posts by date (newest first)
const sortedPosts = posts.sort((a, b) => 
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);
---

<Layout
  title={`${categoryName} Articles | ${SITE.name}`}
  description={`Explore our ${categoryName.toLowerCase()} articles. Deep insights and practical knowledge for builders and innovators.`}
>
  <!-- Category Hero Section -->
  <section class="category-hero">
    <div class="container">
      <!-- Breadcrumb Navigation -->
      <nav class="breadcrumb-nav">
        <a href="/blog" class="breadcrumb-link">BLOG</a>
        <span class="breadcrumb-separator">></span>
        <a href="/blog/categories" class="breadcrumb-link">CATEGORIES</a>
        <span class="breadcrumb-separator">></span>
        <span class="breadcrumb-current">{categoryName.toUpperCase()}</span>
      </nav>

      <div class="hero-content">
        <!-- Category Badge -->
        <div class="category-badge">
          <div class="category-dot" style={`background-color: ${categoryColor}`}></div>
          <span class="category-label">CATEGORY</span>
        </div>

        <!-- Category Title with Icon -->
        <div class="category-title-section">
          <i class={`${categoryIcon} category-icon`} style={`color: ${categoryColor}`}></i>
          <h1 class="category-title">
            <span class="title-gradient" style={`background: linear-gradient(135deg, ${categoryColor}, ${categoryColor}aa); -webkit-background-clip: text; background-clip: text; -webkit-text-fill-color: transparent;`}>
              {categoryName}
            </span>
          </h1>
        </div>

        <!-- Stats -->
        <div class="category-stats">
          <div class="stat-item">
            <div class="stat-number">{posts.length}</div>
            <div class="stat-label">ARTICLES</div>
          </div>
          {featuredPosts.length > 0 && (
            <div class="stat-item">
              <div class="stat-number">{featuredPosts.length}</div>
              <div class="stat-label">FEATURED</div>
            </div>
          )}
          {trendingPosts.length > 0 && (
            <div class="stat-item">
              <div class="stat-number">{trendingPosts.length}</div>
              <div class="stat-label">TRENDING</div>
            </div>
          )}
        </div>

        <!-- Description -->
        <p class="category-description">
          {posts.length === 0 
            ? `No articles in ${categoryName} yet. Check back soon for fresh insights!`
            : `Discover ${posts.length} ${posts.length === 1 ? 'article' : 'articles'} covering ${categoryName.toLowerCase()}. Deep insights and practical knowledge for builders and innovators.`
          }
        </p>

        <!-- Action Buttons -->
        <div class="action-buttons">
          <Button variant="outline" href="/blog" className="action-btn">
            <i class="fas fa-arrow-left"></i>
            ALL ARTICLES
          </Button>
          <Button variant="outline" href="/blog/categories" className="action-btn">
            <i class="fas fa-th-large"></i>
            ALL CATEGORIES
          </Button>
        </div>
      </div>
    </div>
  </section>

  <!-- Quick Actions Sidebar -->
  <div class="quick-actions" id="quick-actions">
    <button 
      id="follow-topic" 
      class="quick-action-btn follow-btn"
      data-topic-name={categoryName}
      data-topic-slug={categorySlug}
      title="Follow this topic"
    >
      <i class="fas fa-plus follow-icon"></i>
      <i class="fas fa-check following-icon" style="display: none;"></i>
    </button>

    <button id="share-category" class="quick-action-btn share-btn" title="Share category">
      <i class="fas fa-share-alt"></i>
    </button>

    <div class="follower-count" id="follower-count" style="display: none;">
      <span class="count-number">0</span>
    </div>
  </div>

  <!-- Articles Section -->
  <main class="articles-section">
    <div class="container">
      
      {posts.length > 0 ? (
        <>
          <!-- Featured Articles -->
          {featuredPosts.length > 0 && (
            <section class="featured-section">
              <h2 class="section-title">
                <i class="fas fa-star section-icon"></i>
                Featured Articles
              </h2>
              <div class="featured-grid">
                {featuredPosts.slice(0, 3).map((post: BlogPost) => (
                  <div class="featured-article">
                    <ArticleCard {...formatPost(post)} />
                  </div>
                ))}
              </div>
            </section>
          )}

          <!-- All Articles -->
          <section class="all-articles-section">
            <div class="section-header">
              <h2 class="section-title">
                <i class={categoryIcon} style={`color: ${categoryColor}`}></i>
                All {categoryName} Articles
              </h2>
              <span class="article-count">
                {posts.length} {posts.length === 1 ? 'article' : 'articles'}
              </span>
            </div>

            <div class="articles-grid">
              {sortedPosts.map((post: BlogPost, index) => (
                <div class="article-item" style={`--animation-delay: ${index * 0.1}s`}>
                  <ArticleCard {...formatPost(post)} />
                </div>
              ))}
            </div>
          </section>
        </>
      ) : (
        <!-- Empty State -->
        <section class="empty-state">
          <div class="empty-content">
            <i class={categoryIcon} style={`color: ${categoryColor}30`}></i>
            <h3 class="empty-title">No {categoryName} Articles Yet</h3>
            <p class="empty-description">
              We're working on creating amazing content for this category. 
              Check back soon or explore other categories!
            </p>
            <div class="empty-actions">
              <Button href="/blog" variant="primary" className="action-btn">
                <i class="fas fa-newspaper"></i>
                EXPLORE ALL ARTICLES
              </Button>
              <Button href="/blog/categories" variant="outline" className="action-btn">
                <i class="fas fa-th-large"></i>
                ALL CATEGORIES
              </Button>
            </div>
          </div>
        </section>
      )}
    </div>
  </main>
</Layout>

<style>
  /* CSS Custom Properties for Perfect Square Design */
  :root {
    --tinkbyte-radius: 0px;
    --tinkbyte-radius-sm: 0px;
    --tinkbyte-radius-md: 0px;
    --tinkbyte-radius-lg: 0px;
    --tinkbyte-radius-card: 0px;
    --tinkbyte-radius-button: 0px;
  }

  /* Base Styles */
  .container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 0 1rem;
  }

  /* Category Hero */
  .category-hero {
    background: var(--color-bg-secondary);
    border-bottom: 2px solid var(--color-border);
    padding: 3rem 0;
  }

  /* Desktop Breadcrumb Navigation */
  .breadcrumb-nav {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    margin-bottom: 2rem;
    font-size: 0.875rem;
    font-weight: 700;
    letter-spacing: 0.05em;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: none;
    white-space: nowrap;
  }

  .breadcrumb-nav::-webkit-scrollbar {
    display: none;
  }

  .breadcrumb-link {
    color: var(--color-text-muted);
    text-decoration: none;
    white-space: nowrap;
    transition: color 0.2s ease;
    padding: 0.25rem 0.5rem;
    border-radius: var(--tinkbyte-radius-sm);
  }

  .breadcrumb-link:hover {
    color: var(--color-text-secondary);
    background: rgba(59, 130, 246, 0.1);
  }

  .breadcrumb-separator {
    color: var(--color-text-muted);
    font-size: 0.75rem;
    opacity: 0.7;
    margin: 0 0.25rem;
  }

  .breadcrumb-current {
    color: var(--color-text-primary);
    font-weight: 800;
    white-space: nowrap;
    padding: 0.25rem 0.5rem;
    background: rgba(16, 185, 129, 0.1);
    border-radius: var(--tinkbyte-radius-sm);
  }

  .hero-content {
    text-align: center;
    max-width: 800px;
    margin: 0 auto;
  }

  .category-badge {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    background: var(--color-bg-primary);
    border: 2px solid var(--color-border);
    border-radius: var(--tinkbyte-radius-button);
    margin-bottom: 1.5rem;
  }

  .category-dot {
    width: 8px;
    height: 8px;
    border-radius: var(--tinkbyte-radius-sm);
  }

  .category-label {
    font-size: 0.75rem;
    font-weight: 700;
    letter-spacing: 0.1em;
    color: var(--color-text-secondary);
  }

  .category-title-section {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 1rem;
    margin-bottom: 2rem;
  }

  .category-icon {
    font-size: 2.5rem;
  }

  .category-title {
    font-family: "Space Grotesk", sans-serif;
    font-size: clamp(2.5rem, 5vw, 4rem);
    font-weight: 800;
    line-height: 1.1;
    margin: 0;
  }

  .category-stats {
    display: flex;
    justify-content: center;
    gap: 2rem;
    margin-bottom: 2rem;
    flex-wrap: wrap;
  }

  .stat-item {
    text-align: center;
  }

  .stat-number {
    font-size: 2rem;
    font-weight: 800;
    color: var(--color-text-primary);
    line-height: 1;
  }

  .stat-label {
    font-size: 0.75rem;
    font-weight: 700;
    letter-spacing: 0.1em;
    color: var(--color-text-muted);
    margin-top: 0.25rem;
  }

  .category-description {
    font-size: 1.125rem;
    line-height: 1.6;
    color: var(--color-text-secondary);
    margin-bottom: 2rem;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }

  .action-buttons {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  .action-btn {
    font-size: 0.875rem;
    font-weight: 700;
    letter-spacing: 0.05em;
    padding: 0.75rem 1.5rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
  }

  /* Quick Actions Sidebar */
  .quick-actions {
    position: fixed;
    right: 1.5rem;
    top: 50%;
    transform: translateY(-50%);
    z-index: 50;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .quick-action-btn {
    width: 48px;
    height: 48px;
    background: var(--color-bg-primary);
    border: 2px solid var(--color-border);
    border-radius: var(--tinkbyte-radius-button);
    color: var(--color-text-secondary);
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1rem;
  }

  .quick-action-btn:hover {
    background: var(--color-accent);
    border-color: var(--color-accent);
    color: white;
    transform: translateY(-2px);
  }

  .follow-btn.following {
    background: #10b981;
    border-color: #10b981;
    color: white;
  }

  .follow-btn.following:hover {
    background: #ef4444;
    border-color: #ef4444;
  }

  .follow-btn.following .follow-icon {
    display: none;
  }

  .follow-btn.following .following-icon {
    display: block !important;
  }

  .follower-count {
    width: 48px;
    height: 32px;
    background: var(--color-bg-secondary);
    border: 2px solid var(--color-border);
    border-radius: var(--tinkbyte-radius-sm);
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .count-number {
    font-size: 0.875rem;
    font-weight: 800;
    color: var(--color-text-primary);
  }

  /* Articles Section */
  .articles-section {
    padding: 4rem 0;
  }

  .featured-section,
  .all-articles-section {
    margin-bottom: 3rem;
  }

  .section-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 2rem;
    flex-wrap: wrap;
    gap: 1rem;
  }

  .section-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-text-primary);
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin: 0;
  }

  .section-icon {
    color: #f59e0b;
  }

  .article-count {
    font-size: 0.875rem;
    color: var(--color-text-muted);
    font-weight: 600;
  }

  .featured-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }

  .featured-article {
    position: relative;
  }

  .featured-article::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, var(--color-accent), #8b5cf6, #06b6d4);
    border-radius: var(--tinkbyte-radius-card);
    z-index: -1;
    opacity: 0.6;
  }

  .articles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }

  .article-item {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.6s ease forwards;
    animation-delay: var(--animation-delay, 0s);
    transition: transform 0.3s ease;
  }

  .article-item:hover {
    transform: translateY(-4px);
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  /* Empty State */
  .empty-state {
    text-align: center;
    padding: 4rem 0;
  }

  .empty-content {
    max-width: 500px;
    margin: 0 auto;
  }

  .empty-content i {
    font-size: 4rem;
    margin-bottom: 2rem;
    display: block;
  }

  .empty-title {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--color-text-primary);
    margin-bottom: 1rem;
  }

  .empty-description {
    font-size: 1rem;
    color: var(--color-text-secondary);
    line-height: 1.6;
    margin-bottom: 2rem;
  }

  .empty-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    flex-wrap: wrap;
  }

  /* Toast Notification */
  .toast-notification {
    position: fixed;
    top: 2rem;
    right: 2rem;
    background: #10b981;
    color: white;
    padding: 0.75rem 1rem;
    border-radius: var(--tinkbyte-radius-button);
    font-size: 0.875rem;
    font-weight: 600;
    z-index: 1000;
    border: 2px solid #10b981;
    animation: slideInRight 0.3s ease;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }

  /* Mobile Responsive */
  @media (max-width: 1024px) {
    .quick-actions {
      display: none;
    }

    .featured-grid,
    .articles-grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
      gap: 1.5rem;
    }
  }

  /* Mobile Breadcrumb Navigation Fix */
  @media (max-width: 768px) {
    .category-hero {
      padding: 2rem 0;
    }

    .container {
      padding: 0 0.75rem;
    }

    /* Mobile Breadcrumb - Clean Straight Line */
    .breadcrumb-nav {
      justify-content: flex-start;
      padding: 1rem 0;
      margin-bottom: 1.5rem;
      font-size: 0.8125rem;
      gap: 0.375rem;
      background: rgba(248, 250, 252, 0.5);
      border-radius: var(--tinkbyte-radius-sm);
      padding: 0.75rem 1rem;
      margin-left: -0.75rem;
      margin-right: -0.75rem;
      width: calc(100% + 1.5rem);
    }

    :global(.dark) .breadcrumb-nav {
      background: rgba(30, 41, 59, 0.5);
    }

    .breadcrumb-link {
      font-size: 0.8125rem;
      padding: 0.25rem 0.5rem;
      border-radius: var(--tinkbyte-radius-sm);
      transition: all 0.2s ease;
    }

    .breadcrumb-link:hover {
      background: rgba(59, 130, 246, 0.15);
      color: #3b82f6;
    }

    .breadcrumb-separator {
      font-size: 0.75rem;
      margin: 0 0.25rem;
      color: var(--color-text-muted);
    }

    .breadcrumb-current {
      font-size: 0.8125rem;
      padding: 0.25rem 0.75rem;
      background: rgba(16, 185, 129, 0.15);
      color: #10b981;
      border-radius: var(--tinkbyte-radius-sm);
      font-weight: 700;
    }

    .category-title-section {
      flex-direction: column;
      gap: 0.75rem;
    }

    .category-icon {
      font-size: 2rem;
    }

    .category-stats {
      gap: 1rem;
    }

    .action-buttons {
      flex-direction: column;
      align-items: center;
    }

    .action-btn {
      width: 100%;
      max-width: 280px;
      justify-content: center;
    }

    .section-header {
      flex-direction: column;
      align-items: flex-start;
      gap: 0.5rem;
    }

    .featured-grid,
    .articles-grid {
      grid-template-columns: 1fr;
      gap: 1rem;
    }
  }

  @media (max-width: 480px) {
    .category-hero {
      padding: 1.5rem 0;
    }

    .container {
      padding: 0 0.5rem;
    }

    /* Extra Small Mobile Breadcrumb */
    .breadcrumb-nav {
      font-size: 0.75rem;
      gap: 0.25rem;
      padding: 0.5rem 0.75rem;
      margin-left: -0.5rem;
      margin-right: -0.5rem;
      width: calc(100% + 1rem);
    }

    .breadcrumb-link {
      font-size: 0.75rem;
      padding: 0.2rem 0.4rem;
    }

    .breadcrumb-separator {
      font-size: 0.6875rem;
      margin: 0 0.2rem;
    }

    .breadcrumb-current {
      font-size: 0.75rem;
      padding: 0.2rem 0.5rem;
    }

    .category-title {
      font-size: clamp(1.75rem, 4vw, 2.5rem);
    }

    .category-description {
      font-size: 1rem;
    }
  }

  /* Dark Mode Support for Mobile Breadcrumb */
  @media (max-width: 768px) {
    :global(.dark) .breadcrumb-link {
      color: rgb(148, 163, 184);
    }

    :global(.dark) .breadcrumb-link:hover {
      color: rgb(147, 197, 253);
      background: rgba(59, 130, 246, 0.2);
    }

    :global(.dark) .breadcrumb-current {
      color: rgb(52, 211, 153);
      background: rgba(16, 185, 129, 0.2);
    }

    :global(.dark) .breadcrumb-separator {
      color: rgb(100, 116, 139);
    }
  }
</style>

<script>
  // Import supabase directly in the script instead of using define:vars
  import { supabase } from '../../../lib/supabase.js';
  
  const DEBUG = import.meta.env?.DEV || false;

const debugLog = (message: string, data?: any) => {
  if (DEBUG) console.log(`[CategoryPage] ${message}`, data || '');
};

  document.addEventListener('DOMContentLoaded', async () => {
    const followBtn = document.getElementById('follow-topic') as HTMLButtonElement;
    const shareBtn = document.getElementById('share-category') as HTMLButtonElement;
    const followerCount = document.getElementById('follower-count') as HTMLElement;
    
    if (!followBtn) return;

    const topicName = followBtn.getAttribute('data-topic-name') || '';
    const topicSlug = followBtn.getAttribute('data-topic-slug') || '';
    
    let currentUser: any = null;
    let isFollowing = false;

    try {
      debugLog('Initializing category functionality...');
      
      // Get current user
      const { data: { user }, error: authError } = await supabase.auth.getUser();
      
      if (!authError && user) {
        currentUser = user;
        debugLog('User authenticated:', user.email);
        
        // Check follow status
        if (topicSlug) {
          const { data: followData } = await supabase
            .from('user_category_follows')
            .select('id')
            .eq('user_id', user.id)
            .eq('category_slug', topicSlug)
            .maybeSingle();
          
          isFollowing = !!followData;
          debugLog('Follow status:', isFollowing);
        }
      }
      
      // Load follower count
      if (topicSlug) {
        const { data } = await supabase
          .from('user_category_follows')
          .select('id')
          .eq('category_slug', topicSlug);

        const count = data?.length || 0;
        if (followerCount && count > 0) {
          const countElement = followerCount.querySelector('.count-number') as HTMLElement;
          if (countElement) {
            countElement.textContent = count.toString();
            followerCount.style.display = 'flex';
          }
        }
      }
      
      updateFollowButton();
      
      // Follow button handler
      followBtn.addEventListener('click', async () => {
        if (!currentUser) {
          if (confirm('Sign in to follow topics and get personalized content?')) {
            window.location.href = '/auth/signin';
          }
          return;
        }

        try {
          followBtn.disabled = true;
          
          if (isFollowing) {
            const { error } = await supabase
              .from('user_category_follows')
              .delete()
              .eq('user_id', currentUser.id)
              .eq('category_slug', topicSlug);
            
            if (error) throw error;
            
            isFollowing = false;
            showToast(`Unfollowed ${topicName}`);
          } else {
            const { error } = await supabase
              .from('user_category_follows')
              .insert({
                user_id: currentUser.id,
                category_slug: topicSlug,
                environment: 'production',
                created_at: new Date().toISOString()
              });
            
            if (error) throw error;
            
            isFollowing = true;
            showToast(`Now following ${topicName}!`);
          }
          
          updateFollowButton();
          
        } catch (error: any) {
          debugLog('Follow action failed:', error);
          
          if (error.code === '23505') {
            isFollowing = true;
            updateFollowButton();
            showToast('Already following this topic');
          } else {
            showToast('Failed to update follow status');
          }
        } finally {
          followBtn.disabled = false;
        }
      });

      // Share button handler
      if (shareBtn) {
        shareBtn.addEventListener('click', async () => {
          const url = window.location.href;
          const title = `${topicName} Articles | TinkByte`;
          
          if (navigator.share) {
            try {
              await navigator.share({
                title: title,
                text: `Check out these ${topicName} articles on TinkByte`,
                url: url
              });
            } catch (error) {
              debugLog('Share cancelled');
            }
          } else {
            try {
              await navigator.clipboard.writeText(url);
              showToast('Link copied to clipboard!');
            } catch (error) {
              showToast('Failed to copy link');
            }
          }
        });
      }
      
    } catch (error) {
      debugLog('Initialization failed:', error);
    }

    function updateFollowButton() {
      if (!followBtn) return;
      
      followBtn.classList.toggle('following', isFollowing);
      
      if (!currentUser) {
        followBtn.title = 'Sign in to follow topics';
      } else if (isFollowing) {
        followBtn.title = `Unfollow ${topicName}`;
      } else {
        followBtn.title = `Follow ${topicName}`;
      }
    }

    function showToast(message: string) {
      const existingToast = document.querySelector('.toast-notification');
      if (existingToast) {
        existingToast.remove();
      }
      
      const toast = document.createElement('div');
      toast.className = 'toast-notification';
      toast.textContent = message;
      document.body.appendChild(toast);
      
      setTimeout(() => {
        if (toast.parentNode) {
          toast.remove();
        }
      }, 3000);
    }

    // Animation setup
    const articleItems = document.querySelectorAll('.article-item');
    
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px',
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const element = entry.target as HTMLElement;
          element.style.opacity = '1';
          element.style.transform = 'translateY(0)';
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    articleItems.forEach((item) => {
      observer.observe(item);
    });
  });
</script>