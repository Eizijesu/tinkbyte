---
// src/pages/blog/categories/[category].astro - Fixed version
import Layout from "../../../layouts/Layout.astro";
import ArticleCard from "../../../components/blog/ArticleCard.astro";
import Button from "../../../components/ui/Button.astro";
import { getCollection } from "astro:content";
import { SITE } from "../../../config/site";
import type { CollectionEntry } from "astro:content";

type BlogPost = CollectionEntry<"blog">;

export async function getStaticPaths() {
  const allPosts = await getCollection("blog", ({ data }) => !data.draft);

  
  // Category alias mapping
  const categoryAliases: Record<string, string> = {
    'build-loop': 'fail-iterate-ship',
    'developer-tools': 'developer-stack-tools', 
    'business-models': 'business-models-monetization',
    'consumer-behavior': 'consumer-behavior-attention',
    'research-backed': 'research-bites',
    'market-maps': 'ecosystem-shifts-market-maps'
  };

  // Get categories from existing posts (already in kebab-case)
  const existingCategories: string[] = [
    ...new Set(allPosts.map((post: BlogPost) => post.data.category)),
  ].filter((cat): cat is string => Boolean(cat));

  // Define predefined categories in kebab-case to match your posts
  const predefinedCategories = [
  // Core Themes
  "build-thinking",
  "learning-by-doing",
  "fail-iterate-ship",
  "build-loop", // ← ADD: alias for fail-iterate-ship
  "product-lessons",
  "startup-insight", 
  "product-strategy",
  
  // Specialized Themes
  "ai-evolution",
  "developer-stack-tools", // ← CORRECTED: full slug
  "developer-tools",       // ← ADD: alias
  "research-bites",
  "research-backed", // ← ADD: alias
  "system-thinking",
  "the-interface",
  "tech-culture", 
  "global-perspective",
  "community-innovation",
  
  // Extended Themes
  "career-stacks",
  "future-stacks",
  "business-models-monetization", // ← CORRECTED: full slug
  "business-models",              // ← ADD: alias
  "creator-economy",
  "consumer-behavior-attention",  // ← CORRECTED: full slug
  "consumer-behavior",            // ← ADD: alias
  "ecosystem-shifts-market-maps", // ← CORRECTED: full slug
  "market-maps",                  // ← ADD: alias
  "people-systems"
];

  // Combine both - ensures all predefined categories have pages
  const allCategories = [...new Set([...existingCategories, ...predefinedCategories])];

  // Create mapping from kebab-case to Title Case for display
  const categoryDisplayNames: Record<string, string> = {
  // Core Themes
  "build-thinking": "Build Thinking",
  "learning-by-doing": "Learning by Doing", 
  "fail-iterate-ship": "Fail / Iterate / Ship",
  "build-loop": "Fail / Iterate / Ship",
  "product-lessons": "Product Lessons",
  "startup-insight": "Startup Insight",
  "product-strategy": "Product Strategy",
  
  // Specialized Themes
  "ai-evolution": "AI Evolution",
  "developer-stack-tools": "Developer Stack & Tools", 
  "developer-tools": "Developer Stack & Tools",      
  "research-bites": "Research Bites",
  "research-backed": "Research Bites",
  "system-thinking": "System Thinking",
  "the-interface": "The Interface", 
  "tech-culture": "Tech Culture",
  "global-perspective": "Global Perspective",
  "community-innovation": "Community Innovation",
  
  // Extended Themes
  "career-stacks": "Career Stacks",
  "future-stacks": "Future Stacks",
  "business-models-monetization": "Business Models & Monetization", // ← CORRECTED
  "business-models": "Business Models & Monetization",              // ← ADD: alias
  "creator-economy": "Creator Economy",
  "consumer-behavior-attention": "Consumer Behavior & Attention",   // ← CORRECTED
  "consumer-behavior": "Consumer Behavior & Attention",             // ← ADD: alias
  "ecosystem-shifts-market-maps": "Ecosystem Shifts & Market Maps", // ← CORRECTED
  "market-maps": "Ecosystem Shifts & Market Maps",                  // ← ADD: alias
  "people-systems": "People Systems"
};

console.log("Creating category pages for:", allCategories);
  console.log("Total categories:", allCategories.length);

  return allCategories.map((category: string) => {
    // Get the canonical category (resolve aliases)
    const canonicalCategory = categoryAliases[category] || category;
    
    // Filter posts by both the category and its aliases
    const categoryPosts = allPosts.filter((post: BlogPost) => {
      const postCategory = post.data.category;
      return postCategory === category || 
             postCategory === canonicalCategory ||
             categoryAliases[postCategory] === category;
    });

    console.log(`Category: ${category} -> Posts: ${categoryPosts.length}`);

    return {
      params: { category: category },
      props: {
        categoryName: categoryDisplayNames[category] || category,
        posts: categoryPosts,
      },
    };
  });
}

interface Props {
  categoryName: string;
  posts: BlogPost[];
}

const { categoryName, posts }: Props = Astro.props;

// Enhanced category color and icon mapping (using kebab-case keys)
const getCategoryColor = (categoryName: string): string => {
  const colorMap: Record<string, string> = {
    "build-thinking": "blue",
    "learning-by-doing": "purple",
    "product-lessons": "green",
    "startup-insight": "red",
    "product-strategy": "indigo",
    "ai-evolution": "violet",
    "developer-tools": "emerald",
    "research-bites": "pink",
    "global-perspective": "cyan",
    "community-innovation": "green",
    "tech-culture": "pink",
    "system-thinking": "emerald",
    "the-interface": "blue",
    "fail-iterate-ship":"orange",
    "build-loop": "orange",
    "career-stacks": "red",
    "future-stacks": "violet",
    "creator-economy": "pink",
    "business-models": "indigo",
    "consumer-behavior": "cyan",
    "market-maps": "emerald",
    "people-systems": "orange"
  };
  
  // Convert display name back to kebab-case for lookup
  const slug = categoryName.toLowerCase().replace(/\s+/g, '-');
  return colorMap[slug] || "blue";
};

const getCategoryIcon = (categoryName: string): string => {
  const iconMap: Record<string, string> = {
    "build-thinking": "fas fa-hammer",
    "learning-by-doing": "fas fa-book",
    "product-lessons": "fas fa-lightbulb",
    "startup-insight": "fas fa-rocket",
    "product-strategy": "fas fa-chess",
    "ai-evolution": "fas fa-brain",
    "developer-tools": "fas fa-tools",
    "research-bites": "fas fa-chart-line",
    "global-perspective": "fas fa-globe",
    "community-innovation": "fas fa-users",
    "tech-culture": "fas fa-users-cog",
    "system-thinking": "fas fa-sitemap",
    "the-interface": "fas fa-desktop",
    "fail-iterate-ship": "fas fa-repeat",
    "career-stacks": "fas fa-briefcase",
    "future-stacks": "fas fa-rocket",
    "creator-economy": "fas fa-paint-brush",
    "business-models": "fas fa-dollar-sign",
    "consumer-behavior": "fas fa-eye",
    "market-maps": "fas fa-map",
    "people-systems": "fas fa-network-wired"
  };
  
  // Convert display name back to kebab-case for lookup
  const slug = categoryName.toLowerCase().replace(/\s+/g, '-');
  return iconMap[slug] || "fas fa-tag";
};

const categoryColor = getCategoryColor(categoryName);
const categoryIcon = getCategoryIcon(categoryName);

// Format post data with consistent author handling
const formatPost = (post: BlogPost) => {
  let authorData: {
    name: string;
    avatar?: string;
    bio?: string;
    role?: string;
  };

  if (post.data.authorInfo && typeof post.data.authorInfo === "object") {
    authorData = {
      name: post.data.authorInfo.name || "TinkByte Team",
      avatar: post.data.authorInfo.avatar,
      bio: post.data.authorInfo.bio,
      role: post.data.authorInfo.role,
    };
  } else if (typeof post.data.author === "string" && post.data.author.trim()) {
    authorData = {
      name: post.data.author,
      avatar: post.data.authorAvatar,
      bio: post.data.authorBio,
      role: post.data.authorRole,
    };
  } else if (typeof post.data.author === "object" && post.data.author !== null) {
    authorData = {
      name: (post.data.author as any).name || "TinkByte Team",
      avatar: (post.data.author as any).avatar || post.data.authorAvatar,
      bio: (post.data.author as any).bio || post.data.authorBio,
      role: (post.data.author as any).role || post.data.authorRole,
    };
  } else {
    authorData = {
      name: "TinkByte Team",
      avatar: post.data.authorAvatar,
      bio: post.data.authorBio,
      role: post.data.authorRole,
    };
  }

  return {
    title: post.data.title,
    excerpt: post.data.excerpt,
    date: post.data.pubDate.toLocaleDateString("en-US", {
      year: "numeric",
      month: "long",
      day: "numeric",
    }),
    readTime: post.data.readTime || "5 min read",
    slug: post.slug,
    image: post.data.image || "https://images.unsplash.com/photo-1677442136019-21780ecad995?w=600&h=400&fit=crop",
    tags: post.data.tags || [],
    category: post.data.category,
    author: authorData,
    audioUrl: post.data.audioUrl,
    featured: post.data.featured,
    trending: post.data.trending,
  };
};

// Get category stats
const featuredPosts = posts.filter(post => post.data.featured);
const trendingPosts = posts.filter(post => post.data.trending);

// Sort posts by date (newest first)
const sortedPosts = posts.sort((a, b) => 
  new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
);

const safeCategoryName = typeof categoryName === "string" ? categoryName.toLowerCase() : "unknown";
---

<Layout
  title={`${categoryName} Articles | ${SITE.name}`}
  description={`Explore our ${safeCategoryName} articles. Deep insights and practical knowledge for builders and innovators.`}
>
  <!-- Compact Category Hero -->
  <section class="relative py-12 lg:py-16 overflow-hidden">
    <div class="absolute inset-0 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 opacity-5"></div>
    <div class="absolute inset-0 bg-[url('/images/pattern.svg')] opacity-0"></div>

    <div class="container mx-auto px-4 relative z-10">
      <div class="max-w-4xl mx-auto">
        <!-- Breadcrumb Navigation -->
        <nav class="mb-6">
          <div class="flex items-center space-x-2 text-sm text-zinc-500 dark:text-zinc-400">
            <a href="/blog" class="hover:text-zinc-700 dark:hover:text-zinc-300 uppercase tracking-wide font-semibold transition-colors">
              Blog
            </a>
            <i class="fas fa-chevron-right text-xs mx-2"></i>
            <a href="/blog/categories" class="hover:text-zinc-700 dark:hover:text-zinc-300 uppercase tracking-wide transition-colors">
              Categories
            </a>
            <i class="fas fa-chevron-right text-xs mx-2"></i>
            <span class="text-zinc-700 dark:text-zinc-300 uppercase tracking-wide font-semibold">
              {categoryName}
            </span>
          </div>
        </nav>

        <div class="text-center">
          <!-- Category Badge -->
          <div class="inline-flex items-center gap-2 px-4 py-2 bg-white/80 dark:bg-zinc-800/80 backdrop-blur-sm rounded-sm border border-zinc-200 dark:border-zinc-700 mb-4">
            <div class={`w-3 h-3 rounded-full ${
              categoryColor === "purple" ? "bg-purple-500" :
              categoryColor === "blue" ? "bg-blue-500" :
              categoryColor === "green" ? "bg-green-500" :
              categoryColor === "orange" ? "bg-orange-500" :
              categoryColor === "red" ? "bg-red-500" :
              categoryColor === "cyan" ? "bg-cyan-500" :
              categoryColor === "pink" ? "bg-pink-500" :
              categoryColor === "indigo" ? "bg-indigo-500" :
              categoryColor === "violet" ? "bg-violet-500" :
              categoryColor === "emerald" ? "bg-emerald-500" :
              "bg-blue-500"
            }`}></div>
            <span class="text-sm font-bold uppercase tracking-wider text-zinc-700 dark:text-zinc-300">
              CATEGORY
            </span>
          </div>

          <!-- Category Title with Icon -->
          <div class="flex items-center justify-center gap-3 mb-4">
            <i class={`${categoryIcon} text-2xl ${
              categoryColor === "purple" ? "text-purple-600" :
              categoryColor === "blue" ? "text-blue-600" :
              categoryColor === "green" ? "text-green-600" :
              categoryColor === "orange" ? "text-orange-600" :
              categoryColor === "red" ? "text-red-600" :
              categoryColor === "cyan" ? "text-cyan-600" :
              categoryColor === "pink" ? "text-pink-600" :
              categoryColor === "indigo" ? "text-indigo-600" :
              categoryColor === "violet" ? "text-violet-600" :
              categoryColor === "emerald" ? "text-emerald-600" :
              "text-blue-600"
            }`}></i>
            <h1 class="text-3xl lg:text-4xl font-bold text-zinc-900 dark:text-white">
              <span class={`bg-gradient-to-r ${
                categoryColor === "purple" ? "from-purple-600 to-pink-600" :
                categoryColor === "blue" ? "from-blue-600 to-indigo-600" :
                categoryColor === "green" ? "from-green-600 to-emerald-600" :
                categoryColor === "orange" ? "from-orange-600 to-red-600" :
                categoryColor === "red" ? "from-red-600 to-pink-600" :
                categoryColor === "cyan" ? "from-cyan-600 to-blue-600" :
                categoryColor === "pink" ? "from-pink-600 to-rose-600" :
                categoryColor === "indigo" ? "from-indigo-600 to-purple-600" :
                categoryColor === "violet" ? "from-violet-600 to-purple-600" :
                categoryColor === "emerald" ? "from-emerald-600 to-green-600" :
                "from-blue-600 to-purple-600"
              } bg-clip-text text-transparent`}>
                {categoryName}
              </span>
            </h1>
          </div>

          <!-- Stats -->
          <div class="flex justify-center gap-6 mb-6">
            <div class="text-center">
              <div class="text-2xl font-bold text-zinc-900 dark:text-white">{posts.length}</div>
              <div class="text-xs text-zinc-500 dark:text-zinc-400 uppercase tracking-wider">ARTICLES</div>
            </div>
            {featuredPosts.length > 0 && (
              <div class="text-center">
                <div class="text-2xl font-bold text-zinc-900 dark:text-white">{featuredPosts.length}</div>
                <div class="text-xs text-zinc-500 dark:text-zinc-400 uppercase tracking-wider">FEATURED</div>
              </div>
            )}
            {trendingPosts.length > 0 && (
              <div class="text-center">
                <div class="text-2xl font-bold text-zinc-900 dark:text-white">{trendingPosts.length}</div>
                <div class="text-xs text-zinc-500 dark:text-zinc-400 uppercase tracking-wider">TRENDING</div>
              </div>
            )}
          </div>

          <!-- Description -->
          <p class="text-lg text-zinc-600 dark:text-zinc-300 leading-relaxed max-w-2xl mx-auto mb-6">
            {posts.length === 0 
              ? `No articles in ${categoryName} yet. Check back soon for fresh insights!`
              : `Discover ${posts.length} ${posts.length === 1 ? 'article' : 'articles'} covering ${safeCategoryName}. Deep insights and practical knowledge for builders and innovators.`
            }
          </p>

          <!-- Action Buttons -->
          <div class="flex flex-col sm:flex-row gap-3 justify-center">
            <Button
              variant="outline"
              href="/blog"
              className="group compact-btn"
            >
              <span class="flex items-center gap-2">
                <i class="fas fa-arrow-left text-sm transition-transform duration-300 group-hover:-translate-x-1"></i>
                ALL ARTICLES
              </span>
            </Button>
            <Button
              variant="outline"
              href="/all-topics"
              className="group compact-btn"
            >
              <span class="flex items-center gap-2">
                <i class="fas fa-th-large text-sm"></i>
                ALL TOPICS
              </span>
            </Button>
          </div>
        </div>
      </div>
    </div>
  </section>

  <!-- Quick Actions Sidebar -->
  <div class="quick-actions-sidebar" id="quick-actions">
    <div class="actions-content">
      <button 
        id="follow-topic" 
        class="action-btn follow-btn"
        data-topic-name={categoryName}
        data-topic-slug={Astro.params.category}
      >
        <svg width="14" height="14" viewBox="0 0 16 16" fill="none" class="follow-icon">
          <path
            d="M8 2V14M2 8H14"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
        <svg width="14" height="14" viewBox="0 0 16 16" fill="none" class="following-icon" style="display: none;">
          <path
            d="M13.5 3L6 10.5L2.5 7"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      </button>

      <button id="share-category" class="action-btn secondary">
        <svg width="14" height="14" viewBox="0 0 16 16" fill="none">
          <path
            d="M13 10.5C12.1716 10.5 11.5 11.1716 11.5 12C11.5 12.8284 12.1716 13.5 13 13.5C13.8284 13.5 14.5 12.8284 14.5 12C14.5 11.1716 13.8284 10.5 13 10.5ZM13 10.5L8.5 8M3 5.5C2.17157 5.5 1.5 6.17157 1.5 7C1.5 7.82843 2.17157 8.5 3 8.5C3.82843 8.5 4.5 7.82843 4.5 7C4.5 6.17157 3.82843 5.5 3 5.5ZM3 5.5L8.5 8M8.5 8L13 5.5"
            stroke="currentColor"
            stroke-width="1.5"
            stroke-linecap="round"
            stroke-linejoin="round"
          />
        </svg>
      </button>

      <div class="follower-count" id="follower-count" style="display: none;">
        <span class="count-number">0</span>
      </div>
    </div>
  </div>

  <!-- Articles Section -->
  <main class="category-articles-page">
    <div class="max-w-7xl mx-auto px-4 py-12">
      
      {posts.length > 0 ? (
        <>
          <!-- Featured Articles -->
          {featuredPosts.length > 0 && (
            <section class="mb-12">
              <h2 class="text-2xl font-bold text-zinc-900 dark:text-white mb-6 flex items-center">
                <i class="fas fa-star mr-3 text-yellow-500"></i>
                Featured Articles
              </h2>
              <div class="featured-articles-grid">
                {featuredPosts.slice(0, 3).map((post: BlogPost) => (
                  <div class="featured-article-wrapper">
                    <ArticleCard {...formatPost(post)} />
                  </div>
                ))}
              </div>
            </section>
          )}

          <!-- All Articles -->
          <section>
            <div class="flex items-center justify-between mb-8">
              <h2 class="text-2xl font-bold text-zinc-900 dark:text-white flex items-center">
                <i class={`${categoryIcon} mr-3 ${
                  categoryColor === "purple" ? "text-purple-600" :
                  categoryColor === "blue" ? "text-blue-600" :
                  categoryColor === "green" ? "text-green-600" :
                  categoryColor === "orange" ? "text-orange-600" :
                  categoryColor === "red" ? "text-red-600" :
                  categoryColor === "cyan" ? "text-cyan-600" :
                  categoryColor === "pink" ? "text-pink-600" :
                  categoryColor === "indigo" ? "text-indigo-600" :
                  categoryColor === "violet" ? "text-violet-600" :
                  categoryColor === "emerald" ? "text-emerald-600" :
                  "text-blue-600"
                }`}></i>
                All {categoryName} Articles
              </h2>
              <span class="text-sm text-zinc-500 dark:text-zinc-400">
                {posts.length} {posts.length === 1 ? 'article' : 'articles'}
              </span>
            </div>

            <div class="articles-grid">
              {sortedPosts.map((post: BlogPost, index) => (
                <div class="article-wrapper" style={`--animation-delay: ${index * 0.1}s`}>
                  <ArticleCard {...formatPost(post)} />
                </div>
              ))}
            </div>
          </section>
        </>
      ) : (
        <!-- Empty State -->
        <section class="text-center py-16">
          <div class="max-w-md mx-auto">
            <div class="mb-6">
              <i class={`${categoryIcon} text-4xl ${
                categoryColor === "purple" ? "text-purple-300 dark:text-purple-600" :
                categoryColor === "blue" ? "text-blue-300 dark:text-blue-600" :
                categoryColor === "green" ? "text-green-300 dark:text-green-600" :
                categoryColor === "orange" ? "text-orange-300 dark:text-orange-600" :
                categoryColor === "red" ? "text-red-300 dark:text-red-600" :
                categoryColor === "cyan" ? "text-cyan-300 dark:text-cyan-600" :
                categoryColor === "pink" ? "text-pink-300 dark:text-pink-600" :
                categoryColor === "indigo" ? "text-indigo-300 dark:text-indigo-600" :
                categoryColor === "violet" ? "text-violet-300 dark:text-violet-600" :
                categoryColor === "emerald" ? "text-emerald-300 dark:text-emerald-600" :
                "text-blue-300 dark:text-blue-600"
              }`}></i>
            </div>
            <h3 class="text-xl font-bold text-zinc-900 dark:text-zinc-100 mb-4">
              No {categoryName} Articles Yet
            </h3>
            <p class="text-zinc-600 dark:text-zinc-400 mb-6">
              We're working on creating amazing content for this category. 
              Check back soon or explore other categories!
            </p>
            <div class="flex flex-col sm:flex-row gap-3 justify-center">
              <Button href="/blog" variant="primary" className="compact-btn">
                <i class="fas fa-newspaper mr-2"></i>
                EXPLORE ALL ARTICLES
              </Button>
              <Button href="/all-topics" variant="outline" className="compact-btn">
                <i class="fas fa-th-large mr-2"></i>
                ALL TOPICS
              </Button>
            </div>
          </div>
        </section>
      )}
    </div>
  </main>
</Layout>

<style>
  .category-articles-page {
    font-family: "Space Grotesk", sans-serif;
    background-color: var(--color-bg-primary);
    color: var(--color-text-primary);
  }

  /* Quick Actions Sidebar */
  .quick-actions-sidebar {
    position: fixed;
    right: 1.5rem;
    top: 50%;
    transform: translateY(-50%);
    z-index: 50;
    background: var(--color-bg-primary);
    border: 2px solid var(--color-border);
    padding: 0.5rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    opacity: 1;
    min-width: 60px;
  }

  :global(.dark) .quick-actions-sidebar {
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.3);
  }

  .actions-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: stretch;
  }

  .action-btn {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.75rem;
    background: var(--color-bg-primary);
    border: 2px solid #243788;
    color: #243788;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: "Space Grotesk", sans-serif;
    font-weight: 600;
    width: 48px;
    height: 48px;
    position: relative;
  }

  .action-btn:hover {
    background: #243788;
    color: white;
    transform: translateY(-1px);
    box-shadow: 0 2px 8px rgba(36, 55, 136, 0.3);
  }

  .action-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .action-btn.secondary {
    border-color: var(--color-border);
    color: var(--color-text-secondary);
  }

  .action-btn.secondary:hover {
    background: var(--color-bg-secondary);
    color: var(--color-text-primary);
    border-color: var(--color-text-muted);
  }

  .follow-btn.following {
    background: #10b981;
    border-color: #10b981;
    color: white;
  }

  .follow-btn.following:hover {
    background: #ef4444;
    border-color: #ef4444;
  }

  .follow-btn.following .follow-icon {
    display: none;
  }

  .follow-btn.following .following-icon {
    display: block !important;
  }

  .follower-count {
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 0.5rem;
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    text-align: center;
    width: 48px;
    height: 32px;
  }

  .count-number {
    font-size: 0.875rem;
    font-weight: 800;
    color: var(--color-text-primary);
    line-height: 1;
  }

  @media (max-width: 1024px) {
    .quick-actions-sidebar {
      display: none;
    }
  }

  .compact-btn {
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-weight: 700;
    font-size: 0.875rem;
    padding: 0.75rem 1.5rem;
  }

  .featured-articles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 1.5rem;
    max-width: 1200px;
  }

  .featured-article-wrapper {
    position: relative;
  }

  .featured-article-wrapper::before {
    content: '';
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(45deg, #243788, #8B5CF6, #06B6D4);
    border-radius: 4px;
    z-index: -1;
    opacity: 0.6;
  }

  .articles-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
    gap: 2rem;
  }

  .article-wrapper {
    opacity: 0;
    transform: translateY(20px);
    animation: fadeInUp 0.6s ease forwards;
    animation-delay: var(--animation-delay, 0s);
  }

  @keyframes fadeInUp {
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  @media (max-width: 1024px) {
    .featured-articles-grid {
      grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    }
    
    .articles-grid {
      grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    }
  }

  @media (max-width: 768px) {
    .featured-articles-grid,
    .articles-grid {
      grid-template-columns: 1fr;
    }

    .compact-btn {
      width: 100%;
      max-width: 250px;
    }
  }

  @keyframes gradient {
    0% { background-position: 0% 50%; }
    50% { background-position: 100% 50%; }
    100% { background-position: 0% 50%; }
  }

  .bg-gradient-to-r.bg-clip-text {
    background-size: 200% 200%;
    animation: gradient 3s ease-in-out infinite;
  }

  .article-wrapper {
    transition: transform 0.3s ease;
  }

  .article-wrapper:hover {
    transform: translateY(-4px);
  }

  .toast-notification {
    position: fixed;
    top: 2rem;
    right: 2rem;
    background: #10b981;
    color: white;
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    z-index: 1002;
    border: 2px solid #10b981;
    border-radius: 6px;
    animation: slideInRight 0.3s ease;
  }

  @keyframes slideInRight {
    from {
      transform: translateX(100%);
      opacity: 0;
    }
    to {
      transform: translateX(0);
      opacity: 1;
    }
  }
</style>

<script>
  import { supabase } from '../../../lib/supabase.js';
  
  document.addEventListener('DOMContentLoaded', async () => {
    const followBtn = document.getElementById('follow-topic') as HTMLButtonElement | null;
    const shareBtn = document.getElementById('share-category') as HTMLButtonElement | null;
    const followerCount = document.getElementById('follower-count') as HTMLElement | null;
    
    if (!followBtn) return;
  
    const topicName = followBtn.getAttribute('data-topic-name');
    const topicSlug = followBtn.getAttribute('data-topic-slug');
    
    let currentUser: any = null;
    let isFollowing = false;
  
    try {
      const { data: { user } } = await supabase.auth.getUser();
      currentUser = user;
      
      if (user && topicSlug) {
        const { data: topic } = await supabase
          .from('categories')
          .select('id, name')
          .eq('slug', topicSlug)
          .single();
        
        if (topic) {
          const { data: followData } = await supabase
            .from('user_category_follows')
            .select('id')
            .eq('user_id', user.id)
            .eq('category_slug', topic.id)
            .single();
          
          isFollowing = !!followData;
          updateFollowButton();
          followBtn.setAttribute('data-topic-id', topic.id);
        }
      }
    } catch (error) {
      console.error('Auth check failed:', error);
    }
  
    followBtn.addEventListener('click', async (e) => {
      e.preventDefault();
      
      if (!currentUser) {
        if (confirm('Sign in to follow topics and get personalized content?')) {
          window.location.href = '/auth/signin';
        }
        return;
      }

      const topicId = followBtn.getAttribute('data-topic-id');
      if (!topicId) return;

      try {
        followBtn.disabled = true;
        
        if (isFollowing) {
          await supabase
            .from('user_category_follows')
            .delete()
            .eq('user_id', currentUser.id)
            .eq('category_slug', topicId);
          
          isFollowing = false;
          showToast(`Unfollowed ${topicName}`);
        } else {
          await supabase
            .from('user_category_follows')
            .insert({
              user_id: currentUser.id,
              category_slug: topicId,
              created_at: new Date().toISOString()
            });
          
          isFollowing = true;
          showToast(`Now following ${topicName}!`);
        }
        
        updateFollowButton();
        await updateFollowerCount();
        
      } catch (error) {
        console.error('Follow action failed:', error);
        showToast('Failed to update follow status');
      } finally {
        followBtn.disabled = false;
      }
    });

    async function updateFollowerCount() {
      if (!followerCount) return;
      
      const topicId = followBtn?.getAttribute('data-topic-id');
      if (!topicId) return;
      
      try {
        const { count } = await supabase
          .from('user_category_follows')
          .select('*', { count: 'exact', head: true })
          .eq('category_slug', topicId);
        
        const countElement = followerCount.querySelector('.count-number');
        if (countElement) {
          countElement.textContent = (count || 0).toString();
        }
      } catch (error) {
        console.error('Failed to get follower count:', error);
      }
    }

    if (shareBtn) {
      shareBtn.addEventListener('click', async (e) => {
        e.preventDefault();
        
        const url = window.location.href;
        const title = `${topicName} Articles | TinkByte`;
        
        if (navigator.share) {
          try {
            await navigator.share({
              title: title,
              text: `Check out these ${topicName} articles on TinkByte`,
              url: url
            });
          } catch (error) {
            console.log('Share cancelled');
          }
        } else {
          try {
            await navigator.clipboard.writeText(url);
            showToast('Link copied to clipboard!');
          } catch (error) {
            console.log('Copy failed');
          }
        }
      });
    }
  
    function updateFollowButton() {
      if (followBtn) {
        followBtn.classList.toggle('following', isFollowing);
        
        if (followerCount) {
          followerCount.style.display = isFollowing ? 'flex' : 'none';
        }
      }
    }
  
    function showToast(message: string) {
      const toast = document.createElement('div');
      toast.className = 'toast-notification';
      toast.textContent = message;
      document.body.appendChild(toast);
      
      setTimeout(() => toast.remove(), 3000);
    }
  
    const articleWrappers = document.querySelectorAll('.article-wrapper');
    
    articleWrappers.forEach((wrapper, index) => {
      const element = wrapper as HTMLElement;
      element.style.setProperty('--animation-delay', `${index * 0.1}s`);
    });
  
    const observerOptions = {
      threshold: 0.1,
      rootMargin: '0px 0px -50px 0px',
    };
  
    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const element = entry.target as HTMLElement;
          element.style.opacity = '1';
          element.style.transform = 'translateY(0)';
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);
  
    articleWrappers.forEach((wrapper) => {
      observer.observe(wrapper);
    });
  });
</script>