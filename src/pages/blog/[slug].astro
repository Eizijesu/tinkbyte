---
// src/pages/blog/[slug].astro - ENHANCED VERSION
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";

// Import TinaCMS components for MDX
import ImageBlock from "../../components/tina/ImageBlock.astro";
import VideoBlock from "../../components/tina/VideoBlock.astro";
import CalloutBox from "../../components/tina/CalloutBox.astro";
import ButtonBlock from "../../components/tina/ButtonBlock.astro";
import CodeBlock from "../../components/tina/CodeBlock.astro";
import Quote from "../../components/tina/Quote.astro";
import TableBlock from "../../components/tina/TableBlock.astro";
import ImageGallery from "../../components/tina/ImageGallery.astro";
import Newsletter from "../../components/tina/Newsletter.astro";
import TwoColumnLayout from "../../components/tina/TwoColumnLayout.astro";

// ENHANCED: Static path generation with better filtering and sorting
export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => {
    // Filter out drafts and future posts
    const now = new Date();
    const postDate = new Date(data.pubDate);

    return (
      data.draft !== true &&
      postDate <= now &&
      data.title && // Ensure title exists
      data.excerpt // Ensure excerpt exists
    );
  });

  // Sort posts by publication date (newest first)
  const sortedPosts = posts.sort(
    (a, b) =>
      new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  );

  return sortedPosts.map((post) => ({
    params: { slug: post.slug },
    props: {
      post,
      // Pass additional context for better performance
      allPosts: sortedPosts.length,
      postIndex: sortedPosts.findIndex((p) => p.slug === post.slug),
    },
  }));
}

// ENHANCED: Type definition with additional props
type Props = {
  post: CollectionEntry<"blog">;
  allPosts: number;
  postIndex: number;
};

const { post, allPosts, postIndex } = Astro.props;

// ENHANCED: Error handling for content rendering
let Content;
let headings = [];
let renderError = null;

try {
  const rendered = await post.render();
  Content = rendered.Content;
  headings = rendered.headings || [];
} catch (error) {
  console.error(`Error rendering post ${post.slug}:`, error);
  renderError = error;
  // Create fallback content
  Content = () => `
    <div class="error-fallback">
      <h2>Content Rendering Error</h2>
      <p>There was an issue rendering this article. Please check the content format.</p>
      <details>
        <summary>Technical Details</summary>
        <pre>${error}</pre>
      </details>
    </div>
  `;
}

// ENHANCED: Component mapping with error boundaries
const components = {
  ImageBlock,
  VideoBlock,
  Callout: CalloutBox,
  ButtonBlock,
  CodeBlock: CodeBlock,
  Quote: Quote,
  TableBlock,
  ImageGallery,
  Newsletter: Newsletter,
  TwoColumnLayout,
};

// ENHANCED: Content processing and validation
const processedData = {
  title: post.data.title || "Untitled Article",
  subtitle: post.data.subtitle,
  description: post.data.excerpt || post.data.description,
  excerpt: post.data.excerpt || "No excerpt available",
  date: post.data.pubDate,
  updatedDate: post.data.updatedDate,
  readTime: post.data.readTime || "Unknown",
  tags: Array.isArray(post.data.tags) ? post.data.tags : [],
  category: post.data.category || "uncategorized",
  authorInfo: post.data.authorInfo || {
    name: "TinkByte Team",
    role: "Editorial Team",
  },
  heroImage: post.data.heroImage,
  image: post.data.image,
  imageAlt: post.data.imageAlt,
  audioUrl: post.data.audioUrl,
  audioDuration: post.data.audioDuration,
  featured: post.data.featured || false,
  trending: post.data.trending || false,
  // Editorial workflow fields
  editorial: post.data.editorial || {},
  seo: post.data.seo || {},
};

// ENHANCED: Auto-generate reading time if missing
if (!processedData.readTime || processedData.readTime === "Unknown") {
  const content = post.body || "";
  const wordCount = content.split(/\s+/).length;
  processedData.readTime = `${Math.ceil(wordCount / 200)} min read`;
}

// ENHANCED: SEO optimization
const seoTitle = processedData.seo?.title || processedData.title;
const seoDescription = processedData.seo?.description || processedData.excerpt;
const canonicalUrl = processedData.seo?.canonical;

// ENHANCED: Article navigation context
const navigationContext = {
  currentIndex: postIndex,
  totalPosts: allPosts,
  isFirst: postIndex === 0,
  isLast: postIndex === allPosts - 1,
};

// ENHANCED: Content analytics data
const analyticsData = {
  contentType: "blog-post",
  category: processedData.category,
  author: processedData.authorInfo?.name,
  publishDate: processedData.date,
  wordCount: post.body?.split(/\s+/).length || 0,
  hasAudio: !!processedData.audioUrl,
  hasFeaturedImage: !!(
    processedData.heroImage?.externalUrl ||
    processedData.heroImage?.uploadedImage ||
    processedData.image
  ),
  tagCount: processedData.tags.length,
};

// ENHANCED: Debug logging with performance metrics
const debugStart = Date.now();
console.log("=== ENHANCED POST DEBUG ===");
console.log("Post slug:", post.slug);
console.log("Post title:", processedData.title);
console.log("Render error:", renderError ? "YES" : "NO");
console.log("Headings found:", headings.length);
console.log("Navigation context:", navigationContext);
console.log("Analytics data:", analyticsData);
console.log("Processing time:", Date.now() - debugStart, "ms");
console.log("================================");

// ENHANCED: Editorial workflow status check
const isInDevelopment = import.meta.env.DEV;
const editorialStatus = processedData.editorial?.status;
const showEditorialInfo =
  isInDevelopment && editorialStatus && editorialStatus !== "published";
---

<!-- ENHANCED: Editorial workflow indicator for development -->{
  showEditorialInfo && (
    <div class="editorial-status-banner">
      <div class="max-w-6xl mx-auto px-4 py-2">
        <div class="flex items-center justify-between bg-yellow-100 dark:bg-yellow-900 border border-yellow-300 dark:border-yellow-700 rounded px-4 py-2">
          <div class="flex items-center gap-2">
            <span class="text-yellow-800 dark:text-yellow-200 text-sm font-medium">
              üìù Editorial Status: {editorialStatus?.toUpperCase()}
            </span>
            {processedData.editorial?.assignedEditor && (
              <span class="text-yellow-700 dark:text-yellow-300 text-xs">
                ‚Ä¢ Assigned to: {processedData.editorial.assignedEditor}
              </span>
            )}
          </div>
          <a
            href="/admin"
            class="text-yellow-800 dark:text-yellow-200 text-xs hover:underline"
          >
            Edit in TinaCMS ‚Üí
          </a>
        </div>
      </div>
    </div>
  )
}

<BlogPost
  title={processedData.title}
  subtitle={processedData.subtitle}
  description={processedData.description}
  excerpt={processedData.excerpt}
  date={processedData.date}
  updatedDate={processedData.updatedDate}
  readTime={processedData.readTime}
  tags={processedData.tags}
  category={processedData.category}
  authorInfo={processedData.authorInfo}
  heroImage={processedData.heroImage}
  image={processedData.image}
  imageAlt={processedData.imageAlt}
  audioUrl={processedData.audioUrl}
  audioDuration={processedData.audioDuration}
  slug={post.slug}
  featured={processedData.featured}
  trending={processedData.trending}
  navigationContext={navigationContext}
  analyticsData={analyticsData}
  seoTitle={seoTitle}
  seoDescription={seoDescription}
  canonicalUrl={canonicalUrl}
  headings={headings}
  renderError={renderError}
>
  <!-- ENHANCED: Content rendering with error boundary -->
  {
    renderError ? (
      <div class="content-error-boundary">
        <div class="max-w-4xl mx-auto px-4 py-12">
          <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6">
            <div class="flex items-start gap-3">
              <div class="flex-shrink-0">
                <svg
                  class="w-5 h-5 text-red-500"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                    clip-rule="evenodd"
                  />
                </svg>
              </div>
              <div>
                <h3 class="text-sm font-medium text-red-800 dark:text-red-200">
                  Content Rendering Error
                </h3>
                <p class="mt-1 text-sm text-red-700 dark:text-red-300">
                  There was an issue rendering this article. The content may
                  contain invalid MDX syntax or missing components.
                </p>
                {isInDevelopment && renderError && (
                  <details class="mt-3">
                    <summary class="text-xs text-red-600 dark:text-red-400 cursor-pointer hover:underline">
                      Show Technical Details
                    </summary>
                    <pre class="mt-2 text-xs bg-red-100 dark:bg-red-900/40 p-3 rounded overflow-auto">
                      {typeof renderError === "string"
                        ? renderError
                        : JSON.stringify(renderError, null, 2)}
                    </pre>
                  </details>
                )}
              </div>
            </div>
          </div>
        </div>
      </div>
    ) : (
      <Content components={components} />
    )
  }
</BlogPost>

<!-- ENHANCED: Performance monitoring script -->
<script define:vars={{ analyticsData, navigationContext, isInDevelopment }}>
  // Performance monitoring
  if (typeof window !== "undefined") {
    window.addEventListener("load", () => {
      const loadTime = performance.now();

      // Track content performance
      if (window.gtag) {
        window.gtag("event", "page_load_time", {
          value: Math.round(loadTime),
          content_type: analyticsData.contentType,
          content_category: analyticsData.category,
          has_audio: analyticsData.hasAudio,
          word_count: analyticsData.wordCount,
        });
      }

      // Development debugging
      if (isInDevelopment) {
        console.log("üöÄ Article Performance:", {
          loadTime: `${Math.round(loadTime)}ms`,
          navigation: navigationContext,
          analytics: analyticsData,
        });
      }
    });
  }
</script>

<style>
  .editorial-status-banner {
    position: sticky;
    top: 0;
    z-index: 50;
    backdrop-filter: blur(8px);
  }

  .content-error-boundary {
    min-height: 50vh;
    display: flex;
    align-items: center;
  }

  /* Development-only styles */
  .editorial-status-banner {
    display: var(--show-editorial, block);
  }

  @media (prefers-reduced-motion: reduce) {
    .editorial-status-banner {
      backdrop-filter: none;
    }
  }
</style>
