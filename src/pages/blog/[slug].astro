---
// src/pages/blog/[slug].astro - CLEAN VERSION
import { type CollectionEntry, getCollection } from "astro:content";
import BlogPost from "../../layouts/BlogPost.astro";

// Import TinaCMS components for MDX
import ImageBlock from "../../components/tina/ImageBlock.astro";
import VideoBlock from "../../components/tina/VideoBlock.astro";
import CalloutBox from "../../components/tina/CalloutBox.astro";
import ButtonBlock from "../../components/tina/ButtonBlock.astro";
import CodeBlock from "../../components/tina/CodeBlock.astro";
import Quote from "../../components/tina/Quote.astro";
import TableBlock from "../../components/tina/TableBlock.astro";
import ImageGallery from "../../components/tina/ImageGallery.astro";
import Newsletter from "../../components/tina/Newsletter.astro";
import TwoColumnLayout from "../../components/tina/TwoColumnLayout.astro";

// Type definitions
interface NavigationContext {
  currentIndex: number;
  totalPosts: number;
  isFirst: boolean;
  isLast: boolean;
}

interface AnalyticsData {
  contentType: string;
  category: string;
  author: string;
  publishDate: Date;
  wordCount: number;
  hasAudio: boolean;
  hasFeaturedImage: boolean;
  tagCount: number;
}

interface BlogPostProps {
  title: string;
  subtitle?: string;
  description?: string;
  excerpt?: string;
  date: Date;
  updatedDate?: Date;
  readTime?: string;
  tags?: string[];
  category?: string;
  authorInfo?: {
    name: string;
    role?: string;
  };
  heroImage?: any;
  image?: string;
  imageAlt?: string;
  audioUrl?: string;
  audioDuration?: string;
  slug: string;
  featured?: boolean;
  trending?: boolean;
  navigationContext?: NavigationContext;
  analyticsData?: AnalyticsData;
  seoTitle?: string;
  seoDescription?: string;
  canonicalUrl?: string;
  headings?: any[];
  renderError?: Error | null;
}

// Static path generation
export async function getStaticPaths() {
  const posts = await getCollection("blog", ({ data }) => {
    const now = new Date();
    const postDate = new Date(data.pubDate);

    return data.draft !== true && postDate <= now && data.title && data.excerpt;
  });

  const sortedPosts = posts.sort(
    (a: CollectionEntry<"blog">, b: CollectionEntry<"blog">) =>
      new Date(b.data.pubDate).getTime() - new Date(a.data.pubDate).getTime()
  );

  return sortedPosts.map((post: CollectionEntry<"blog">) => ({
    params: { slug: post.slug },
    props: {
      post,
      allPosts: sortedPosts.length,
      postIndex: sortedPosts.findIndex(
        (p: CollectionEntry<"blog">) => p.slug === post.slug
      ),
    },
  }));
}

// Get props
const { post, allPosts, postIndex } = Astro.props as {
  post: CollectionEntry<"blog">;
  allPosts: number;
  postIndex: number;
};

// Content rendering with error handling
let Content: any;
let headings: any[] = [];
let renderError: Error | null = null;

try {
  const rendered = await post.render();
  Content = rendered.Content;
  headings = rendered.headings || [];
} catch (error) {
  console.error(`Error rendering post ${post.slug}:`, error);
  renderError = error as Error;
  Content = () => `
    <div class="error-fallback">
      <h2>Content Rendering Error</h2>
      <p>There was an issue rendering this article. Please check the content format.</p>
    </div>
  `;
}

// Component mapping for TinaCMS
const components = {
  ImageBlock,
  VideoBlock,
  Callout: CalloutBox,
  ButtonBlock,
  CodeBlock: CodeBlock,
  Quote: Quote,
  TableBlock,
  ImageGallery,
  Newsletter: Newsletter,
  TwoColumnLayout,
};

// Process content data
const processedData: BlogPostProps = {
  title: post.data.title || "Untitled Article",
  subtitle: post.data.subtitle,
  description: post.data.excerpt || post.data.description,
  excerpt: post.data.excerpt || "No excerpt available",
  date: post.data.pubDate,
  updatedDate: post.data.updatedDate,
  readTime: post.data.readTime || "Unknown",
  tags: Array.isArray(post.data.tags) ? post.data.tags : [],
  category: post.data.category || "uncategorized",
  authorInfo: post.data.authorInfo || {
    name: "TinkByte Team",
    role: "Editorial Team",
  },
  heroImage: post.data.heroImage,
  image: post.data.image,
  imageAlt: post.data.imageAlt,
  audioUrl: post.data.audioUrl,
  audioDuration: post.data.audioDuration,
  slug: post.slug,
  featured: post.data.featured || false,
  trending: post.data.trending || false,
  navigationContext: undefined,
  analyticsData: undefined,
  seoTitle: undefined,
  seoDescription: undefined,
  canonicalUrl: undefined,
  headings: headings,
  renderError: renderError,
};

// Auto-generate reading time if missing
if (!processedData.readTime || processedData.readTime === "Unknown") {
  const content = post.body || "";
  const wordCount = content.split(/\s+/).length;
  processedData.readTime = `${Math.ceil(wordCount / 200)} min read`;
}

// SEO data
processedData.seoTitle = post.data.seo?.title || processedData.title;
processedData.seoDescription =
  post.data.seo?.description || processedData.excerpt;
processedData.canonicalUrl = post.data.seo?.canonical;

// Navigation context
processedData.navigationContext = {
  currentIndex: postIndex,
  totalPosts: allPosts,
  isFirst: postIndex === 0,
  isLast: postIndex === allPosts - 1,
};

// Analytics data
processedData.analyticsData = {
  contentType: "blog-post",
  category: processedData.category || "uncategorized",
  author: processedData.authorInfo?.name || "Unknown",
  publishDate: processedData.date,
  wordCount: post.body?.split(/\s+/).length || 0,
  hasAudio: !!processedData.audioUrl,
  hasFeaturedImage: !!(
    processedData.heroImage?.externalUrl ||
    processedData.heroImage?.uploadedImage ||
    processedData.image
  ),
  tagCount: processedData.tags?.length || 0,
};
---

<BlogPost
  title={processedData.title}
  subtitle={processedData.subtitle}
  description={processedData.description}
  excerpt={processedData.excerpt}
  date={processedData.date}
  updatedDate={processedData.updatedDate}
  readTime={processedData.readTime}
  tags={processedData.tags}
  category={processedData.category}
  authorInfo={processedData.authorInfo}
  heroImage={processedData.heroImage}
  image={processedData.image}
  imageAlt={processedData.imageAlt}
  audioUrl={processedData.audioUrl}
  audioDuration={processedData.audioDuration}
  slug={processedData.slug}
  featured={processedData.featured}
  trending={processedData.trending}
  navigationContext={processedData.navigationContext}
  analyticsData={processedData.analyticsData}
  seoTitle={processedData.seoTitle}
  seoDescription={processedData.seoDescription}
  canonicalUrl={processedData.canonicalUrl}
  headings={processedData.headings}
  renderError={processedData.renderError}
>
  {
    renderError ? (
      <div class="content-error-boundary">
        <div class="max-w-4xl mx-auto px-4 py-12">
          <div class="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg p-6">
            <div class="flex items-start gap-3">
              <div class="flex-shrink-0">
                <svg
                  class="w-5 h-5 text-red-500"
                  fill="currentColor"
                  viewBox="0 0 20 20"
                >
                  <path
                    fill-rule="evenodd"
                    d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z"
                    clip-rule="evenodd"
                  />
                </svg>
              </div>
              <div>
                <h3 class="text-sm font-medium text-red-800 dark:text-red-200">
                  Content Rendering Error
                </h3>
                <p class="mt-1 text-sm text-red-700 dark:text-red-300">
                  There was an issue rendering this article. The content may
                  contain invalid MDX syntax or missing components.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
    ) : (
      <Content components={components} />
    )
  }
</BlogPost>

<script
  is:inline
  define:vars={{
    analyticsData: processedData.analyticsData,
    navigationContext: processedData.navigationContext,
  }}
>
  if (typeof window !== "undefined") {
    window.addEventListener("load", () => {
      const loadTime = performance.now();

      if (window.gtag) {
        window.gtag("event", "page_load_time", {
          value: Math.round(loadTime),
          content_type: analyticsData.contentType,
          content_category: analyticsData.category,
          has_audio: analyticsData.hasAudio,
          word_count: analyticsData.wordCount,
        });
      }
    });
  }
</script>

<style>
  .content-error-boundary {
    min-height: 50vh;
    display: flex;
    align-items: center;
  }
</style>
