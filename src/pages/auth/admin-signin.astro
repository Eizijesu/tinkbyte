---
// src/pages/auth/admin-signin.astro
import Layout from "../../layouts/Layout.astro";
---

<Layout title="Admin Sign In | TinkByte">
  <div class="admin-signin-container">
    <div class="admin-signin-form">
      <div class="admin-header">
        <h1>Admin Access</h1>
        <p>Sign in to access the admin panel</p>
      </div>

      <form id="admin-signin-form">
        <div class="form-group">
          <label for="email">Email Address</label>
          <input
            type="email"
            id="email"
            class="form-input"
            placeholder="Enter your admin email"
            required
          />
        </div>

        <div class="form-group">
          <label for="password">Password</label>
          <input
            type="password"
            id="password"
            class="form-input"
            placeholder="Enter your password"
            required
          />
        </div>

        <button type="submit" class="admin-btn" id="signin-btn">
          <span class="btn-content">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
            >
              <line x1="22" y1="2" x2="11" y2="13"></line>
              <polygon points="22,2 15,22 11,13 2,9 22,2"></polygon>
            </svg>
            <span class="btn-text">Sign In</span>
          </span>
        </button>
      </form>

      <div class="error-message" id="error-message" style="display: none;">
        <svg
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <circle cx="12" cy="12" r="10"></circle>
          <line x1="15" y1="9" x2="9" y2="15"></line>
          <line x1="9" y1="9" x2="15" y2="15"></line>
        </svg>
        <span id="error-text"></span>
      </div>

      <div class="success-message" id="success-message" style="display: none;">
        <svg
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <polyline points="20,6 9,17 4,12"></polyline>
        </svg>
        <span id="success-text"></span>
      </div>

      <div class="admin-options">
        <a href="/auth/forgot-password">Forgot Password?</a>
        <a href="/">← Back to Site</a>
      </div>
    </div>
  </div>
</Layout>

<style>
  .admin-signin-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #0f172a 0%, #1e293b 100%);
    padding: 2rem;
  }

  .admin-signin-form {
    background: #1e293b;
    border: 1px solid #334155;
    border-radius: 8px;
    padding: 2rem;
    max-width: 400px;
    width: 100%;
    box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
  }

  .admin-header {
    text-align: center;
    margin-bottom: 2rem;
  }

  .admin-header h1 {
    color: #f1f5f9;
    margin-bottom: 0.5rem;
    font-size: 1.5rem;
    font-weight: 700;
  }

  .admin-header p {
    color: #94a3b8;
    font-size: 0.875rem;
    margin: 0;
  }

  .form-group {
    margin-bottom: 1.5rem;
  }

  .form-group label {
    display: block;
    color: #f1f5f9;
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }

  .form-input {
    width: 100%;
    padding: 0.875rem;
    background: #0f172a;
    border: 1px solid #334155;
    border-radius: 4px;
    color: #f1f5f9;
    font-size: 0.875rem;
    box-sizing: border-box;
    transition: border-color 0.2s;
  }

  .form-input:focus {
    outline: none;
    border-color: #3b82f6;
    box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
  }

  .form-input::placeholder {
    color: #64748b;
  }

  .admin-btn {
    width: 100%;
    padding: 0.875rem;
    background: #3b82f6;
    color: white;
    border: none;
    border-radius: 4px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s;
    font-family: inherit;
  }

  .admin-btn:hover:not(:disabled) {
    background: #2563eb;
    transform: translateY(-1px);
  }

  .admin-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .btn-content {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .btn-content svg {
    transition: all 0.2s;
  }

  .admin-btn:disabled .btn-content svg {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .admin-options {
    text-align: center;
    margin-top: 1.5rem;
  }

  .admin-options a {
    color: #94a3b8;
    text-decoration: none;
    font-size: 0.875rem;
    display: block;
    margin-bottom: 0.5rem;
    transition: color 0.2s;
  }

  .admin-options a:hover {
    color: #f1f5f9;
  }

  .error-message,
  .success-message {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem;
    border-radius: 4px;
    font-size: 0.875rem;
    margin-top: 1rem;
  }

  .error-message {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid #ef4444;
    color: #ef4444;
  }

  .success-message {
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid #22c55e;
    color: #22c55e;
  }

  /* Mobile responsive */
  @media (max-width: 480px) {
    .admin-signin-container {
      padding: 1rem;
    }

    .admin-signin-form {
      padding: 1.5rem;
    }

    .admin-header h1 {
      font-size: 1.25rem;
    }

    .form-input,
    .admin-btn {
      padding: 0.75rem;
    }
  }
</style>

<script>
  import { adminAuthManager } from "../../lib/admin/auth.js";

  // Admin authentication system using singleton
  class AdminSignInManager {
    private initialized: boolean = false;
    private form: HTMLFormElement | null = null;
    private emailInput: HTMLInputElement | null = null;
    private passwordInput: HTMLInputElement | null = null;
    private submitBtn: HTMLButtonElement | null = null;
    private errorMessageEl: HTMLElement | null = null;
    private errorText: HTMLElement | null = null;
    private successMessage: HTMLElement | null = null;
    private successText: HTMLElement | null = null;

    constructor() {
      this.init();
    }

    async init() {
      if (this.initialized) return;

      try {
        

        // Initialize admin auth manager
        await adminAuthManager.initialize();

        this.setupDOM();
        this.handleURLParams();
        await this.checkExistingSession();
        this.setupEventListeners();

        this.initialized = true;
        
      } catch (error) {
        console.error("❌ Admin Sign In: Initialization failed:", error);
        this.showError("Failed to initialize sign in form");
      }
    }

    private setupDOM() {
      this.form = document.getElementById(
        "admin-signin-form"
      ) as HTMLFormElement;
      this.emailInput = document.getElementById("email") as HTMLInputElement;
      this.passwordInput = document.getElementById(
        "password"
      ) as HTMLInputElement;
      this.submitBtn = document.getElementById(
        "signin-btn"
      ) as HTMLButtonElement;
      this.errorMessageEl = document.getElementById(
        "error-message"
      ) as HTMLElement;
      this.errorText = document.getElementById("error-text") as HTMLElement;
      this.successMessage = document.getElementById(
        "success-message"
      ) as HTMLElement;
      this.successText = document.getElementById("success-text") as HTMLElement;

      // Focus on email input
      if (this.emailInput) {
        this.emailInput.focus();
      }
    }

    private handleURLParams() {
      const urlParams = new URLSearchParams(window.location.search);
      const error = urlParams.get("error");
      const message = urlParams.get("message");

      if (error) {
        const errorMessages: Record<string, string> = {
          access_denied: "Access denied. Admin privileges required.",
          session_expired: "Your session has expired. Please sign in again.",
          not_admin: "You don't have admin privileges.",
          invalid_session: "Invalid session data. Please sign in again.",
          no_session: "No admin session found. Please sign in.",
        };
        this.showError(
          errorMessages[error] || "An error occurred. Please try again."
        );
      }

      if (message === "signed_out") {
        this.showSuccess("You have been signed out successfully.");
      }
    }

    private async checkExistingSession() {
      try {
        const user = await adminAuthManager.getCurrentUser();
        if (user && !window.location.href.includes("redirecting")) {
          const redirect =
            new URLSearchParams(window.location.search).get("redirect") ||
            "/admin/dashboard";
          console.log(
            "✅ Admin Sign In: Existing session found, redirecting..."
          );
          window.location.href = redirect + "?from=signin";
        }
      } catch (error) {
        console.log(
          "ℹ️ Admin Sign In: No existing session, continuing with sign in flow"
        );
      }
    }

    private setupEventListeners() {
      if (!this.form) return;

      this.form.addEventListener("submit", async (e) => {
        e.preventDefault();
        await this.handleSignIn();
      });
    }

    private async handleSignIn() {
      if (!this.emailInput || !this.passwordInput || !this.submitBtn) return;

      this.hideMessages();

      const email = this.emailInput.value.trim();
      const password = this.passwordInput.value.trim();

      if (!email || !password) {
        this.showError("Please enter both email and password");
        return;
      }

      this.updateButtonState(true, "Signing in...");

      try {
        

        const result = await adminAuthManager.signIn(email, password);

        if (result.success) {
          
          this.showSuccess("Sign in successful! Redirecting...");

          const redirect =
            new URLSearchParams(window.location.search).get("redirect") ||
            "/admin/dashboard";

          setTimeout(() => {
            window.location.href = redirect;
          }, 1000);
        } else {
          console.error("❌ Admin Sign In: Sign in failed:", result.error);
          this.showError(result.error || "Sign in failed");
        }
      } catch (error: any) {
        console.error("❌ Admin Sign In: Sign in exception:", error);
        this.showError(error.message || "Sign in failed");
      } finally {
        this.updateButtonState(false);
      }
    }

    private showError(message: string) {
      if (this.errorText && this.errorMessageEl) {
        this.errorText.textContent = message;
        this.errorMessageEl.style.display = "flex";
        if (this.successMessage) this.successMessage.style.display = "none";
      }
    }

    private showSuccess(message: string) {
      if (this.successText && this.successMessage) {
        this.successText.textContent = message;
        this.successMessage.style.display = "flex";
        if (this.errorMessageEl) this.errorMessageEl.style.display = "none";
      }
    }

    private hideMessages() {
      if (this.errorMessageEl) this.errorMessageEl.style.display = "none";
      if (this.successMessage) this.successMessage.style.display = "none";
    }

    private updateButtonState(
      isLoading: boolean,
      loadingText: string = "Signing in...",
      defaultText: string = "Sign In"
    ) {
      if (!this.submitBtn) return;

      const btnContent = this.submitBtn.querySelector(".btn-content");

      if (btnContent) {
        btnContent.innerHTML = isLoading
          ? `${this.createSpinnerSVG(true)} <span class="btn-text">${loadingText}</span>`
          : `${this.createSpinnerSVG(false)} <span class="btn-text">${defaultText}</span>`;
      }

      this.submitBtn.disabled = isLoading;
    }

    private createSpinnerSVG(isLoading: boolean, size: number = 16) {
      return isLoading
        ? `<svg class="animate-spin" width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <line x1="12" y1="2" x2="12" y2="6"/>
            <line x1="12" y1="18" x2="12" y2="22"/>
            <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"/>
            <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"/>
            <line x1="2" y1="12" x2="6" y2="12"/>
            <line x1="18" y1="12" x2="22" y2="12"/>
            <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"/>
            <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"/>
          </svg>`
        : `<svg width="${size}" height="${size}" viewBox="0 0 24 24" fill="none" stroke="currentColor">
            <line x1="22" y1="2" x2="11" y2="13"/>
            <polygon points="22,2 15,22 11,13 2,9 22,2"/>
          </svg>`;
    }
  }

  // Initialize animations
  function initializeAnimations() {
    if (!document.getElementById("admin-signin-animations")) {
      const style = document.createElement("style");
      style.id = "admin-signin-animations";
      style.textContent = `
        @keyframes spin {
          from { transform: rotate(0deg); }
          to { transform: rotate(360deg); }
        }
        .animate-spin { animation: spin 1s linear infinite; }
      `;
      document.head.appendChild(style);
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    initializeAnimations();
    new AdminSignInManager();
  });
</script>
