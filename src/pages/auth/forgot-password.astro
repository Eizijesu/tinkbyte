---
// src/pages/auth/forgot-password.astro
import Layout from "../../layouts/Layout.astro";
import AuthLayout from "../../components/auth/AuthLayout.astro";
---

<Layout
  title="Reset Password | TinkByte - Recover Your Account"
  description="Reset your TinkByte account password to regain access to premium content and community features."
>
  <AuthLayout
    title="Reset Your Password"
    description="Enter your email to receive password reset instructions"
  >
    <form id="forgot-password-form" class="auth-form">
      <div class="form-group">
        <label for="email" class="form-label">Email Address</label>
        <input
          type="email"
          id="email"
          name="email"
          class="form-input"
          placeholder="Enter your email address"
          required
        />
        <div class="field-error" id="email-error"></div>
      </div>

      <button type="submit" class="auth-btn primary" id="reset-btn">
        <span class="btn-text">Send Reset Link</span>
        <div class="btn-spinner" style="display: none;">
          <div class="square-spinner-small"></div>
        </div>
      </button>

      <div class="auth-footer-links">
        <p>
          Remember your password? <a href="/auth/signin" class="auth-link"
            >Sign In</a
          >
        </p>
        <p>
          Don't have an account? <a href="/auth/signup" class="auth-link"
            >Sign Up</a
          >
        </p>
      </div>
    </form>

    <!-- Toast Message -->
    <div class="toast-message" id="toast-message" style="display: none;">
      <div class="toast-content">
        <div class="toast-icon" id="toast-icon"></div>
        <span id="toast-text"></span>
      </div>
    </div>
  </AuthLayout>
</Layout>

<style>
  .auth-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-weight: 600;
    color: rgb(15, 23, 42);
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  :global(.dark) .form-label {
    color: rgb(248, 250, 252);
  }

  .form-input {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 0; /* Square design - no radius */
    font-size: 14px;
    background: white;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    font-family: inherit;
    font-weight: 500;
    box-sizing: border-box;
  }

  .form-input:focus {
    outline: none;
    border-color: #243788;
    box-shadow: 0 0 0 3px rgba(36, 55, 136, 0.1);
  }

  .form-input::placeholder {
    color: #64748b;
  }

  :global(.dark) .form-input {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .form-input:focus {
    border-color: #b4bce1;
    box-shadow: 0 0 0 3px rgba(180, 188, 225, 0.1);
  }

  :global(.dark) .form-input::placeholder {
    color: rgb(148, 163, 184);
  }

  .field-error {
    color: #dc2626;
    font-size: 12px;
    font-weight: 600;
    display: none;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .field-error.show {
    display: block;
  }

  .auth-btn {
    width: 100%;
    padding: 12px 20px;
    font-weight: 600;
    cursor: pointer;
    border: 2px solid transparent;
    border-radius: 0; /* Square design - no radius */
    font-size: 14px;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-family: inherit;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .auth-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .auth-btn.primary {
    background: linear-gradient(135deg, #243788, #1e2d6b);
    color: white;
    border-color: #243788;
  }

  .auth-btn.primary:hover:not(:disabled) {
    background: linear-gradient(135deg, #1e2d6b, #19254f);
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(36, 55, 136, 0.3);
  }

  .btn-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .square-spinner-small {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid white;
    border-radius: 0; /* Square spinner */
    background: transparent;
    animation: square-spin 1s linear infinite;
  }

  @keyframes square-spin {
    0% {
      transform: rotate(0deg);
    }
    25% {
      transform: rotate(90deg);
    }
    50% {
      transform: rotate(180deg);
    }
    75% {
      transform: rotate(270deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .auth-footer-links {
    text-align: center;
    margin-top: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .auth-footer-links p {
    color: #64748b;
    font-size: 14px;
    margin: 0;
    font-weight: 500;
  }

  :global(.dark) .auth-footer-links p {
    color: rgb(148, 163, 184);
  }

  .auth-link {
    color: #243788;
    text-decoration: none;
    font-weight: 600;
  }

  .auth-link:hover {
    text-decoration: underline;
  }

  :global(.dark) .auth-link {
    color: #b4bce1;
  }

  /* Toast Message Styles - Square Design */
  .toast-message {
    position: fixed;
    top: 2rem;
    left: 50%;
    transform: translateX(-50%) translateY(-20px);
    z-index: 9999;
    opacity: 0;
    transition: all 0.3s ease;
    max-width: 400px;
    width: 90%;
  }

  .toast-content {
    backdrop-filter: blur(16px);
    background: rgba(34, 197, 94, 0.1);
    border: 2px solid rgba(34, 197, 94, 0.3);
    border-radius: 0; /* Square design */
    padding: 1rem;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    color: #16a34a;
    font-size: 0.875rem;
    font-weight: 500;
  }

  .toast-content.error {
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
    color: #dc2626;
  }

  .toast-icon {
    width: 20px;
    height: 20px;
    flex-shrink: 0;
  }
</style>

<script>
  import { authManager } from "../../lib/auth.js";

  class ForgotPasswordManager {
    private initialized: boolean = false;
    private form: HTMLFormElement | null = null;
    private submitBtn: HTMLButtonElement | null = null;
    private btnText: HTMLElement | null = null;
    private btnSpinner: HTMLElement | null = null;
    private toastMessage: HTMLElement | null = null;
    private toastText: HTMLElement | null = null;
    private toastIcon: HTMLElement | null = null;

    constructor() {
      this.init();
    }

    async init() {
      if (this.initialized) return;

      try {
        console.log("üîÑ ForgotPassword: Initializing...");
        await authManager.initialize();
        this.setupDOM();
        this.setupEventListeners();
        this.initialized = true;
        console.log("‚úÖ ForgotPassword: Initialized successfully");
      } catch (error) {
        console.error("‚ùå ForgotPassword: Initialization failed:", error);
        this.showToast("Failed to initialize password reset form", "error");
      }
    }

    private setupDOM() {
      this.form = document.getElementById(
        "forgot-password-form"
      ) as HTMLFormElement;
      this.submitBtn = document.getElementById(
        "reset-btn"
      ) as HTMLButtonElement;
      this.btnText = this.submitBtn?.querySelector(".btn-text") as HTMLElement;
      this.btnSpinner = this.submitBtn?.querySelector(
        ".btn-spinner"
      ) as HTMLElement;
      this.toastMessage = document.getElementById(
        "toast-message"
      ) as HTMLElement;
      this.toastText = document.getElementById("toast-text") as HTMLElement;
      this.toastIcon = document.getElementById("toast-icon") as HTMLElement;
    }

    private setupEventListeners() {
      this.form?.addEventListener("submit", async (e) => {
        e.preventDefault();
        await this.handlePasswordReset();
      });
    }

    private async handlePasswordReset() {
      if (!this.form || !this.submitBtn || !this.btnText || !this.btnSpinner)
        return;

      // Clear previous errors
      document.querySelectorAll(".field-error").forEach((el) => {
        el.classList.remove("show");
      });

      const formData = new FormData(this.form);
      const email = formData.get("email") as string;

      if (!email) {
        this.showToast("Please enter your email address", "error");
        return;
      }

      // Show loading state
      this.submitBtn.disabled = true;
      this.btnText.style.display = "none";
      this.btnSpinner.style.display = "flex";

      try {
        console.log("üîÑ ForgotPassword: Attempting password reset for:", email);

        // Use Supabase's built-in password reset
        const { error } = await authManager.supabase.auth.resetPasswordForEmail(
          email,
          {
            redirectTo: `${window.location.origin}/auth/reset-password`,
          }
        );

        if (error) {
          throw error;
        }

        console.log(
          "‚úÖ ForgotPassword: Password reset email sent successfully"
        );
        this.showToast("Password reset email sent! Check your inbox.");

        setTimeout(() => {
          window.location.href = "/auth/signin?message=reset-sent";
        }, 2000);
      } catch (error: any) {
        
        console.error("‚ùå ForgotPassword: Password reset error:", error);

        let errorMessage = "Failed to send reset email. Please try again.";

        // Handle specific error types
        if (
          error.message?.includes("not found") ||
          error.message?.includes("User not found")
        ) {
          errorMessage = "No account found with this email address.";
        } else if (
          error.message?.includes("too many") ||
          error.message?.includes("rate limit")
        ) {
          errorMessage =
            "Too many reset requests. Please wait before trying again.";
        } else if (error.message?.includes("Invalid email")) {
          errorMessage = "Please enter a valid email address.";
        } else if (
          error.message?.includes("network") ||
          error.message?.includes("fetch")
        ) {
          errorMessage =
            "Network error. Please check your connection and try again.";
        } else if (error.message) {
          errorMessage = error.message;
        }

        this.showToast(errorMessage, "error");

        const emailError = document.getElementById("email-error");
        if (emailError) {
          emailError.textContent = errorMessage;
          emailError.classList.add("show");
        }
      } finally {
        // Reset loading state
        this.submitBtn.disabled = false;
        this.btnText.style.display = "block";
        this.btnSpinner.style.display = "none";
      }
    }

    private showToast(message: string, type: "success" | "error" = "success") {
      if (this.toastText && this.toastMessage && this.toastIcon) {
        this.toastText.textContent = message;
        this.toastIcon.innerHTML =
          type === "success"
            ? '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/><polyline points="22,4 12,14.01 9,11.01"/></svg>'
            : '<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><circle cx="12" cy="12" r="10"/><line x1="15" y1="9" x2="9" y2="15"/><line x1="9" y1="9" x2="15" y2="15"/></svg>';

        const toastContent = this.toastMessage.querySelector(
          ".toast-content"
        ) as HTMLElement;
        if (toastContent) {
          toastContent.className = `toast-content ${type === "error" ? "error" : ""}`;
        }

        this.toastMessage.style.display = "block";
        setTimeout(() => {
          if (this.toastMessage) {
            this.toastMessage.style.transform =
              "translateX(-50%) translateY(0)";
            this.toastMessage.style.opacity = "1";
          }
        }, 10);

        setTimeout(
          () => {
            if (this.toastMessage) {
              this.toastMessage.style.transform =
                "translateX(-50%) translateY(-20px)";
              this.toastMessage.style.opacity = "0";
              setTimeout(() => {
                if (this.toastMessage) this.toastMessage.style.display = "none";
              }, 300);
            }
          },
          type === "error" ? 5000 : 3000
        );
      }
    }
  }

  // Initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", () => {
    new ForgotPasswordManager();
  });
</script>
