---
// src/pages/auth/forgot-password.astro
import Layout from "../../layouts/Layout.astro";
import AuthLayout from "../../components/auth/AuthLayout.astro";
---

<Layout
  title="Reset Password | TinkByte - Recover Your Account"
  description="Reset your TinkByte account password to regain access to premium content and community features."
>
  <AuthLayout
    title="Reset Your Password"
    description="Enter your email to receive password reset instructions"
  >
    <form id="forgot-password-form" class="auth-form">
      <div class="form-group">
        <label for="email" class="form-label">Email Address</label>
        <input
          type="email"
          id="email"
          name="email"
          class="form-input"
          placeholder="Enter your email address"
          required
        />
        <div class="field-error" id="email-error"></div>
      </div>

      <button type="submit" class="auth-btn primary" id="reset-btn">
        <span class="btn-text">Send Reset Link</span>
        <div class="btn-spinner" style="display: none;">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <line x1="12" y1="2" x2="12" y2="6"></line>
            <line x1="12" y1="18" x2="12" y2="22"></line>
            <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line>
            <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line>
            <line x1="2" y1="12" x2="6" y2="12"></line>
            <line x1="18" y1="12" x2="22" y2="12"></line>
            <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line>
            <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>
          </svg>
        </div>
      </button>

      <div class="auth-footer-links">
        <p>
          Remember your password? <a href="/auth/signin" class="auth-link"
            >Sign In</a
          >
        </p>
        <p>
          Don't have an account? <a href="/auth/signup" class="auth-link"
            >Sign Up</a
          >
        </p>
      </div>
    </form>
  </AuthLayout>
</Layout>

<style>
  .auth-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-weight: 600;
    color: rgb(15, 23, 42);
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  :global(.dark) .form-label {
    color: rgb(248, 250, 252);
  }

  .form-input {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 0;
    font-size: 14px;
    background: white;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    font-family: inherit;
    font-weight: 500;
  }

  .form-input:focus {
    outline: none;
    border-color: #243788;
    box-shadow: 0 0 0 3px rgba(36, 55, 136, 0.1);
  }

  .form-input::placeholder {
    color: #64748b;
  }

  :global(.dark) .form-input {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .form-input:focus {
    border-color: #b4bce1;
    box-shadow: 0 0 0 3px rgba(180, 188, 225, 0.1);
  }

  :global(.dark) .form-input::placeholder {
    color: rgb(148, 163, 184);
  }

  .field-error {
    color: #dc2626;
    font-size: 12px;
    font-weight: 600;
    display: none;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .field-error.show {
    display: block;
  }

  .auth-btn {
    width: 100%;
    padding: 12px 20px;
    font-weight: 600;
    cursor: pointer;
    border: none;
    border-radius: 0;
    font-size: 14px;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-family: inherit;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .auth-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .auth-btn.primary {
    background: linear-gradient(135deg, #243788, #1e2d6b);
    color: white;
  }

  .auth-btn.primary:hover:not(:disabled) {
    background: linear-gradient(135deg, #1e2d6b, #19254f);
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(36, 55, 136, 0.3);
  }

  .btn-spinner {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .auth-footer-links {
    text-align: center;
    margin-top: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .auth-footer-links p {
    color: #64748b;
    font-size: 14px;
    margin: 0;
    font-weight: 500;
  }

  :global(.dark) .auth-footer-links p {
    color: rgb(148, 163, 184);
  }

  .auth-link {
    color: #243788;
    text-decoration: none;
    font-weight: 600;
  }

  .auth-link:hover {
    text-decoration: underline;
  }

  :global(.dark) .auth-link {
    color: #b4bce1;
  }
</style>

<script>
  import { supabase } from "../../lib/supabase.js";

  document.addEventListener("DOMContentLoaded", () => {
    const form = document.getElementById(
      "forgot-password-form"
    ) as HTMLFormElement | null;
    const submitBtn = document.getElementById(
      "reset-btn"
    ) as HTMLButtonElement | null;
    const btnText = submitBtn?.querySelector(".btn-text") as HTMLElement | null;
    const btnSpinner = submitBtn?.querySelector(
      ".btn-spinner"
    ) as HTMLElement | null;

    form?.addEventListener("submit", async (e) => {
      e.preventDefault();

      if (!form || !submitBtn || !btnText || !btnSpinner) return;

      // Clear previous errors
      document.querySelectorAll(".field-error").forEach((el) => {
        el.classList.remove("show");
      });

      const formData = new FormData(form);
      const email = formData.get("email") as string;

      if (!email) {
        alert("Please enter your email address");
        return;
      }

      // Show loading state
      submitBtn.disabled = true;
      btnText.style.display = "none";
      btnSpinner.style.display = "block";

      try {
        // FIX THIS LINE - Use the correct method name
        const { error } = await supabase.auth.resetPasswordForEmail(email, {
          redirectTo: `${window.location.origin}/auth/reset-password`,
        });

        if (error) throw error;

        // Success message
        alert(
          "Password reset email sent! Please check your inbox for the reset link."
        );

        // Redirect back to signin with success message
        window.location.href =
          "/auth/signin?message=Password reset email sent. Check your inbox.";
      } catch (error: any) {
        console.error("Password reset error:", error);

        let errorMessage = "Failed to send reset email. Please try again.";

        if (error.message?.includes("not found")) {
          errorMessage = "No account found with this email address.";
        } else if (error.message?.includes("too many")) {
          errorMessage =
            "Too many reset requests. Please wait before trying again.";
        } else if (error.message) {
          errorMessage = error.message;
        }

        const emailError = document.getElementById("email-error");
        if (emailError) {
          emailError.textContent = errorMessage;
          emailError.classList.add("show");
        }
      } finally {
        // Reset loading state
        submitBtn.disabled = false;
        btnText.style.display = "block";
        btnSpinner.style.display = "none";
      }
    });
  });
</script>
