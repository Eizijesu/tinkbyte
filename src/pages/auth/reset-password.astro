---
// src/pages/auth/reset-password.astro
import Layout from "../../layouts/Layout.astro";
import AuthLayout from "../../components/auth/AuthLayout.astro";
---

<Layout
  title="Reset Password | TinkByte"
  description="Create a new password for your TinkByte account"
>
  <AuthLayout
    title="Reset Password"
    description="Enter your new password below"
  >
    <!-- Loading state for checking session -->
    <div id="loading-state" class="loading-container">
      <div class="loading-spinner">
        <div class="square-spinner"></div>
      </div>
      <p>Verifying reset link...</p>
    </div>

    <!-- Reset form (hidden initially) -->
    <form id="reset-password-form" class="auth-form" style="display: none;">
      <div class="form-group">
        <label for="new-password" class="form-label">New Password</label>
        <div class="password-input">
          <input
            type="password"
            id="new-password"
            name="new-password"
            class="form-input"
            placeholder="Enter new password"
            required
            minlength="8"
          />
          <button type="button" class="password-toggle" id="password-toggle">
            <svg
              width="16"
              height="16"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
              <circle cx="12" cy="12" r="3"></circle>
            </svg>
          </button>
        </div>
      </div>

      <div class="form-group">
        <label for="confirm-password" class="form-label">Confirm Password</label
        >
        <input
          type="password"
          id="confirm-password"
          name="confirm-password"
          class="form-input"
          placeholder="Confirm new password"
          required
          minlength="8"
        />
      </div>

      <button type="submit" class="auth-btn primary" id="reset-btn">
        <span class="btn-text">Update Password</span>
        <div class="btn-spinner" style="display: none;">
          <div class="square-spinner-small"></div>
        </div>
      </button>
    </form>

    <!-- Error Display -->
    <div class="error-message" id="error-message" style="display: none;">
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <path
          d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"
        ></path>
        <line x1="12" y1="9" x2="12" y2="13"></line>
        <line x1="12" y1="17" x2="12.01" y2="17"></line>
      </svg>
      <span id="error-text"></span>
    </div>

    <!-- Success Display -->
    <div class="success-message" id="success-message" style="display: none;">
      <svg
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
        <polyline points="22,4 12,14.01 9,11.01"></polyline>
      </svg>
      <span id="success-text"></span>
    </div>

    <!-- Redirect message for invalid access -->
    <div class="redirect-message" id="redirect-message" style="display: none;">
      <div class="redirect-content">
        <svg
          width="24"
          height="24"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path
            d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"
          ></path>
          <line x1="12" y1="9" x2="12" y2="13"></line>
          <line x1="12" y1="17" x2="12.01" y2="17"></line>
        </svg>
        <h3>Invalid Reset Link</h3>
        <p>
          This password reset link is invalid or has expired. Redirecting you to
          request a new one...
        </p>
      </div>
    </div>
  </AuthLayout>
</Layout>

<style>
  .loading-container {
    text-align: center;
    padding: 2rem;
  }

  .loading-spinner {
    margin: 0 auto 1rem;
    color: #243788;
    display: flex;
    justify-content: center;
  }

  .square-spinner {
    width: 32px;
    height: 32px;
    border: 3px solid rgba(36, 55, 136, 0.3);
    border-top: 3px solid #243788;
    border-radius: 0; /* Square spinner */
    animation: square-spin 1s linear infinite;
  }

  .square-spinner-small {
    width: 16px;
    height: 16px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-top: 2px solid white;
    border-radius: 0; /* Square spinner */
    animation: square-spin 1s linear infinite;
  }

  @keyframes square-spin {
    0% {
      transform: rotate(0deg);
    }
    25% {
      transform: rotate(90deg);
    }
    50% {
      transform: rotate(180deg);
    }
    75% {
      transform: rotate(270deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  .loading-container p {
    color: #6b7280;
    margin: 0;
    font-weight: 500;
  }

  .auth-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-weight: 600;
    color: #243788;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  :global(.dark) .form-label {
    color: rgb(248, 250, 252);
  }

  .form-input {
    width: 100%;
    padding: 12px 16px;
    border: 2px solid #e2e8f0;
    border-radius: 0; /* Square design */
    background: white;
    color: #374151;
    font-size: 14px;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    font-family: inherit;
    font-weight: 500;
    box-sizing: border-box;
  }

  .form-input:focus {
    outline: none;
    border-color: #243788;
    box-shadow: 0 0 0 3px rgba(36, 55, 136, 0.1);
  }

  .form-input::placeholder {
    color: #9ca3af;
  }
  .redirect-message {
    text-align: center;
    padding: 2rem;
    color: #dc2626;
  }

  .redirect-content {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .redirect-content h3 {
    margin: 0;
    font-size: 1.25rem;
    font-weight: 600;
  }

  .redirect-content p {
    margin: 0;
    color: #6b7280;
  }

  :global(.dark) .form-input {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .form-input:focus {
    border-color: #b4bce1;
    box-shadow: 0 0 0 3px rgba(180, 188, 225, 0.1);
  }

  .password-input {
    position: relative;
  }

  .password-toggle {
    position: absolute;
    right: 12px;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #9ca3af;
    cursor: pointer;
    padding: 4px;
    border-radius: 0; /* Square design */
  }

  .password-toggle:hover {
    color: #243788;
  }

  :global(.dark) .password-toggle:hover {
    color: #b4bce1;
  }

  .auth-btn {
    width: 100%;
    padding: 12px 20px;
    border: 2px solid transparent;
    border-radius: 0; /* Square design */
    background: white;
    color: #374151;
    font-size: 14px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 8px;
    font-family: inherit;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .auth-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .auth-btn.primary {
    background: linear-gradient(135deg, #243788, #1e2d6b);
    color: white;
    border-color: #243788;
  }

  .auth-btn.primary:hover:not(:disabled) {
    background: linear-gradient(135deg, #1e2d6b, #19254f);
    transform: translateY(-2px);
    box-shadow: 0 10px 25px rgba(36, 55, 136, 0.3);
  }

  :global(.dark) .auth-btn.primary {
    background: #b4bce1;
    color: rgb(15, 23, 42);
    border-color: #b4bce1;
  }

  .btn-spinner {
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .error-message,
  .success-message {
    padding: 12px 16px;
    font-size: 14px;
    display: flex;
    align-items: center;
    gap: 8px;
    margin-top: 1rem;
    border-radius: 0; /* Square design */
    font-weight: 500;
  }

  .error-message {
    background: rgba(239, 68, 68, 0.1);
    border: 2px solid #ef4444;
    color: #dc2626;
  }

  .success-message {
    background: rgba(34, 197, 94, 0.1);
    border: 2px solid #22c55e;
    color: #16a34a;
  }
</style>

<script>
  import { authManager } from "../../lib/auth.js";

  class ResetPasswordManager {
    private initialized: boolean = false;
    private form: HTMLFormElement | null = null;
    private loadingState: HTMLElement | null = null;
    private redirectMessage: HTMLElement | null = null;
    private newPasswordInput: HTMLInputElement | null = null;
    private confirmPasswordInput: HTMLInputElement | null = null;
    private passwordToggle: HTMLButtonElement | null = null;
    private submitBtn: HTMLButtonElement | null = null;
    private btnText: HTMLElement | null = null;
    private btnSpinner: HTMLElement | null = null;
    private errorMessage: HTMLElement | null = null;
    private errorText: HTMLElement | null = null;
    private successMessage: HTMLElement | null = null;
    private successText: HTMLElement | null = null;
    private isPasswordResetSession: boolean = false;

    constructor() {
      this.init();
    }

    async init() {
      if (this.initialized) return;

      try {
        
        await authManager.initialize();
        this.setupDOM();
        await this.checkResetSession();
        this.setupEventListeners();
        this.initialized = true;
        
      } catch (error) {
        console.error("‚ùå ResetPassword: Initialization failed:", error);
        this.showError("Failed to initialize password reset form");
      }
    }

    private setupDOM() {
      this.form = document.getElementById(
        "reset-password-form"
      ) as HTMLFormElement;
      this.loadingState = document.getElementById(
        "loading-state"
      ) as HTMLElement;
      this.redirectMessage = document.getElementById(
        "redirect-message"
      ) as HTMLElement;
      this.newPasswordInput = document.getElementById(
        "new-password"
      ) as HTMLInputElement;
      this.confirmPasswordInput = document.getElementById(
        "confirm-password"
      ) as HTMLInputElement;
      this.passwordToggle = document.getElementById(
        "password-toggle"
      ) as HTMLButtonElement;
      this.submitBtn = document.getElementById(
        "reset-btn"
      ) as HTMLButtonElement;
      this.btnText = this.submitBtn?.querySelector(".btn-text") as HTMLElement;
      this.btnSpinner = this.submitBtn?.querySelector(
        ".btn-spinner"
      ) as HTMLElement;
      this.errorMessage = document.getElementById(
        "error-message"
      ) as HTMLElement;
      this.errorText = document.getElementById("error-text") as HTMLElement;
      this.successMessage = document.getElementById(
        "success-message"
      ) as HTMLElement;
      this.successText = document.getElementById("success-text") as HTMLElement;
    }

    private async checkResetSession() {
      try {
        
        
        

        // Check for recovery token in hash
        const hashParams = new URLSearchParams(
          window.location.hash.substring(1)
        );
        const accessToken = hashParams.get("access_token");
        const refreshToken = hashParams.get("refresh_token");
        const type = hashParams.get("type");

        console.log("üîÑ Hash params:", {
          accessToken: !!accessToken,
          refreshToken: !!refreshToken,
          type,
        });

        if (type === "recovery" && accessToken) {
          
          this.isPasswordResetSession = true;

          // Sign out any existing session first
          await authManager.signOut();

          // Set the recovery session
          const { data, error } = await authManager.supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken || "",
          });

          if (error) {
            console.error(
              "‚ùå ResetPassword: Error setting recovery session:",
              error
            );
            this.showRedirectMessage();
            return;
          }

          

          // Hide loading and show form
          if (this.loadingState) this.loadingState.style.display = "none";
          if (this.form) this.form.style.display = "flex";

          // Clean up URL
          window.history.replaceState(
            {},
            document.title,
            window.location.pathname
          );
        } else {
          
          console.log(
            "‚ùå Available hash params:",
            Object.fromEntries(hashParams.entries())
          );
          this.showRedirectMessage();
        }
      } catch (error) {
        console.error("‚ùå ResetPassword: Error checking session:", error);
        this.showRedirectMessage();
      }
    }

    private showRedirectMessage() {
      if (this.loadingState) this.loadingState.style.display = "none";
      if (this.redirectMessage) this.redirectMessage.style.display = "block";

      // Redirect after 3 seconds
      setTimeout(() => {
        window.location.href =
          "/auth/forgot-password?message=Please request a password reset link";
      }, 3000);
    }

    private setupEventListeners() {
      this.passwordToggle?.addEventListener("click", () => {
        if (!this.newPasswordInput || !this.passwordToggle) return;

        const type =
          this.newPasswordInput.type === "password" ? "text" : "password";
        this.newPasswordInput.type = type;

        this.passwordToggle.innerHTML =
          type === "text"
            ? `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/><line x1="1" y1="1" x2="23" y2="23"/></svg>`
            : `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/><circle cx="12" cy="12" r="3"/></svg>`;
      });

      this.form?.addEventListener("submit", async (e) => {
        e.preventDefault();
        await this.handlePasswordReset();
      });
    }

    private async handlePasswordReset() {
      if (!this.newPasswordInput || !this.confirmPasswordInput) return;

      this.hideMessages();

      if (!this.isPasswordResetSession) {
        this.showError(
          "Invalid reset session. Please request a new password reset link."
        );
        return;
      }

      const newPassword = this.newPasswordInput.value;
      const confirmPassword = this.confirmPasswordInput.value;

      if (newPassword.length < 8) {
        this.showError("Password must be at least 8 characters long");
        return;
      }

      if (newPassword !== confirmPassword) {
        this.showError("Passwords do not match");
        return;
      }

      this.setLoadingState(true);

      try {
        

        const result = await authManager.updatePassword(newPassword);

        if (!result.success) {
          if (result.error?.includes("New password should be different")) {
            throw new Error(
              "Please choose a different password than your current one."
            );
          }
          throw new Error(result.error);
        }

        

        this.showSuccess(
          "Password updated successfully! Redirecting to sign in..."
        );

        await authManager.signOut();

        setTimeout(() => {
          window.location.href =
            "/auth/signin?message=Password updated successfully. Please sign in with your new password.";
        }, 2000);
      } catch (error: any) {
        console.error("‚ùå ResetPassword: Password reset error:", error);
        this.showError(
          error.message || "Failed to update password. Please try again."
        );
      } finally {
        this.setLoadingState(false);
      }
    }

    private setLoadingState(isLoading: boolean) {
      if (!this.submitBtn || !this.btnText || !this.btnSpinner) return;

      this.submitBtn.disabled = isLoading;
      this.btnText.style.display = isLoading ? "none" : "block";
      this.btnSpinner.style.display = isLoading ? "flex" : "none";
    }

    private showError(message: string) {
      if (this.errorText && this.errorMessage) {
        this.errorText.textContent = message;
        this.errorMessage.style.display = "flex";
        if (this.successMessage) this.successMessage.style.display = "none";
      }
    }

    private showSuccess(message: string) {
      if (this.successText && this.successMessage) {
        this.successText.textContent = message;
        this.successMessage.style.display = "flex";
        if (this.errorMessage) this.errorMessage.style.display = "none";
      }
    }

    private hideMessages() {
      if (this.errorMessage) this.errorMessage.style.display = "none";
      if (this.successMessage) this.successMessage.style.display = "none";
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new ResetPasswordManager();
  });
</script>
