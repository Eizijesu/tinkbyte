---
import Layout from "../../layouts/Layout.astro";
import AuthLayout from "../../components/auth/AuthLayout.astro";
---

<Layout
  title="Reset Password | TinkByte"
  description="Create a new password for your TinkByte account"
>
  <AuthLayout
    title="Reset Password"
    description="Enter your new password below"
  >
    <!-- Loading state for checking session -->
    <div id="loading-state" class="loading-container">
      <div class="loading-spinner">
        <svg width="32" height="32" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <line x1="12" y1="2" x2="12" y2="6"/>
          <line x1="12" y1="18" x2="12" y2="22"/>
          <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"/>
          <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"/>
          <line x1="2" y1="12" x2="6" y2="12"/>
          <line x1="18" y1="12" x2="22" y2="12"/>
          <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"/>
          <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"/>
        </svg>
      </div>
      <p>Verifying reset link...</p>
    </div>

    <!-- Reset form (hidden initially) -->
    <form id="reset-password-form" class="auth-form" style="display: none;">
      <div class="form-group">
        <label for="new-password" class="form-label">New Password</label>
        <div class="password-input">
          <input
            type="password"
            id="new-password"
            name="new-password"
            class="form-input"
            placeholder="Enter new password"
            required
            minlength="8"
          />
          <button type="button" class="password-toggle" id="password-toggle">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
              <circle cx="12" cy="12" r="3"></circle>
            </svg>
          </button>
        </div>
      </div>

      <div class="form-group">
        <label for="confirm-password" class="form-label">Confirm Password</label>
        <input
          type="password"
          id="confirm-password"
          name="confirm-password"
          class="form-input"
          placeholder="Confirm new password"
          required
          minlength="8"
        />
      </div>

      <button type="submit" class="auth-btn primary" id="reset-btn">
        <span class="btn-text">Update Password</span>
        <div class="btn-spinner" style="display: none;">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="12" y1="2" x2="12" y2="6"/>
            <line x1="12" y1="18" x2="12" y2="22"/>
            <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"/>
            <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"/>
            <line x1="2" y1="12" x2="6" y2="12"/>
            <line x1="18" y1="12" x2="22" y2="12"/>
            <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"/>
            <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"/>
          </svg>
        </div>
      </button>
    </form>

    <!-- Error Display -->
    <div class="error-message" id="error-message" style="display: none;">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"/>
        <line x1="12" y1="9" x2="12" y2="13"/>
        <line x1="12" y1="17" x2="12.01" y2="17"/>
      </svg>
      <span id="error-text"></span>
    </div>

    <!-- Success Display -->
    <div class="success-message" id="success-message" style="display: none;">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>
        <polyline points="22,4 12,14.01 9,11.01"/>
      </svg>
      <span id="success-text"></span>
    </div>
  </AuthLayout>
</Layout>

<style>
  .loading-container {
    text-align: center;
    padding: 2rem;
  }

  .loading-spinner {
    margin: 0 auto 1rem;
    animation: spin 1s linear infinite;
    color: #243788;
  }

  .loading-container p {
    color: #6b7280;
    margin: 0;
  }

  /* Your existing styles... */
  .auth-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-weight: 600;
    color: #243788;
    font-size: 0.875rem;
  }

  :global(.dark) .form-label {
    color: rgb(248, 250, 252);
  }

  .form-input {
    width: 100%;
    padding: 0.875rem;
    border: 1px solid #e2e8f0;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    transition: border-color 0.2s ease;
    font-family: inherit;
    box-sizing: border-box;
  }

  .form-input:focus {
    outline: none;
    border-color: #243788;
  }

  .form-input::placeholder {
    color: #9ca3af;
  }

  :global(.dark) .form-input {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .form-input:focus {
    border-color: #b4bce1;
  }

  .password-input {
    position: relative;
  }

  .password-toggle {
    position: absolute;
    right: 0.875rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #9ca3af;
    cursor: pointer;
    padding: 0.25rem;
  }

  .password-toggle:hover {
    color: #243788;
  }

  :global(.dark) .password-toggle:hover {
    color: #b4bce1;
  }

  .auth-btn {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 1px solid #e2e8f0;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    font-weight: 500;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-family: inherit;
  }

  .auth-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .auth-btn.primary {
    background: #243788;
    color: white;
    border-color: #243788;
  }

  .auth-btn.primary:hover:not(:disabled) {
    background: #1e2d6b;
    border-color: #1e2d6b;
  }

  :global(.dark) .auth-btn.primary {
    background: #b4bce1;
    color: rgb(15, 23, 42);
    border-color: #b4bce1;
  }

  .btn-spinner {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  .error-message, .success-message {
    padding: 0.75rem;
    font-size: 0.875rem;
    display: flex;
    align-items: center;
    gap: 0.5rem;
    margin-top: 1rem;
  }

  .error-message {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid #ef4444;
    color: #dc2626;
  }

  .success-message {
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid #22c55e;
    color: #16a34a;
  }
</style>

<script>
  import { supabase } from "../../lib/supabase.js";

  document.addEventListener("DOMContentLoaded", async () => {
    const form = document.getElementById("reset-password-form") as HTMLFormElement;
    const loadingState = document.getElementById("loading-state") as HTMLElement;
    const newPasswordInput = document.getElementById("new-password") as HTMLInputElement;
    const confirmPasswordInput = document.getElementById("confirm-password") as HTMLInputElement;
    const passwordToggle = document.getElementById("password-toggle") as HTMLButtonElement;
    const submitBtn = document.getElementById("reset-btn") as HTMLButtonElement;
    const btnText = submitBtn?.querySelector(".btn-text") as HTMLElement;
    const btnSpinner = submitBtn?.querySelector(".btn-spinner") as HTMLElement;
    const errorMessage = document.getElementById("error-message") as HTMLElement;
    const errorText = document.getElementById("error-text") as HTMLElement;
    const successMessage = document.getElementById("success-message") as HTMLElement;
    const successText = document.getElementById("success-text") as HTMLElement;

    let isPasswordResetSession = false;

    // Check if this is a password reset session
    try {
      console.log('üîÑ Checking for password reset session...');
      
      // Handle URL fragments for password reset
      const hashParams = new URLSearchParams(window.location.hash.substring(1));
      const accessToken = hashParams.get('access_token');
      const refreshToken = hashParams.get('refresh_token');
      const type = hashParams.get('type');

      if (type === 'recovery' && accessToken) {
        console.log('‚úÖ Password reset session detected');
        isPasswordResetSession = true;
        
        // First sign out any existing session
        await supabase.auth.signOut();
        
        // Set the recovery session with the tokens from URL
        const { data, error } = await supabase.auth.setSession({
          access_token: accessToken,
          refresh_token: refreshToken || ''
        });

        if (error) {
          console.error('‚ùå Error setting recovery session:', error);
          showError('Invalid or expired reset link. Please request a new one.');
          setTimeout(() => {
            window.location.href = '/auth/forgot-password';
          }, 3000);
          return;
        }

        console.log('‚úÖ Recovery session established');
        
        // Hide loading, show form
        loadingState.style.display = 'none';
        form.style.display = 'flex';
        
        // Clear the URL hash for security
        window.history.replaceState({}, document.title, window.location.pathname);
        
      } else {
        // No recovery session - redirect to forgot password
        console.log('‚ùå No recovery session found, redirecting to forgot password');
        window.location.href = '/auth/forgot-password?message=Please request a password reset link';
        return;
      }
    } catch (error) {
      console.error('‚ùå Error checking session:', error);
      showError('An error occurred. Please try again.');
      setTimeout(() => {
        window.location.href = '/auth/forgot-password';
      }, 3000);
    }

    function showError(message: string): void {
      if (errorText && errorMessage) {
        errorText.textContent = message;
        errorMessage.style.display = "flex";
        if (successMessage) successMessage.style.display = "none";
      }
    }

    function showSuccess(message: string): void {
      if (successText && successMessage) {
        successText.textContent = message;
        successMessage.style.display = "flex";
        if (errorMessage) errorMessage.style.display = "none";
      }
    }

    function hideMessages(): void {
      if (errorMessage) errorMessage.style.display = "none";
      if (successMessage) successMessage.style.display = "none";
    }

    // Password toggle
    passwordToggle?.addEventListener("click", () => {
      const type = newPasswordInput.type === "password" ? "text" : "password";
      newPasswordInput.type = type;

      passwordToggle.innerHTML = type === "text"
        ? `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/><line x1="1" y1="1" x2="23" y2="23"/></svg>`
        : `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/><circle cx="12" cy="12" r="3"/></svg>`;
    });

    // Form submission
    form?.addEventListener("submit", async (e: Event) => {
      e.preventDefault();
      hideMessages();

      if (!isPasswordResetSession) {
        showError('Invalid reset session. Please request a new password reset link.');
        return;
      }

      const newPassword = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      // Validation
      if (newPassword.length < 8) {
        showError("Password must be at least 8 characters long");
        return;
      }

      if (newPassword !== confirmPassword) {
        showError("Passwords do not match");
        return;
      }

      // Show loading state
      submitBtn.disabled = true;
      btnText.style.display = "none";
      btnSpinner.style.display = "block";

      try {
        console.log('üîÑ Updating password...');
        
        const { error } = await supabase.auth.updateUser({
          password: newPassword,
        });

        if (error) {
          if (error.message?.includes('New password should be different')) {
            throw new Error('Please choose a different password than your current one.');
          }
          throw error;
        }

        console.log('‚úÖ Password updated successfully');
        
        // Success
        showSuccess("Password updated successfully! Redirecting to sign in...");
        
        // Sign out to clear the reset session
        await supabase.auth.signOut();
        
        // Redirect after delay
        setTimeout(() => {
          window.location.href = "/auth/signin?message=Password updated successfully. Please sign in with your new password.";
        }, 2000);
        
      } catch (error: any) {
        console.error("Password reset error:", error);
        showError(error.message || "Failed to update password. Please try again.");
      } finally {
        submitBtn.disabled = false;
        btnText.style.display = "block";
        btnSpinner.style.display = "none";
      }
    });
  });
</script>