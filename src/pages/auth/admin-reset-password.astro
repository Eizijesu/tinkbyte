---
// src/pages/auth/admin-reset-password.astro
export const prerender = false;

import Layout from "../../layouts/Layout.astro";
---

<Layout title="Admin Password Reset | TinkByte">
  <div class="auth-layout">
    <div class="auth-container">
      <div class="auth-brand">
        <a href="/" class="brand-link">
          <div class="brand-text">
            <span class="brand-name">TinkByte</span>
            <span class="brand-tagline">Admin Password Reset</span>
          </div>
        </a>
      </div>

      <div class="auth-card">
        <div class="auth-header">
          <h1 class="auth-title">Reset Admin Password</h1>
          <p class="auth-description">Update your admin password</p>
        </div>

        <form id="admin-reset-form" class="auth-form">
          <div class="form-group">
            <label for="current-password" class="form-label"
              >Current Password</label
            >
            <div class="password-input">
              <input
                type="password"
                id="current-password"
                class="form-input"
                placeholder="Enter current password"
                required
              />
              <button
                type="button"
                class="password-toggle"
                id="current-password-toggle"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                  <circle cx="12" cy="12" r="3"></circle>
                </svg>
              </button>
            </div>
          </div>

          <div class="form-group">
            <label for="new-password" class="form-label">New Password</label>
            <div class="password-input">
              <input
                type="password"
                id="new-password"
                class="form-input"
                placeholder="Enter new password"
                required
                minlength="8"
              />
              <button
                type="button"
                class="password-toggle"
                id="new-password-toggle"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                  <circle cx="12" cy="12" r="3"></circle>
                </svg>
              </button>
            </div>
          </div>

          <div class="form-group">
            <label for="confirm-password" class="form-label"
              >Confirm New Password</label
            >
            <div class="password-input">
              <input
                type="password"
                id="confirm-password"
                class="form-input"
                placeholder="Confirm new password"
                required
                minlength="8"
              />
              <button
                type="button"
                class="password-toggle"
                id="confirm-password-toggle"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                  <circle cx="12" cy="12" r="3"></circle>
                </svg>
              </button>
            </div>
          </div>

          <button type="submit" class="auth-btn primary" id="reset-btn">
            <span class="btn-text">Update Password</span>
            <div class="btn-spinner" style="display: none;">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <line x1="12" y1="2" x2="12" y2="6"></line>
                <line x1="12" y1="18" x2="12" y2="22"></line>
                <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line>
                <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line>
                <line x1="2" y1="12" x2="6" y2="12"></line>
                <line x1="18" y1="12" x2="22" y2="12"></line>
                <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line>
                <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>
              </svg>
            </div>
          </button>

          <div class="auth-footer-links">
            <a href="/auth/forgot-password" class="auth-link"
              >Forgot password?</a
            >
            <a href="/auth/signin" class="auth-link">‚Üê Back to sign in</a>
          </div>
        </form>

        <!-- Square Glassy Error Display -->
        <div class="glass-error" id="glass-error" style="display: none;">
          <div class="error-content">
            <div class="error-icon">
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <circle cx="12" cy="12" r="10"></circle>
                <line x1="15" y1="9" x2="9" y2="15"></line>
                <line x1="9" y1="9" x2="15" y2="15"></line>
              </svg>
            </div>
            <div class="error-message">
              <h4>Password Update Error</h4>
              <p id="error-text">Something went wrong</p>
            </div>
            <button class="error-close" id="error-close">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <line x1="18" y1="6" x2="6" y2="18"></line>
                <line x1="6" y1="6" x2="18" y2="18"></line>
              </svg>
            </button>
          </div>
        </div>

        <!-- Success Display -->
        <div class="glass-success" id="glass-success" style="display: none;">
          <div class="success-content">
            <div class="success-icon">
              <svg
                width="20"
                height="20"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
                <polyline points="22,4 12,14.01 9,11.01"></polyline>
              </svg>
            </div>
            <div class="success-message">
              <h4>Password Updated!</h4>
              <p id="success-text">
                Your password has been updated successfully
              </p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</Layout>

<script>
  import { auth } from "../../lib/auth.js";

  document.addEventListener("DOMContentLoaded", async () => {
    console.log("üîÑ AdminResetPassword: Initializing...");

    // Initialize auth
    await auth.initialize();

    // DOM Elements
    const form = document.getElementById("admin-reset-form") as HTMLFormElement;
    const currentPasswordInput = document.getElementById(
      "current-password"
    ) as HTMLInputElement;
    const newPasswordInput = document.getElementById(
      "new-password"
    ) as HTMLInputElement;
    const confirmPasswordInput = document.getElementById(
      "confirm-password"
    ) as HTMLInputElement;
    const submitBtn = document.getElementById("reset-btn") as HTMLButtonElement;
    const btnText = submitBtn?.querySelector(".btn-text") as HTMLElement;
    const btnSpinner = submitBtn?.querySelector(".btn-spinner") as HTMLElement;
    const glassError = document.getElementById("glass-error") as HTMLElement;
    const errorText = document.getElementById("error-text") as HTMLElement;
    const errorClose = document.getElementById(
      "error-close"
    ) as HTMLButtonElement;
    const glassSuccess = document.getElementById(
      "glass-success"
    ) as HTMLElement;
    const successText = document.getElementById("success-text") as HTMLElement;

    // Password toggles
    const currentPasswordToggle = document.getElementById(
      "current-password-toggle"
    ) as HTMLButtonElement;
    const newPasswordToggle = document.getElementById(
      "new-password-toggle"
    ) as HTMLButtonElement;
    const confirmPasswordToggle = document.getElementById(
      "confirm-password-toggle"
    ) as HTMLButtonElement;

    // Check if user is authenticated
    const currentUser = auth.getUser();
    if (!currentUser) {
      showGlassError("Please sign in first to change your password");
      setTimeout(() => {
        window.location.href =
          "/auth/signin?redirect=" +
          encodeURIComponent(window.location.pathname);
      }, 2000);
      return;
    }

    // Helper Functions
    function showGlassError(message: string) {
      if (errorText && glassError) {
        errorText.textContent = message;
        glassError.style.display = "block";
        if (glassSuccess) glassSuccess.style.display = "none";

        setTimeout(() => {
          glassError.style.transform = "translateY(0)";
          glassError.style.opacity = "1";
        }, 10);
      }
    }

    function showGlassSuccess(message: string) {
      if (successText && glassSuccess) {
        successText.textContent = message;
        glassSuccess.style.display = "block";
        if (glassError) glassError.style.display = "none";

        setTimeout(() => {
          glassSuccess.style.transform = "translateY(0)";
          glassSuccess.style.opacity = "1";
        }, 10);
      }
    }

    function hideMessages() {
      if (glassError) {
        glassError.style.transform = "translateY(-20px)";
        glassError.style.opacity = "0";
        setTimeout(() => {
          glassError.style.display = "none";
        }, 300);
      }
      if (glassSuccess) {
        glassSuccess.style.transform = "translateY(-20px)";
        glassSuccess.style.opacity = "0";
        setTimeout(() => {
          glassSuccess.style.display = "none";
        }, 300);
      }
    }

    // Password toggle functionality
    function setupPasswordToggle(
      toggleBtn: HTMLButtonElement,
      passwordInput: HTMLInputElement
    ) {
      toggleBtn?.addEventListener("click", () => {
        const type = passwordInput.type === "password" ? "text" : "password";
        passwordInput.type = type;

        toggleBtn.innerHTML =
          type === "text"
            ? `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/><line x1="1" y1="1" x2="23" y2="23"/></svg>`
            : `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/><circle cx="12" cy="12" r="3"/></svg>`;
      });
    }

    setupPasswordToggle(currentPasswordToggle, currentPasswordInput);
    setupPasswordToggle(newPasswordToggle, newPasswordInput);
    setupPasswordToggle(confirmPasswordToggle, confirmPasswordInput);

    // Event Listeners
    errorClose?.addEventListener("click", hideMessages);

    // Form submission
    form?.addEventListener("submit", async (e) => {
      e.preventDefault();
      hideMessages();

      const currentPassword = currentPasswordInput.value.trim();
      const newPassword = newPasswordInput.value.trim();
      const confirmPassword = confirmPasswordInput.value.trim();

      // Validation
      if (!currentPassword) {
        showGlassError("Please enter your current password");
        return;
      }

      if (newPassword.length < 8) {
        showGlassError("New password must be at least 8 characters long");
        return;
      }

      if (newPassword !== confirmPassword) {
        showGlassError("New passwords do not match");
        return;
      }

      if (currentPassword === newPassword) {
        showGlassError("New password must be different from current password");
        return;
      }

      // Show loading
      submitBtn.disabled = true;
      btnText.style.display = "none";
      btnSpinner.style.display = "block";

      try {
        console.log("üîÑ AdminResetPassword: Attempting password update");

        // Use supabase directly from auth
        const { error } = await auth.supabase.auth.updateUser({
          password: newPassword,
        });

        if (error) {
          throw error;
        }

        console.log("‚úÖ AdminResetPassword: Password updated successfully");

        showGlassSuccess("Password updated successfully!");

        // Clear form
        currentPasswordInput.value = "";
        newPasswordInput.value = "";
        confirmPasswordInput.value = "";

        // Redirect after delay
        setTimeout(() => {
          window.location.href = "/admin";
        }, 2000);
      } catch (error: any) {
        console.error("‚ùå AdminResetPassword: Password update error", error);

        let errorMessage = "Failed to update password";

        if (error.message.includes("Invalid login credentials")) {
          errorMessage = "Current password is incorrect";
        } else if (error.message.includes("Password should be")) {
          errorMessage = "New password does not meet requirements";
        } else if (error.message) {
          errorMessage = error.message;
        }

        showGlassError(errorMessage);
      } finally {
        submitBtn.disabled = false;
        btnText.style.display = "block";
        btnSpinner.style.display = "none";
      }
    });

    console.log("‚úÖ AdminResetPassword: Initialization complete");
  });
</script>

<style>
  .auth-layout {
    min-height: 100vh;
    background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
    display: flex;
    align-items: center;
    justify-content: center;
    padding: 1.5rem;
    font-family: "Space Grotesk", sans-serif;
  }

  :global(.dark) .auth-layout {
    background: linear-gradient(
      135deg,
      rgb(15, 23, 42) 0%,
      rgb(30, 41, 59) 100%
    );
  }

  .auth-container {
    width: 100%;
    max-width: 380px;
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .auth-brand {
    text-align: center;
  }

  .brand-link {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    text-decoration: none;
    color: inherit;
    transition: transform 0.2s ease;
  }

  .brand-link:hover {
    transform: translateY(-2px);
  }

  .brand-text {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.125rem;
  }

  .brand-name {
    font-size: 1.5rem;
    font-weight: 800;
    line-height: 1;
    color: #243788;
    letter-spacing: -0.025em;
  }

  :global(.dark) .brand-name {
    color: #ffffff;
  }

  .brand-tagline {
    color: #64748b;
    font-size: 0.75rem;
    font-weight: 500;
    line-height: 1;
  }

  :global(.dark) .brand-tagline {
    color: rgb(148, 163, 184);
  }

  .auth-card {
    background: white;
    border: 2px solid #e2e8f0;
    padding: 1.5rem;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
    position: relative;
    overflow: hidden;
  }

  .auth-card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(90deg, #243788 0%, #b4bce1 100%);
  }

  :global(.dark) .auth-card {
    background: rgba(17, 24, 39, 0.95);
    border-color: rgb(51, 65, 85);
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.3);
  }

  .auth-header {
    text-align: center;
    margin-bottom: 1.5rem;
  }

  .auth-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #243788;
    margin: 0 0 0.5rem 0;
    line-height: 1.2;
  }

  :global(.dark) .auth-title {
    color: rgb(248, 250, 252);
  }

  .auth-description {
    color: #64748b;
    font-size: 0.875rem;
    margin: 0;
    line-height: 1.4;
  }

  :global(.dark) .auth-description {
    color: rgb(148, 163, 184);
  }

  .auth-form {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-weight: 600;
    color: #243788;
    font-size: 0.875rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  :global(.dark) .form-label {
    color: rgb(248, 250, 252);
  }

  .form-input {
    width: 100%;
    padding: 0.875rem;
    border: 2px solid #e2e8f0;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    transition: border-color 0.2s ease;
    font-family: inherit;
    box-sizing: border-box;
  }

  .form-input:focus {
    outline: none;
    border-color: #243788;
  }

  .password-input {
    position: relative;
  }

  .password-toggle {
    position: absolute;
    right: 0.875rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #9ca3af;
    cursor: pointer;
    padding: 0.25rem;
  }

  .password-toggle:hover {
    color: #243788;
  }

  .auth-btn {
    width: 100%;
    padding: 0.875rem 1rem;
    border: 2px solid #e2e8f0;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-family: inherit;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .auth-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .auth-btn.primary {
    background: #243788;
    color: white;
    border-color: #243788;
  }

  .auth-btn.primary:hover:not(:disabled) {
    background: #1e2d6b;
    border-color: #1e2d6b;
  }

  .auth-footer-links {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    margin-top: 1rem;
  }

  .auth-link {
    color: #243788;
    text-decoration: none;
    font-size: 0.875rem;
    font-weight: 600;
  }

  .auth-link:hover {
    text-decoration: underline;
  }

  /* Glass Error/Success Styles */
  .glass-error,
  .glass-success {
    position: fixed;
    top: 2rem;
    left: 50%;
    transform: translateX(-50%) translateY(-20px);
    z-index: 9999;
    opacity: 0;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    max-width: 500px;
    width: 90%;
  }

  .error-content,
  .success-content {
    backdrop-filter: blur(16px);
    -webkit-backdrop-filter: blur(16px);
    border: 2px solid;
    padding: 1.5rem;
    display: flex;
    align-items: flex-start;
    gap: 1rem;
    box-shadow:
      0 25px 50px -12px rgba(0, 0, 0, 0.25),
      0 0 0 1px rgba(255, 255, 255, 0.05);
  }

  .error-content {
    background: rgba(239, 68, 68, 0.05);
    border-color: rgba(239, 68, 68, 0.2);
  }

  .success-content {
    background: rgba(34, 197, 94, 0.05);
    border-color: rgba(34, 197, 94, 0.2);
  }

  .error-icon,
  .success-icon {
    flex-shrink: 0;
    width: 40px;
    height: 40px;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .error-icon {
    background: rgba(239, 68, 68, 0.1);
    color: #ef4444;
  }

  .success-icon {
    background: rgba(34, 197, 94, 0.1);
    color: #22c55e;
  }

  .error-message,
  .success-message {
    flex: 1;
    min-width: 0;
  }

  .error-message h4,
  .success-message h4 {
    margin: 0 0 0.5rem 0;
    font-size: 1rem;
    font-weight: 600;
    font-family: "Space Grotesk", sans-serif;
  }

  .error-message h4 {
    color: #ef4444;
  }

  .success-message h4 {
    color: #22c55e;
  }

  .error-message p,
  .success-message p {
    margin: 0;
    font-size: 0.875rem;
    line-height: 1.4;
  }

  .error-message p {
    color: #dc2626;
  }

  .success-message p {
    color: #16a34a;
  }

  .error-close {
    flex-shrink: 0;
    width: 32px;
    height: 32px;
    background: rgba(239, 68, 68, 0.1);
    border: 2px solid rgba(239, 68, 68, 0.2);
    color: #ef4444;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.2s ease;
  }

  .error-close:hover {
    background: rgba(239, 68, 68, 0.2);
    transform: scale(1.05);
  }

  .btn-spinner {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  /* Dark mode support */
  :global(.dark) .form-input {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .form-input:focus {
    border-color: #b4bce1;
  }

  :global(.dark) .auth-btn.primary {
    background: #b4bce1;
    color: rgb(15, 23, 42);
    border-color: #b4bce1;
  }

  :global(.dark) .auth-btn.primary:hover:not(:disabled) {
    background: #9ca8d4;
    border-color: #9ca8d4;
  }

  :global(.dark) .auth-link {
    color: #b4bce1;
  }

  :global(.dark) .password-toggle:hover {
    color: #b4bce1;
  }

  :global(.dark) .error-content {
    background: rgba(239, 68, 68, 0.1);
    border-color: rgba(239, 68, 68, 0.3);
  }

  :global(.dark) .success-content {
    background: rgba(34, 197, 94, 0.1);
    border-color: rgba(34, 197, 94, 0.3);
  }

  :global(.dark) .error-message p {
    color: #fca5a5;
  }

  :global(.dark) .success-message p {
    color: #86efac;
  }

  @media (max-width: 480px) {
    .auth-footer-links {
      flex-direction: column;
      gap: 0.5rem;
      text-align: center;
    }

    .glass-error,
    .glass-success {
      top: 1rem;
      width: 95%;
    }

    .error-content,
    .success-content {
      padding: 1rem;
    }
  }
</style>
