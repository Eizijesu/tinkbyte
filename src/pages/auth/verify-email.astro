---
// src/pages/auth/verify-email.astro
export const prerender = true;
import Layout from "../../layouts/Layout.astro";
import AuthLayout from "../../components/auth/AuthLayout.astro";
---

<Layout
  title="Verify Email | TinkByte"
  description="Verify your email address to complete your account setup"
>
  <AuthLayout
    title="Check Your Email"
    description="Verify your email and set up your password"
  >
    <div class="verification-form">
      <div class="email-info">
        <p class="email-message">
          Please check your email at <strong id="email-display"
            >Loading...</strong
          >
          and click the verification link to complete your account setup.
        </p>
      </div>

      <!-- Password Setup Form (Hidden initially, shown after email verification) -->
      <div id="password-setup" style="display: none;">
        <h3 class="setup-title">Set Up Your Password</h3>
        <p class="setup-description">
          Create a secure password for your account
        </p>

        <form id="password-setup-form" class="password-form">
          <div class="form-group">
            <div class="password-input">
              <input
                type="password"
                id="new-password"
                name="password"
                class="form-input"
                placeholder="Create password"
                required
                minlength="8"
              />
              <button
                type="button"
                class="password-toggle"
                id="password-toggle"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                  <circle cx="12" cy="12" r="3"></circle>
                </svg>
              </button>
            </div>
            <div class="password-strength" id="password-strength">
              <div class="strength-bar">
                <div class="strength-fill" id="strength-fill"></div>
              </div>
              <span class="strength-text" id="strength-text"
                >Password strength</span
              >
            </div>
          </div>

          <div class="form-group">
            <div class="password-input">
              <input
                type="password"
                id="confirm-password"
                name="confirmPassword"
                class="form-input"
                placeholder="Confirm password"
                required
                minlength="8"
              />
              <button
                type="button"
                class="password-toggle"
                id="confirm-password-toggle"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                  <circle cx="12" cy="12" r="3"></circle>
                </svg>
              </button>
            </div>
          </div>

          <button class="auth-btn primary" id="setup-password-btn">
            <span class="btn-text">Complete Setup</span>
            <div class="btn-spinner" style="display: none;">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <line x1="12" y1="2" x2="12" y2="6"></line>
                <line x1="12" y1="18" x2="12" y2="22"></line>
                <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line>
                <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line>
                <line x1="2" y1="12" x2="6" y2="12"></line>
                <line x1="18" y1="12" x2="22" y2="12"></line>
                <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line>
                <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>
              </svg>
            </div>
          </button>
        </form>
      </div>

      <div class="verification-options">
        <button type="button" class="option-link" id="resend-code">
          <span class="resend-text">Resend verification email</span>
          <span class="resend-timer" style="display: none;"
            >Resend in <span id="timer">60</span>s</span
          >
        </button>
        <a href="/auth/signup" class="option-link">Back to sign up</a>
      </div>
    </div>

    <div class="status-message" id="status-message" style="display: none;">
      <span id="status-text"></span>
    </div>
  </AuthLayout>
</Layout>

<script>
  import { authManager } from "../../lib/auth.js";

  class VerifyEmailManager {
    private initialized: boolean = false;
    private emailDisplay: HTMLElement | null = null;
    private passwordSetup: HTMLElement | null = null;
    private passwordForm: HTMLFormElement | null = null;
    private newPasswordInput: HTMLInputElement | null = null;
    private confirmPasswordInput: HTMLInputElement | null = null;
    private passwordToggle: HTMLButtonElement | null = null;
    private confirmPasswordToggle: HTMLButtonElement | null = null;
    private strengthFill: HTMLElement | null = null;
    private strengthText: HTMLElement | null = null;
    private setupBtn: HTMLButtonElement | null = null;
    private resendBtn: HTMLButtonElement | null = null;
    private statusMessage: HTMLElement | null = null;
    private statusText: HTMLElement | null = null;
    private email: string = "";

    constructor() {
      this.init();
    }

    async init() {
      if (this.initialized) return;

      try {
        console.log("🔄 VerifyEmail: Initializing...");

        await authManager.initialize();

        this.setupDOM();
        this.parseURLParams();
        this.checkEmailVerification();
        this.setupEventListeners();

        this.initialized = true;
        console.log("✅ VerifyEmail: Initialized successfully");
      } catch (error) {
        console.error("❌ VerifyEmail: Initialization failed:", error);
        this.showStatus("Failed to initialize email verification", "error");
      }
    }

    private setupDOM() {
      this.emailDisplay = document.getElementById("email-display");
      this.passwordSetup = document.getElementById("password-setup");
      this.passwordForm = document.getElementById(
        "password-setup-form"
      ) as HTMLFormElement;
      this.newPasswordInput = document.getElementById(
        "new-password"
      ) as HTMLInputElement;
      this.confirmPasswordInput = document.getElementById(
        "confirm-password"
      ) as HTMLInputElement;
      this.passwordToggle = document.getElementById(
        "password-toggle"
      ) as HTMLButtonElement;
      this.confirmPasswordToggle = document.getElementById(
        "confirm-password-toggle"
      ) as HTMLButtonElement;
      this.strengthFill = document.getElementById(
        "strength-fill"
      ) as HTMLElement;
      this.strengthText = document.getElementById(
        "strength-text"
      ) as HTMLElement;
      this.setupBtn = document.getElementById(
        "setup-password-btn"
      ) as HTMLButtonElement;
      this.resendBtn = document.getElementById(
        "resend-code"
      ) as HTMLButtonElement;
      this.statusMessage = document.getElementById(
        "status-message"
      ) as HTMLElement;
      this.statusText = document.getElementById("status-text") as HTMLElement;
    }

    private parseURLParams() {
      const urlParams = new URLSearchParams(window.location.search);
      this.email = urlParams.get("email") || "";
      const type = urlParams.get("type") || "signup";

      if (this.emailDisplay && this.email) {
        this.emailDisplay.textContent = this.email;
      }

      if (!this.email || this.email.trim() === "") {
        setTimeout(() => {
          window.location.href = "/auth/signup";
        }, 2000);
        return;
      }
    }

    private checkEmailVerification() {
      const urlHash = window.location.hash;
      if (urlHash.includes("access_token")) {
        console.log("🔄 VerifyEmail: Email verification detected in URL");

        if (this.passwordSetup) {
          this.passwordSetup.style.display = "block";
        }

        window.history.replaceState(
          {},
          document.title,
          window.location.pathname + window.location.search
        );
      }
    }

    private setupEventListeners() {
      this.newPasswordInput?.addEventListener("input", () => {
        if (!this.newPasswordInput) return;
        const password = this.newPasswordInput.value;
        const strength = this.checkPasswordStrength(password);

        if (this.strengthFill) {
          this.strengthFill.className = `strength-fill ${strength.class}`;
        }

        if (this.strengthText) {
          this.strengthText.textContent = strength.text;
        }
      });

      this.setupPasswordToggle(this.passwordToggle, this.newPasswordInput);
      this.setupPasswordToggle(
        this.confirmPasswordToggle,
        this.confirmPasswordInput
      );

      this.passwordForm?.addEventListener("submit", async (e) => {
        e.preventDefault();
        await this.handlePasswordSetup();
      });

      this.resendBtn?.addEventListener("click", async () => {
        await this.resendVerificationEmail();
      });
    }

    private setupPasswordToggle(
      toggleBtn: HTMLButtonElement | null,
      passwordInput: HTMLInputElement | null
    ) {
      if (!toggleBtn || !passwordInput) return;

      toggleBtn.addEventListener("click", () => {
        const type = passwordInput.type === "password" ? "text" : "password";
        passwordInput.type = type;

        toggleBtn.innerHTML =
          type === "text"
            ? `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/><line x1="1" y1="1" x2="23" y2="23"/></svg>`
            : `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/><circle cx="12" cy="12" r="3"/></svg>`;
      });
    }

    private checkPasswordStrength(password: string): {
      score: number;
      text: string;
      class: string;
    } {
      let score = 0;

      if (password.length >= 8) score += 1;
      if (/[a-z]/.test(password)) score += 1;
      if (/[A-Z]/.test(password)) score += 1;
      if (/[0-9]/.test(password)) score += 1;
      if (/[^A-Za-z0-9]/.test(password)) score += 1;

      const strength = ["Very Weak", "Weak", "Fair", "Good", "Strong"];
      const classes = ["", "weak", "fair", "good", "strong"];

      return {
        score,
        text: score === 0 ? "Password strength" : strength[score],
        class: classes[score],
      };
    }

    private async handlePasswordSetup() {
      if (!this.newPasswordInput || !this.confirmPasswordInput) return;

      const password = this.newPasswordInput.value;
      const confirmPassword = this.confirmPasswordInput.value;

      if (password !== confirmPassword) {
        this.showStatus("Passwords do not match", "error");
        return;
      }

      const strength = this.checkPasswordStrength(password);
      if (strength.score < 3) {
        this.showStatus("Please choose a stronger password", "error");
        return;
      }

      const btnText = this.setupBtn?.querySelector(".btn-text") as HTMLElement;
      const btnSpinner = this.setupBtn?.querySelector(
        ".btn-spinner"
      ) as HTMLElement;

      if (this.setupBtn) this.setupBtn.disabled = true;
      if (btnText) btnText.style.display = "none";
      if (btnSpinner) btnSpinner.style.display = "block";

      try {
        console.log("🔄 VerifyEmail: Setting up password");

        const result = await authManager.setPassword(password);

        if (!result.success) {
          throw new Error(result.error);
        }

        console.log("✅ VerifyEmail: Password setup successful");

        this.showStatus(
          "Account setup complete! Redirecting to your profile...",
          "success"
        );

        setTimeout(() => {
          window.location.href = "/profile";
        }, 2000);
      } catch (error: any) {
        console.error("❌ VerifyEmail: Password setup error", error);
        this.showStatus(
          "Failed to set up password. Please try again.",
          "error"
        );
      } finally {
        if (this.setupBtn) this.setupBtn.disabled = false;
        if (btnText) btnText.style.display = "block";
        if (btnSpinner) btnSpinner.style.display = "none";
      }
    }

    private async resendVerificationEmail() {
      if (!this.email) return;

      try {
        const result = await authManager.signUpWithEmail(this.email, "");

        if (!result.success) {
          throw new Error(result.error);
        }

        this.showStatus("New verification email sent!", "success");
        this.startResendTimer();
      } catch (error: any) {
        this.showStatus(`Failed to resend: ${error.message}`, "error");
      }
    }

    private showStatus(message: string, type: string) {
      if (this.statusMessage && this.statusText) {
        this.statusMessage.className = `status-message ${type}`;
        this.statusText.textContent = message;
        this.statusMessage.style.display = "block";

        if (type === "error") {
          setTimeout(() => {
            if (this.statusMessage) this.statusMessage.style.display = "none";
          }, 5000);
        }
      }
    }

    private startResendTimer() {
      const resendText = this.resendBtn?.querySelector(
        ".resend-text"
      ) as HTMLElement;
      const resendTimer = this.resendBtn?.querySelector(
        ".resend-timer"
      ) as HTMLElement;
      const timerSpan = document.getElementById("timer") as HTMLElement;

      if (this.resendBtn) this.resendBtn.disabled = true;
      if (resendText) resendText.style.display = "none";
      if (resendTimer) resendTimer.style.display = "block";

      let countdown = 60;
      const interval = setInterval(() => {
        if (timerSpan) timerSpan.textContent = countdown.toString();
        countdown--;

        if (countdown < 0) {
          clearInterval(interval);
          if (this.resendBtn) this.resendBtn.disabled = false;
          if (resendText) resendText.style.display = "block";
          if (resendTimer) resendTimer.style.display = "none";
        }
      }, 1000);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    new VerifyEmailManager();
  });
</script>
