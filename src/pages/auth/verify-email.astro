---
// src/pages/auth/verify-email.astro
export const prerender = false;

import Layout from "../../layouts/Layout.astro";
import AuthLayout from "../../components/auth/AuthLayout.astro";
---

<Layout
  title="Verify Email | TinkByte"
  description="Verify your email address to complete your account setup"
>
  <AuthLayout
    title="Check Your Email"
    description="Verify your email and set up your password"
  >
    <div class="verification-form">
      <div class="email-info">
        <p class="email-message">
          Please check your email at <strong id="email-display"
            >Loading...</strong
          >
          and click the verification link to complete your account setup.
        </p>
      </div>

      <!-- Password Setup Form (Hidden initially, shown after email verification) -->
      <div id="password-setup" style="display: none;">
        <h3 class="setup-title">Set Up Your Password</h3>
        <p class="setup-description">
          Create a secure password for your account
        </p>

        <form id="password-setup-form" class="password-form">
          <div class="form-group">
            <div class="password-input">
              <input
                type="password"
                id="new-password"
                name="password"
                class="form-input"
                placeholder="Create password"
                required
                minlength="8"
              />
              <button
                type="button"
                class="password-toggle"
                id="password-toggle"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                  <circle cx="12" cy="12" r="3"></circle>
                </svg>
              </button>
            </div>
            <div class="password-strength" id="password-strength">
              <div class="strength-bar">
                <div class="strength-fill" id="strength-fill"></div>
              </div>
              <span class="strength-text" id="strength-text"
                >Password strength</span
              >
            </div>
          </div>

          <div class="form-group">
            <div class="password-input">
              <input
                type="password"
                id="confirm-password"
                name="confirmPassword"
                class="form-input"
                placeholder="Confirm password"
                required
                minlength="8"
              />
              <button
                type="button"
                class="password-toggle"
                id="confirm-password-toggle"
              >
                <svg
                  width="16"
                  height="16"
                  viewBox="0 0 24 24"
                  fill="none"
                  stroke="currentColor"
                  stroke-width="2"
                >
                  <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
                  <circle cx="12" cy="12" r="3"></circle>
                </svg>
              </button>
            </div>
          </div>

          <button class="auth-btn primary" id="setup-password-btn">
            <span class="btn-text">Complete Setup</span>
            <div class="btn-spinner" style="display: none;">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <line x1="12" y1="2" x2="12" y2="6"></line>
                <line x1="12" y1="18" x2="12" y2="22"></line>
                <line x1="4.93" y1="4.93" x2="7.76" y2="7.76"></line>
                <line x1="16.24" y1="16.24" x2="19.07" y2="19.07"></line>
                <line x1="2" y1="12" x2="6" y2="12"></line>
                <line x1="18" y1="12" x2="22" y2="12"></line>
                <line x1="4.93" y1="19.07" x2="7.76" y2="16.24"></line>
                <line x1="16.24" y1="7.76" x2="19.07" y2="4.93"></line>
              </svg>
            </div>
          </button>
        </form>
      </div>

      <div class="verification-options">
        <button type="button" class="option-link" id="resend-code">
          <span class="resend-text">Resend verification email</span>
          <span class="resend-timer" style="display: none;"
            >Resend in <span id="timer">60</span>s</span
          >
        </button>
        <a href="/auth/signup" class="option-link">Back to sign up</a>
      </div>
    </div>

    <div class="status-message" id="status-message" style="display: none;">
      <span id="status-text"></span>
    </div>
  </AuthLayout>
</Layout>

<script>
  import { auth } from "../../lib/auth.js";

  document.addEventListener("DOMContentLoaded", async () => {
    console.log("🔄 VerifyEmail: Initializing...");

    // Initialize auth
    await auth.initialize();

    // Parse URL parameters
    const urlParams = new URLSearchParams(window.location.search);
    const email = urlParams.get("email");
    const type = urlParams.get("type") || "signup";

    // DOM Elements
    const emailDisplay = document.getElementById("email-display");
    const passwordSetup = document.getElementById("password-setup");
    const passwordForm = document.getElementById(
      "password-setup-form"
    ) as HTMLFormElement;
    const newPasswordInput = document.getElementById(
      "new-password"
    ) as HTMLInputElement;
    const confirmPasswordInput = document.getElementById(
      "confirm-password"
    ) as HTMLInputElement;
    const passwordToggle = document.getElementById(
      "password-toggle"
    ) as HTMLButtonElement;
    const confirmPasswordToggle = document.getElementById(
      "confirm-password-toggle"
    ) as HTMLButtonElement;
    const strengthFill = document.getElementById(
      "strength-fill"
    ) as HTMLElement;
    const strengthText = document.getElementById(
      "strength-text"
    ) as HTMLElement;
    const setupBtn = document.getElementById(
      "setup-password-btn"
    ) as HTMLButtonElement;
    const resendBtn = document.getElementById(
      "resend-code"
    ) as HTMLButtonElement;
    const statusMessage = document.getElementById(
      "status-message"
    ) as HTMLElement;
    const statusText = document.getElementById("status-text") as HTMLElement;

    // Update email display
    if (emailDisplay && email) {
      emailDisplay.textContent = email;
    }

    // Check if email exists - if not, redirect
    if (!email || email.trim() === "") {
      setTimeout(() => {
        window.location.href = "/auth/signup";
      }, 2000);
      return;
    }

    // Check for email verification in URL hash (from magic link)
    const urlHash = window.location.hash;
    if (urlHash.includes("access_token")) {
      console.log("🔄 VerifyEmail: Email verification detected in URL");

      // Show password setup form
      if (passwordSetup) {
        passwordSetup.style.display = "block";
      }

      // Clear the hash for security
      window.history.replaceState(
        {},
        document.title,
        window.location.pathname + window.location.search
      );
    }

    // Password strength checker
    function checkPasswordStrength(password: string): {
      score: number;
      text: string;
      class: string;
    } {
      let score = 0;

      if (password.length >= 8) score += 1;
      if (/[a-z]/.test(password)) score += 1;
      if (/[A-Z]/.test(password)) score += 1;
      if (/[0-9]/.test(password)) score += 1;
      if (/[^A-Za-z0-9]/.test(password)) score += 1;

      const strength = ["Very Weak", "Weak", "Fair", "Good", "Strong"];
      const classes = ["", "weak", "fair", "good", "strong"];

      return {
        score,
        text: score === 0 ? "Password strength" : strength[score],
        class: classes[score],
      };
    }

    // Password strength indicator
    newPasswordInput?.addEventListener("input", () => {
      const password = newPasswordInput.value;
      const strength = checkPasswordStrength(password);

      if (strengthFill) {
        strengthFill.className = `strength-fill ${strength.class}`;
      }

      if (strengthText) {
        strengthText.textContent = strength.text;
      }
    });

    // Password toggle functionality
    function setupPasswordToggle(
      toggleBtn: HTMLButtonElement,
      passwordInput: HTMLInputElement
    ) {
      toggleBtn?.addEventListener("click", () => {
        const type = passwordInput.type === "password" ? "text" : "password";
        passwordInput.type = type;

        toggleBtn.innerHTML =
          type === "text"
            ? `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M17.94 17.94A10.07 10.07 0 0 1 12 20c-7 0-11-8-11-8a18.45 18.45 0 0 1 5.06-5.94M9.9 4.24A9.12 9.12 0 0 1 12 4c7 0 11 8 11 8a18.5 18.5 0 0 1-2.16 3.19m-6.72-1.07a3 3 0 1 1-4.24-4.24"/><line x1="1" y1="1" x2="23" y2="23"/></svg>`
            : `<svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2"><path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"/><circle cx="12" cy="12" r="3"/></svg>`;
      });
    }

    setupPasswordToggle(passwordToggle, newPasswordInput);
    setupPasswordToggle(confirmPasswordToggle, confirmPasswordInput);

    // Password setup form submission
    passwordForm?.addEventListener("submit", async (e) => {
      e.preventDefault();

      const password = newPasswordInput.value;
      const confirmPassword = confirmPasswordInput.value;

      if (password !== confirmPassword) {
        showStatus("Passwords do not match", "error");
        return;
      }

      const strength = checkPasswordStrength(password);
      if (strength.score < 3) {
        showStatus("Please choose a stronger password", "error");
        return;
      }

      const btnText = setupBtn.querySelector(".btn-text") as HTMLElement;
      const btnSpinner = setupBtn.querySelector(".btn-spinner") as HTMLElement;

      setupBtn.disabled = true;
      if (btnText) btnText.style.display = "none";
      if (btnSpinner) btnSpinner.style.display = "block";

      try {
        console.log("🔄 VerifyEmail: Setting up password");

        // Update user password
        const { error } = await auth.supabase.auth.updateUser({
          password: password,
        });

        if (error) {
          throw error;
        }

        console.log("✅ VerifyEmail: Password setup successful");

        showStatus(
          "Account setup complete! Redirecting to your profile...",
          "success"
        );

        setTimeout(() => {
          window.location.href = "/profile";
        }, 2000);
      } catch (error: any) {
        console.error("❌ VerifyEmail: Password setup error", error);
        showStatus("Failed to set up password. Please try again.", "error");
      } finally {
        setupBtn.disabled = false;
        if (btnText) btnText.style.display = "block";
        if (btnSpinner) btnSpinner.style.display = "none";
      }
    });

    // Resend verification email
    resendBtn?.addEventListener("click", async () => {
      try {
        const { error } = await auth.supabase.auth.signInWithOtp({
          email: email!,
          options: {
            shouldCreateUser: true,
          },
        });

        if (error) throw error;

        showStatus("New verification email sent!", "success");
        startResendTimer();
      } catch (error: any) {
        showStatus(`Failed to resend: ${error.message}`, "error");
      }
    });

    function showStatus(message: string, type: string) {
      if (statusMessage && statusText) {
        statusMessage.className = `status-message ${type}`;
        statusText.textContent = message;
        statusMessage.style.display = "block";

        if (type === "error") {
          setTimeout(() => {
            statusMessage.style.display = "none";
          }, 5000);
        }
      }
    }

    function startResendTimer() {
      const resendText = resendBtn?.querySelector(
        ".resend-text"
      ) as HTMLElement;
      const resendTimer = resendBtn?.querySelector(
        ".resend-timer"
      ) as HTMLElement;
      const timerSpan = document.getElementById("timer") as HTMLElement;

      if (resendBtn) resendBtn.disabled = true;
      if (resendText) resendText.style.display = "none";
      if (resendTimer) resendTimer.style.display = "block";

      let countdown = 60;
      const interval = setInterval(() => {
        if (timerSpan) timerSpan.textContent = countdown.toString();
        countdown--;

        if (countdown < 0) {
          clearInterval(interval);
          if (resendBtn) resendBtn.disabled = false;
          if (resendText) resendText.style.display = "block";
          if (resendTimer) resendTimer.style.display = "none";
        }
      }, 1000);
    }

    console.log("✅ VerifyEmail: Initialization complete");
  });
</script>

<style>
  .verification-form {
    display: flex;
    flex-direction: column;
    gap: 2rem;
  }

  .email-info {
    text-align: center;
    margin-bottom: 1rem;
  }

  .email-message {
    color: #64748b;
    font-size: 0.875rem;
    line-height: 1.5;
    margin: 0;
  }

  :global(.dark) .email-message {
    color: rgb(148, 163, 184);
  }

  .setup-title {
    font-size: 1.125rem;
    font-weight: 700;
    color: #243788;
    margin: 0 0 0.5rem 0;
    text-align: center;
  }

  :global(.dark) .setup-title {
    color: rgb(248, 250, 252);
  }

  .setup-description {
    color: #64748b;
    font-size: 0.875rem;
    text-align: center;
    margin: 0 0 1.5rem 0;
  }

  :global(.dark) .setup-description {
    color: rgb(148, 163, 184);
  }

  .password-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-input {
    width: 100%;
    padding: 0.875rem;
    border: 2px solid #e2e8f0;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    transition: border-color 0.2s ease;
    font-family: inherit;
    box-sizing: border-box;
  }

  .form-input:focus {
    outline: none;
    border-color: #243788;
  }

  .password-input {
    position: relative;
  }

  .password-toggle {
    position: absolute;
    right: 0.875rem;
    top: 50%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #9ca3af;
    cursor: pointer;
    padding: 0.25rem;
  }

  .password-toggle:hover {
    color: #243788;
  }

  .password-strength {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-top: 0.5rem;
  }

  .strength-bar {
    flex: 1;
    height: 4px;
    background: #e2e8f0;
    overflow: hidden;
  }

  .strength-fill {
    height: 100%;
    width: 0%;
    transition: all 0.3s ease;
    background: #ef4444;
  }

  .strength-fill.weak {
    width: 25%;
    background: #ef4444;
  }

  .strength-fill.fair {
    width: 50%;
    background: #f59e0b;
  }

  .strength-fill.good {
    width: 75%;
    background: #3b82f6;
  }

  .strength-fill.strong {
    width: 100%;
    background: #10b981;
  }

  .strength-text {
    font-size: 0.75rem;
    color: #64748b;
    min-width: 100px;
  }

  .auth-btn {
    width: 100%;
    padding: 1rem;
    border: 2px solid #e2e8f0;
    background: white;
    color: #374151;
    font-size: 0.875rem;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    font-family: inherit;
    text-transform: uppercase;
    letter-spacing: 0.05em;
  }

  .auth-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .auth-btn.primary {
    background: #243788;
    color: white;
    border-color: #243788;
  }

  .auth-btn.primary:hover:not(:disabled) {
    background: #1e2d6b;
    border-color: #1e2d6b;
  }

  .verification-options {
    display: flex;
    justify-content: space-between;
    gap: 1rem;
    font-size: 0.875rem;
  }

  .option-link {
    background: none;
    border: none;
    color: #243788;
    cursor: pointer;
    text-decoration: underline;
    font-family: inherit;
    font-size: inherit;
    font-weight: 600;
  }

  .option-link:hover {
    opacity: 0.8;
  }

  .btn-spinner {
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  .status-message {
    padding: 1rem;
    font-size: 0.875rem;
    text-align: center;
    margin-top: 1rem;
  }

  .status-message.error {
    background: rgba(239, 68, 68, 0.1);
    border: 2px solid #ef4444;
    color: #dc2626;
  }

  .status-message.success {
    background: rgba(34, 197, 94, 0.1);
    border: 2px solid #22c55e;
    color: #16a34a;
  }

  /* Dark mode support */
  :global(.dark) .form-input {
    background: rgb(17, 24, 39);
    border-color: rgb(51, 65, 85);
    color: rgb(248, 250, 252);
  }

  :global(.dark) .form-input:focus {
    border-color: #b4bce1;
  }

  :global(.dark) .password-toggle:hover {
    color: #b4bce1;
  }

  :global(.dark) .strength-bar {
    background: rgb(51, 65, 85);
  }

  :global(.dark) .strength-text {
    color: rgb(148, 163, 184);
  }

  :global(.dark) .auth-btn.primary {
    background: #b4bce1;
    color: rgb(15, 23, 42);
    border-color: #b4bce1;
  }

  :global(.dark) .auth-btn.primary:hover:not(:disabled) {
    background: #9ca8d4;
    border-color: #9ca8d4;
  }

  :global(.dark) .option-link {
    color: #b4bce1;
  }

  :global(.dark) .status-message.error {
    background: rgba(239, 68, 68, 0.2);
    border-color: #ef4444;
    color: #fca5a5;
  }

  :global(.dark) .status-message.success {
    background: rgba(34, 197, 94, 0.2);
    border-color: #22c55e;
    color: #86efac;
  }

  @media (max-width: 480px) {
    .verification-options {
      flex-direction: column;
      gap: 0.75rem;
      text-align: center;
    }
  }
</style>
