---
import { Resend } from "resend";

let result: any = null;
let error: string | null = null;
let inputEmail = "";

if (Astro.request.method === "POST") {
  try {
    const form = await Astro.request.formData();
    inputEmail = form.get("email") as string;

    if (!inputEmail) throw new Error("No email provided!");

    const apiKey = import.meta.env.RESEND_API_KEY;
    const fromEmail =
      import.meta.env.RESEND_FROM_EMAIL || "notify@notify.tinkbyte.com";

    if (!apiKey) throw new Error("RESEND_API_KEY not set on server!");
    if (!fromEmail) throw new Error("RESEND_FROM_EMAIL not set on server!");

    const resend = new Resend(apiKey);

    const { data, error: sendError } = await resend.emails.send({
      from: fromEmail,
      to: inputEmail,
      subject: "TinkByte Static Email Test",
      html: `
        <h2>This is a test from your static Astro site!</h2>
        <p>If you see this, your Resend setup works!<br>
        Time: ${new Date().toISOString()}</p>
      `,
      text: `This is a test from your static Astro site! Time: ${new Date().toISOString()}`,
    });

    if (sendError) throw new Error(sendError.message);

    result = data;
  } catch (e: any) {
    error = e.message || String(e);
  }
}
---

<html>
  <head>
    <title>Static Email Test</title>
    <style>
      body {
        font-family: ui-sans-serif, Arial, sans-serif;
        padding: 3rem;
        background: #f6f8fa;
      }
      .box {
        background: #fff;
        border-radius: 8px;
        max-width: 500px;
        margin: auto;
        box-shadow: 0 2px 6px #0001;
        padding: 2rem;
      }
      input[type="email"] {
        padding: 0.7rem;
        font-size: 1rem;
        border: 1px solid #bbb;
        border-radius: 4px;
        width: 100%;
      }
      button {
        padding: 0.7rem 1.2rem;
        background: #243788;
        color: #fff;
        border: none;
        border-radius: 4px;
        margin-top: 1rem;
        cursor: pointer;
      }
      .success {
        background: #e6ffed;
        color: #207544;
        border-left: 4px solid #21a366;
        padding: 1rem;
        margin-top: 1.5rem;
      }
      .error {
        background: #ffe6e6;
        color: #a32020;
        border-left: 4px solid #d32f2f;
        padding: 1rem;
        margin-top: 1.5rem;
      }
      pre {
        font-size: 0.9rem;
        background: #f4f4f4;
        padding: 0.7rem;
        border-radius: 4px;
        overflow-x: auto;
      }
    </style>
  </head>
  <body>
    <div class="box">
      <h1>Static Email Test</h1>
      <form
        method="POST"
        enctype="application/x-www-form-urlencoded"
        autocomplete="off"
      >
        <label for="email">Send a test email to:</label><br />
        <input
          type="email"
          name="email"
          id="email"
          required
          value={inputEmail}
          placeholder="you@yourdomain.com"
        />
        <br />
        <button type="submit">Send Test Email</button>
      </form>

      {
        result && (
          <div class="success">
            <h3>✅ Email Sent!</h3>
            <p>Check your inbox (and spam folder).</p>
            <pre>{JSON.stringify(result, null, 2)}</pre>
          </div>
        )
      }
      {
        error && (
          <div class="error">
            <h3>❌ Error</h3>
            <p>{error}</p>
          </div>
        )
      }
    </div>
  </body>
</html>
