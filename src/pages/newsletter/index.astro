---
//src/pages/newsletter/index.astro - 
import Layout from "../../layouts/Layout.astro";
import { SITE } from "../../config/site";

// Get ConvertKit form ID from environment
const CONVERTKIT_FORM_ID = import.meta.env.PUBLIC_CONVERTKIT_FORM_ID;

const newsletters = [
  // Weekly Publications (5)
  {
    name: "TinkByte Weekly",
    day: "Thursday",
    description:
      "Product strategy, AI trends, market analysis, business insights",
    audience: "PMs, builders, curious minds",
    frequency: "Weekly",
    featured: true,
    image: "/images/newsletter/twr.png",
    code: "TW",
    type: "tinkbyte-weekly",
  },
  {
    name: "Build Sheet",
    day: "Tuesday",
    description: "Real-time shipping, fixing, learning, hands-on experiments",
    audience: "Startup teams, indie hackers",
    frequency: "Weekly",
    image: "/images/newsletter/tbs.png",
    code: "BS",
    type: "build-sheet",
  },
  {
    name: "Stackdown",
    day: "Monday",
    description: "Tools, workflows, stack breakdowns, technical setups",
    audience: "Founders, makers, ops leads",
    frequency: "Weekly",
    image: "/images/newsletter/ts.png",
    code: "S",
    type: "stackdown",
  },
  {
    name: "Signal Drop",
    day: "Friday",
    description: "Quick insights, launches, updates, AI shifts, market signals",
    audience: "Growth leads, devs, tinkerers",
    frequency: "Weekly",
    image: "/images/newsletter/tsd.png",
    code: "SD",
    type: "signal-drop",
  },
  {
    name: "System Signal",
    day: "Wednesday",
    description: "Automation, logic, ML patterns, system architecture",
    audience: "Product thinkers, engineers, analysts",
    frequency: "Weekly",
    image: "/images/newsletter/tss.png",
    code: "SS",
    type: "system-signal",
  },
];

const monthlyFeatures = [
  // Monthly Deep Dives (6)
  {
    name: "The Real Build",
    description: "Complete product journey documentation, idea to execution",
    audience: "Founders, product teams, early investors",
    frequency: "Monthly",
    image: "/images/newsletter/trb.png",
    code: "TRB",
    type: "the-real-build",
  },
  {
    name: "The Loop",
    description: "Recurring patterns, mental models, strategy frameworks",
    audience: "Designers, PMs, strategic thinkers",
    frequency: "Monthly",
    image: "/images/newsletter/ttl.png",
    code: "TL",
    type: "the-loop",
  },
  {
    name: "Data Slice",
    description: "Single powerful insight from research, behavior, testing",
    audience: "Analysts, PMs, growth marketers",
    frequency: "Monthly",
    image: "/images/newsletter/tds.png",
    code: "DS",
    type: "data-slice",
  },
  {
    name: "The Mirror",
    description: "Culture, ethics, human impact of technology",
    audience: "Designers, human-centered builders",
    frequency: "Monthly",
    image: "/images/newsletter/ttm.png",
    code: "TM",
    type: "the-mirror",
  },
  {
    name: "Community Code",
    description: "Creator projects, community stories, builder insights",
    audience: "Community builders, indie creators",
    frequency: "Bi-Monthly",
    image: "/images/newsletter/tch.png",
    code: "CC",
    type: "community-code",
  },
  {
    name: "Career Stack",
    description: "Professional development, skills, remote hiring strategies",
    audience: "Career changers, learners, job seekers",
    frequency: "Monthly",
    image: "/images/newsletter/tcs.png",
    code: "CS",
    type: "career-stack",
  },
];

const limitedSeries = [
  // Limited Series (1)
  {
    name: "Start Here: Future Tech",
    description:
      "Beginner introductions to AR, VR, Robotics, Quantum, Blockchain, Web3, IoTs",
    audience: "Non-technical readers, new entrants",
    frequency: "Limited Series",
    image: "/images/newsletter/tft.png",
    code: "FT",
    type: "start-here-future-tech",
  },
];

const pageTitle = "Newsletter | TinkByte";
const pageDescription =
  "Subscribe to TinkByte newsletters. Curated insights on tech, product, AI, and community. Pick what fits your focus.";
---

<Layout title={pageTitle} description={pageDescription}>
  <!-- Enhanced Newsletter Hero Section -->
  <section class="relative py-16 lg:py-24 overflow-hidden">
    <div
      class="absolute inset-0 bg-gradient-to-r from-blue-600 via-purple-600 to-indigo-600 opacity-10"
    >
    </div>
    <div class="absolute inset-0 bg-[url('/images/pattern.svg')] opacity-5">
    </div>

    <div class="container mx-auto px-4 relative z-10">
      <div class="max-w-4xl mx-auto text-center">
        <div
          class="inline-flex items-center gap-2 px-4 py-2 bg-white/80 dark:bg-zinc-800/80 backdrop-blur-sm border border-zinc-200 dark:border-zinc-700 mb-6"
        >
          <div class="w-3 h-3 bg-green-500 rounded-full animate-pulse"></div>
          <span
            class="text-sm font-bold uppercase tracking-wider text-zinc-700 dark:text-zinc-300"
          >
            Weekly Newsletter
          </span>
        </div>

        <h1
          class="text-4xl lg:text-6xl font-bold text-zinc-900 dark:text-white mb-6"
        >
          Join
          <span
            class="bg-gradient-to-r from-blue-600 to-purple-600 bg-clip-text text-transparent"
          >
            TinkByte Newsletter
          </span>
        </h1>

        <p
          class="text-xl lg:text-2xl text-zinc-600 dark:text-zinc-300 leading-relaxed max-w-3xl mx-auto mb-12"
        >
          The tech newsletter that cuts through the noise. Every Tuesday, get
          practical insights, real-world case studies, and honest analysis
          delivered to your inbox.
        </p>
      </div>
    </div>
  </section>

  <main class="newsletter-page" data-theme-aware="true">
    <div class="max-w-7xl mx-auto px-4 py-16">
      <!-- Quick Actions - Auto-hide Sidebar -->
      <div class="quick-actions-sidebar" id="quick-actions">
        <div class="actions-content">
          <button id="select-all" class="action-btn">
            <svg width="12" height="12" viewBox="0 0 12 12" fill="none">
              <path
                d="M4 8L6.5 10.5L12 5"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
            <span>All</span>
          </button>
          <button id="clear-all" class="action-btn secondary">
            <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
              <path
                d="M12 4L4 12M4 4L12 12"
                stroke="currentColor"
                stroke-width="2"
                stroke-linecap="round"
                stroke-linejoin="round"></path>
            </svg>
            <span>Clear</span>
          </button>
          <div class="selection-count" id="selection-count">0</div>
        </div>
      </div>

      <!-- Newsletter Layout - Hero Left, Content Right -->
      <div class="newsletter-layout">
        <!-- Left Side - Newsletter Hero -->
        <div class="newsletter-hero theme-card">
          <div class="hero-content">
            <!-- Newsletter Icon - Centered -->
            <div class="hero-icon-container">
              <div class="hero-icon">
                <svg width="80" height="80" viewBox="0 0 80 80" fill="none">
                  <rect
                    x="10"
                    y="15"
                    width="60"
                    height="50"
                    rx="2"
                    stroke="currentColor"
                    stroke-width="2"
                    fill="none"></rect>
                  <rect
                    x="15"
                    y="20"
                    width="20"
                    height="15"
                    fill="currentColor"
                    opacity="0.3"></rect>
                  <line
                    x1="40"
                    y1="22"
                    x2="65"
                    y2="22"
                    stroke="currentColor"
                    stroke-width="2"></line>
                  <line
                    x1="40"
                    y1="27"
                    x2="65"
                    y2="27"
                    stroke="currentColor"
                    stroke-width="1"></line>
                  <line
                    x1="40"
                    y1="31"
                    x2="60"
                    y2="31"
                    stroke="currentColor"
                    stroke-width="1"></line>
                  <line
                    x1="15"
                    y1="40"
                    x2="65"
                    y2="40"
                    stroke="currentColor"
                    stroke-width="1"></line>
                  <line
                    x1="15"
                    y1="45"
                    x2="65"
                    y2="45"
                    stroke="currentColor"
                    stroke-width="1"></line>
                  <line
                    x1="15"
                    y1="50"
                    x2="50"
                    y2="50"
                    stroke="currentColor"
                    stroke-width="1"></line>
                  <line
                    x1="15"
                    y1="55"
                    x2="65"
                    y2="55"
                    stroke="currentColor"
                    stroke-width="1"></line>
                </svg>
              </div>
              <h1 class="hero-title">Newsletters</h1>
            </div>

            <p class="hero-description">
              Receive the latest emerging technology news in your inbox.
            </p>

            <p class="hero-instruction">
              Select the newsletters you'd like to receive and enter your email
              below to sign up. Sign in to manage your existing preferences.
            </p>

            <!-- Subscription Form with ConvertKit -->
            <div class="hero-form">
              {
                CONVERTKIT_FORM_ID ? (
                  <form
                    class="newsletter-form"
                    id="newsletter-signup"
                    action={`https://app.convertkit.com/forms/${CONVERTKIT_FORM_ID}/subscriptions`}
                    method="post"
                    data-form-id={CONVERTKIT_FORM_ID}
                  >
                    <div class="form-group">
                      <label for="email" class="form-label">
                        EMAIL
                      </label>
                      <input
                        type="email"
                        id="email"
                        name="email_address"
                        placeholder="Enter your email address"
                        class="form-input"
                        required
                      />
                    </div>

                    <button type="submit" class="subscribe-button">
                      Subscribe
                    </button>

                    <div
                      class="selected-summary"
                      id="selected-summary"
                      style="display: none;"
                    >
                      <p class="summary-text">
                        You'll receive:{" "}
                        <span id="summary-list" class="summary-list" />
                      </p>
                    </div>
                  </form>
                ) : (
                  <div class="form-error">
                    <p>
                      Newsletter signup temporarily unavailable. Please check
                      back soon.
                    </p>
                  </div>
                )
              }

              <div class="form-footer">
                <p class="form-disclaimer">
                  <a href="/terms" class="disclaimer-link">Terms of Service</a> and
                  <a href="/privacy" class="disclaimer-link">Privacy Policy</a>
                </p>
              </div>
            </div>
          </div>
        </div>

        <!-- Right Side - Newsletter Content -->
        <div class="newsletter-content">
          <!-- Weekly Newsletters -->
          <div class="newsletter-section">
            <h2 class="section-title">Weekdays</h2>
            <div class="newsletter-grid">
              {
                newsletters.map((newsletter, index) => (
                  <div
                    class="newsletter-card"
                    data-newsletter={newsletter.name
                      .toLowerCase()
                      .replace(/\s+/g, "-")}
                  >
                    <div class="card-checkbox">
                      <input
                        type="checkbox"
                        id={newsletter.name.toLowerCase().replace(/\s+/g, "-")}
                        name="newsletters"
                        value={newsletter.name}
                        class="checkbox-input"
                      />
                      <label
                        for={newsletter.name.toLowerCase().replace(/\s+/g, "-")}
                        class="checkbox-label"
                      />
                    </div>

                    <div class="card-content">
                      <div class="card-header">
                        <div class="card-day">
                          {newsletter.day.toUpperCase()}
                        </div>
                        {newsletter.featured && (
                          <div class="card-badge">POPULAR</div>
                        )}
                      </div>

                      <h3 class="card-title">{newsletter.name}</h3>
                      <p class="card-description">{newsletter.description}</p>
                      <div class="card-meta">
                        <span class="card-audience">
                          For: {newsletter.audience}
                        </span>
                      </div>
                    </div>

                    <div class="card-image">
                      <img
                        src={newsletter.image}
                        alt={newsletter.name}
                        loading="lazy"
                        onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                      />
                      <div
                        class="image-placeholder"
                        data-code={newsletter.code}
                        style="display: none;"
                      >
                        {newsletter.code}
                      </div>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>

          <!-- Monthly Features -->
          <div class="newsletter-section">
            <h2 class="section-title">Monthly</h2>
            <div class="newsletter-grid">
              {
                monthlyFeatures.map((newsletter, index) => (
                  <div
                    class="newsletter-card"
                    data-newsletter={newsletter.name
                      .toLowerCase()
                      .replace(/\s+/g, "-")}
                  >
                    <div class="card-checkbox">
                      <input
                        type="checkbox"
                        id={newsletter.name.toLowerCase().replace(/\s+/g, "-")}
                        name="newsletters"
                        value={newsletter.name}
                        class="checkbox-input"
                      />
                      <label
                        for={newsletter.name.toLowerCase().replace(/\s+/g, "-")}
                        class="checkbox-label"
                      />
                    </div>

                    <div class="card-content">
                      <div class="card-header">
                        <div class="card-frequency">{newsletter.frequency}</div>
                      </div>

                      <h3 class="card-title">{newsletter.name}</h3>
                      <p class="card-description">{newsletter.description}</p>
                      <div class="card-meta">
                        <span class="card-audience">
                          For: {newsletter.audience}
                        </span>
                      </div>
                    </div>

                    <div class="card-image">
                      <img
                        src={newsletter.image}
                        alt={newsletter.name}
                        loading="lazy"
                        onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                      />
                      <div
                        class="image-placeholder"
                        data-code={newsletter.code}
                        style="display: none;"
                      >
                        {newsletter.code}
                      </div>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>

          <!-- Limited Series -->
          <div class="newsletter-section">
            <h2 class="section-title">Limited Series</h2>
            <div class="newsletter-grid">
              {
                limitedSeries.map((newsletter, index) => (
                  <div
                    class="newsletter-card"
                    data-newsletter={newsletter.name
                      .toLowerCase()
                      .replace(/\s+/g, "-")}
                  >
                    <div class="card-checkbox">
                      <input
                        type="checkbox"
                        id={newsletter.name.toLowerCase().replace(/\s+/g, "-")}
                        name="newsletters"
                        value={newsletter.name}
                        class="checkbox-input"
                      />
                      <label
                        for={newsletter.name.toLowerCase().replace(/\s+/g, "-")}
                        class="checkbox-label"
                      />
                    </div>

                    <div class="card-content">
                      <div class="card-header">
                        <div class="card-frequency limited">
                          {newsletter.frequency}
                        </div>
                      </div>

                      <h3 class="card-title">{newsletter.name}</h3>
                      <p class="card-description">{newsletter.description}</p>
                      <div class="card-meta">
                        <span class="card-audience">
                          For: {newsletter.audience}
                        </span>
                      </div>
                    </div>

                    <div class="card-image">
                      <img
                        src={newsletter.image}
                        alt={newsletter.name}
                        loading="lazy"
                        onerror="this.style.display='none'; this.nextElementSibling.style.display='flex';"
                      />
                      <div
                        class="image-placeholder"
                        data-code={newsletter.code}
                        style="display: none;"
                      >
                        {newsletter.code}
                      </div>
                    </div>
                  </div>
                ))
              }
            </div>
          </div>

          <!-- More from TinkByte -->
          <div class="newsletter-section">
            <h2 class="section-title">More from TinkByte</h2>
            <div class="newsletter-grid">
              <div class="newsletter-card additional">
                <div class="card-checkbox">
                  <input
                    type="checkbox"
                    id="updates-offers"
                    name="additional"
                    value="updates"
                    class="checkbox-input"
                  />
                  <label for="updates-offers" class="checkbox-label"></label>
                </div>

                <div class="card-content">
                  <div class="card-header">
                    <div class="card-frequency">Occasionally</div>
                  </div>

                  <h3 class="card-title">Updates and special offers</h3>
                  <p class="card-description">
                    Get special discounts, top stories, & information on other
                    initiatives
                  </p>
                </div>
              </div>

              <div class="newsletter-card additional">
                <div class="card-checkbox">
                  <input
                    type="checkbox"
                    id="events"
                    name="additional"
                    value="events"
                    class="checkbox-input"
                  />
                  <label for="events" class="checkbox-label"></label>
                </div>

                <div class="card-content">
                  <div class="card-header">
                    <div class="card-frequency">Occasionally</div>
                  </div>

                  <h3 class="card-title">Events</h3>
                  <p class="card-description">
                    Learn about our virtual and in-person events
                  </p>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Archive Link -->
      <section class="archive-section">
        <a href="/newsletter/archive" class="archive-link">
          <svg width="16" height="16" viewBox="0 0 16 16" fill="none">
            <path
              d="M2 5V13C2 13.5523 2.44772 14 3 14H13C13.5523 14 14 13.5523 14 13V5M2 5L8 1L14 5M2 5H14"
              stroke="currentColor"
              stroke-width="2"></path>
          </svg>
          Browse Newsletter Archive
        </a>
      </section>
    </div>
  </main>
</Layout>

<style>
  /* Newsletter Page - Enhanced with new colors */
  .newsletter-page {
    font-family: "Space Grotesk", sans-serif;
    background-color: var(--color-bg-primary);
    color: var(--color-text-primary);
    min-height: 100vh;
  }

  /* Quick Actions Sidebar - Auto-hide on scroll */
  .quick-actions-sidebar {
    position: fixed;
    right: 2rem;
    top: 50%;
    transform: translateY(-50%);
    z-index: 50;
    background: var(--color-bg-primary);
    border: 2px solid var(--color-border);
    padding: 1rem;
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    transition: all 0.3s ease;
    opacity: 1;
    min-width: 60px;
  }

  .quick-actions-sidebar.hidden {
    transform: translateY(-50%) translateX(100px);
    opacity: 0;
  }

  :global(.dark) .quick-actions-sidebar {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .actions-content {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
    align-items: center;
  }

  .action-btn {
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 0.25rem;
    padding: 0.75rem;
    border: 2px solid #243788;
    background: #243788;
    color: white;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: inherit;
    min-width: 60px;
  }

  .action-btn:hover {
    background: white;
    color: #243788;
  }

  .action-btn.secondary {
    background: white;
    color: #243788;
  }

  .action-btn.secondary:hover {
    background: #243788;
    color: white;
  }

  .action-btn:disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }

  .selection-count {
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--color-text-secondary);
    padding: 0.5rem;
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    text-align: center;
    min-width: 60px;
  }

  /* Main Layout */
  .newsletter-layout {
    display: grid;
    grid-template-columns: 380px 1fr;
    gap: 4rem;
    align-items: start;
  }

  /* Newsletter Hero */
  .newsletter-hero {
    position: sticky;
    top: 2rem;
    background: var(--color-bg-primary);
    border: 2px solid var(--color-border);
    padding: 2rem;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  :global(.dark) .newsletter-hero {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  .hero-content {
    text-align: center;
  }

  /* Centered Icon and Title */
  .hero-icon-container {
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 1.5rem;
  }

  .hero-icon {
    margin-bottom: 1rem;
    color: #243788;
  }

  .hero-title {
    font-size: 2.5rem;
    font-weight: 800;
    color: var(--color-text-primary);
    margin: 0;
  }

  .hero-description {
    font-size: 1.125rem;
    color: var(--color-text-secondary);
    margin-bottom: 1rem;
    line-height: 1.4;
  }

  .hero-instruction {
    font-size: 0.875rem;
    color: var(--color-text-muted);
    line-height: 1.3;
    margin-bottom: 2rem;
  }

  /* Form Styles */
  .hero-form {
    text-align: left;
  }

  .newsletter-form {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .form-group {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .form-label {
    font-size: 0.75rem;
    font-weight: 700;
    color: var(--color-text-primary);
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  .form-input {
    padding: 0.875rem 1rem;
    border: 2px solid var(--color-border);
    font-size: 1rem;
    font-family: inherit;
    transition: all 0.3s ease;
    background: var(--color-bg-primary);
    color: var(--color-text-primary);
  }

  .form-input:focus {
    outline: none;
    border-color: #243788;
  }

  /* Updated Subscribe Button */
  .subscribe-button {
    padding: 1rem 2rem;
    background: #243788;
    color: white;
    border: 2px solid #243788;
    font-size: 0.875rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    font-family: inherit;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .subscribe-button:hover {
    background: white;
    color: #243788;
  }

  .subscribe-button:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  /* Form Error */
  .form-error {
    padding: 1rem;
    background: #fef2f2;
    border: 1px solid #fecaca;
    color: #dc2626;
    text-align: center;
    font-size: 0.875rem;
  }

  :global(.dark) .form-error {
    background: rgba(239, 68, 68, 0.1);
    color: #f87171;
    border-color: rgba(239, 68, 68, 0.2);
  }

  /* Selected Summary */
  .selected-summary {
    padding: 1rem;
    background: var(--color-bg-secondary);
    border: 1px solid var(--color-border);
    margin-top: 1rem;
  }

  .summary-text {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    margin: 0;
  }

  .summary-list {
    color: var(--color-text-primary);
    font-weight: 600;
  }

  /* Form Footer */
  .form-footer {
    margin-top: 1rem;
    text-align: center;
  }

  .form-disclaimer {
    font-size: 0.75rem;
    color: var(--color-text-muted);
    line-height: 1.4;
  }

  .disclaimer-link {
    color: #243788;
    text-decoration: underline;
  }

  /* Newsletter Content */
  .newsletter-content {
    flex: 1;
  }

  .newsletter-section {
    margin-bottom: 3rem;
  }

  .section-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: var(--color-text-primary);
    margin-bottom: 1.5rem;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    border-bottom: 2px solid var(--color-border);
    padding-bottom: 0.5rem;
  }

  /* Newsletter Grid - 2 columns */
  .newsletter-grid {
    display: grid;
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  /* Newsletter Cards */
  .newsletter-card {
    display: flex;
    align-items: center;
    gap: 1rem;
    padding: 1.25rem;
    background: var(--color-bg-primary);
    border: 2px solid var(--color-border);
    transition: all 0.3s ease;
    cursor: pointer;
    position: relative;
  }

  .newsletter-card:hover {
    border-color: #243788;
    transform: translateY(-2px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }

  :global(.dark) .newsletter-card:hover {
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3);
  }

  /* Checkbox */
  .card-checkbox {
    position: relative;
    flex-shrink: 0;
  }

  .checkbox-input {
    position: absolute;
    opacity: 0;
    width: 20px;
    height: 20px;
    margin: 0;
    cursor: pointer;
  }

  .checkbox-label {
    display: block;
    width: 20px;
    height: 20px;
    border: 2px solid var(--color-border);
    cursor: pointer;
    transition: all 0.3s ease;
    position: relative;
    background: var(--color-bg-primary);
  }

  .checkbox-input:checked + .checkbox-label {
    background: #243788;
    border-color: #243788;
  }

  .checkbox-input:checked + .checkbox-label::after {
    content: "✓";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 12px;
    font-weight: bold;
  }

  /* Card Content */
  .card-content {
    flex: 1;
    min-width: 0;
  }

  .card-header {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    margin-bottom: 0.5rem;
  }

  .card-day,
  .card-frequency {
    padding: 0.25rem 0.75rem;
    font-size: 0.6875rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    background: var(--color-bg-secondary);
    color: var(--color-text-secondary);
    border: 1px solid var(--color-border);
  }

  .card-frequency.limited {
    background: #243788;
    color: white;
    border-color: #243788;
  }

  .card-badge {
    padding: 0.25rem 0.5rem;
    background: #243788;
    color: white;
    font-size: 0.625rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.1em;
  }

  .card-title {
    font-size: 1rem;
    font-weight: 700;
    color: var(--color-text-primary);
    margin-bottom: 0.5rem;
    text-transform: uppercase;
    letter-spacing: 0.025em;
  }

  .card-description {
    font-size: 0.875rem;
    color: var(--color-text-secondary);
    line-height: 1.3;
    margin-bottom: 0.5rem;
  }

  /* Fixed text wrapping for audience */
  .card-audience {
    font-size: 0.75rem;
    color: var(--color-text-muted);
    font-style: italic;
    word-wrap: break-word;
    hyphens: auto;
    line-height: 1.2;
  }

  /* Card Image - Made Bigger with real image support */
  .card-image {
    flex-shrink: 0;
    width: 120px;
    height: 90px;
    overflow: hidden;
    border: 1px solid var(--color-border);
    display: flex;
    align-items: center;
    justify-content: center;
    position: relative;
  }

  .card-image img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    transition: transform 0.3s ease;
  }

  .newsletter-card:hover .card-image img {
    transform: scale(1.05);
  }

  .image-placeholder {
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #243788;
    color: white;
    font-size: 0.875rem;
    font-weight: 700;
    text-transform: uppercase;
    letter-spacing: 0.1em;
    transition: transform 0.3s ease;
  }

  .newsletter-card:hover .image-placeholder {
    transform: scale(1.05);
  }

  /* Different colors for different newsletter types */
  .image-placeholder[data-code="TW"] {
    background: #243788;
  }
  .image-placeholder[data-code="BS"] {
    background: #8b5cf6;
  }
  .image-placeholder[data-code="S"] {
    background: #10b981;
  }
  .image-placeholder[data-code="SD"] {
    background: #f59e0b;
  }
  .image-placeholder[data-code="SS"] {
    background: #ef4444;
  }
  .image-placeholder[data-code="TRB"] {
    background: #6366f1;
  }
  .image-placeholder[data-code="TL"] {
    background: #ec4899;
  }
  .image-placeholder[data-code="DS"] {
    background: #14b8a6;
  }
  .image-placeholder[data-code="TM"] {
    background: #f97316;
  }
  .image-placeholder[data-code="CC"] {
    background: #84cc16;
  }
  .image-placeholder[data-code="CS"] {
    background: #eab308;
  }
  .image-placeholder[data-code="FT"] {
    background: #06b6d4;
  }

  /* Archive Section */
  .archive-section {
    margin-top: 3rem;
    text-align: center;
  }

  .archive-link {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.75rem 1.5rem;
    border: 2px solid var(--color-border);
    background: transparent;
    color: var(--color-text-secondary);
    font-size: 0.875rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.05em;
    cursor: pointer;
    transition: all 0.3s ease;
    font-family: inherit;
    text-decoration: none;
  }

  .archive-link:hover {
    border-color: #243788;
    color: #243788;
  }

  /* Responsive Design */
  @media (max-width: 1200px) {
    .newsletter-layout {
      grid-template-columns: 320px 1fr;
      gap: 3rem;
    }
  }

  @media (max-width: 1024px) {
    .newsletter-layout {
      grid-template-columns: 1fr;
      gap: 2rem;
    }

    .newsletter-hero {
      position: static;
    }

    .quick-actions-sidebar {
      position: relative;
      right: auto;
      top: auto;
      transform: none;
      margin-bottom: 2rem;
      flex-direction: row;
      justify-content: center;
    }

    .actions-content {
      flex-direction: row;
      gap: 1rem;
    }
  }

  @media (max-width: 768px) {
    .newsletter-grid {
      grid-template-columns: 1fr;
    }

    .newsletter-card {
      flex-direction: column;
      text-align: center;
      gap: 1rem;
    }

    .card-image {
      width: 100%;
      max-width: 200px;
      height: 120px;
    }

    .card-header {
      justify-content: center;
    }
  }

  /* Loading States */
  .subscribe-button.loading {
    position: relative;
    color: transparent;
  }

  .subscribe-button.loading::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    width: 20px;
    height: 20px;
    margin: -10px 0 0 -10px;
    border: 2px solid transparent;
    border-top: 2px solid currentColor;
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  @keyframes spin {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  }

  /* Form Messages */
  .form-message {
    padding: 0.75rem 1rem;
    font-size: 0.875rem;
    font-weight: 500;
    margin-top: 1rem;
    text-align: center;
  }

  .form-message.success {
    background: #dcfce7;
    color: #166534;
    border: 1px solid #bbf7d0;
  }

  .form-message.error {
    background: #fef2f2;
    color: #dc2626;
    border: 1px solid #fecaca;
  }

  :global(.dark) .form-message.success {
    background: rgba(34, 197, 94, 0.1);
    color: #4ade80;
    border-color: rgba(34, 197, 94, 0.2);
  }

  :global(.dark) .form-message.error {
    background: rgba(239, 68, 68, 0.1);
    color: #f87171;
    border-color: rgba(239, 68, 68, 0.2);
  }

  /* Gradient text animation for hero */
  @keyframes gradient {
    0% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
    100% {
      background-position: 0% 50%;
    }
  }

  .bg-gradient-to-r.bg-clip-text {
    background-size: 200% 200%;
    animation: gradient 3s ease-in-out infinite;
  }
</style>

<script>
  // Type declarations for better TypeScript support
declare global {
  interface Window {
    gtag?: (...args: any[]) => void;
  }
}

  document.addEventListener("DOMContentLoaded", () => {
    // Get all checkboxes with proper typing
    const newsletterCheckboxes = document.querySelectorAll(
      'input[name="newsletters"]'
    ) as NodeListOf<HTMLInputElement>;
    const additionalCheckboxes = document.querySelectorAll(
      'input[name="additional"]'
    ) as NodeListOf<HTMLInputElement>;
    const allCheckboxes = [...newsletterCheckboxes, ...additionalCheckboxes];

    // Get action buttons with proper typing
    const selectAllBtn = document.getElementById(
      "select-all"
    ) as HTMLButtonElement | null;
    const clearAllBtn = document.getElementById(
      "clear-all"
    ) as HTMLButtonElement | null;

    // Get summary elements
    const summarySection = document.getElementById(
      "selected-summary"
    ) as HTMLElement | null;
    const summaryList = document.getElementById(
      "summary-list"
    ) as HTMLElement | null;
    const selectionCount = document.getElementById(
      "selection-count"
    ) as HTMLElement | null;

    // Get quick actions sidebar for auto-hide functionality
    const quickActions = document.getElementById(
      "quick-actions"
    ) as HTMLElement | null;
    let lastScrollY = window.scrollY;
    let scrollTimeout: number;

    // Auto-hide quick actions on scroll
    window.addEventListener("scroll", () => {
      if (window.innerWidth <= 1024) return; // Only on desktop

      const currentScrollY = window.scrollY;

      // Clear existing timeout
      clearTimeout(scrollTimeout);

      if (currentScrollY > lastScrollY && currentScrollY > 100) {
        // Scrolling down - hide sidebar
        quickActions?.classList.add("hidden");
      } else {
        // Scrolling up - show sidebar
        quickActions?.classList.remove("hidden");
      }

      // Show sidebar again after user stops scrolling
      scrollTimeout = window.setTimeout(() => {
        quickActions?.classList.remove("hidden");
      }, 2000);

      lastScrollY = currentScrollY;
    });

    // Make cards clickable
    const newsletterCards = document.querySelectorAll(".newsletter-card");

    newsletterCards.forEach((card) => {
      card.addEventListener("click", (e) => {
        const target = e.target as HTMLElement;
        // Don't trigger if clicking directly on checkbox or label
        if (target.tagName === "INPUT" || target.tagName === "LABEL") {
          return;
        }

        const checkbox = card.querySelector(
          'input[type="checkbox"]'
        ) as HTMLInputElement | null;
        if (checkbox) {
          checkbox.checked = !checkbox.checked;
          updateSummary();
        }
      });
    });

    // Handle checkbox changes
    allCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", updateSummary);
    });

    // Select All functionality
    selectAllBtn?.addEventListener("click", () => {
      allCheckboxes.forEach((checkbox) => {
        checkbox.checked = true;
      });
      updateSummary();
    });

    // Clear All functionality
    clearAllBtn?.addEventListener("click", () => {
      allCheckboxes.forEach((checkbox) => {
        checkbox.checked = false;
      });
      updateSummary();
    });

    // Update summary based on selections
    function updateSummary() {
      const selectedNewsletters = Array.from(newsletterCheckboxes)
        .filter((cb) => cb.checked)
        .map((cb) => cb.value);

      const selectedAdditional = Array.from(additionalCheckboxes)
        .filter((cb) => cb.checked)
        .map((cb) => {
          return cb.value === "updates" ? "Updates & Offers" : "Events";
        });

      const allSelected = [...selectedNewsletters, ...selectedAdditional];
      const selectedCount = allSelected.length;

      // Update selection count in sidebar
      if (selectionCount) {
        selectionCount.textContent = selectedCount.toString();
      }

      // Update summary in hero
      if (allSelected.length > 0) {
        if (summaryList) {
          summaryList.textContent = allSelected.join(", ");
        }
        if (summarySection) {
          summarySection.style.display = "block";
        }
      } else {
        if (summarySection) {
          summarySection.style.display = "none";
        }
      }

      // Update button states
      const hasSelections = selectedCount > 0;
      const allCheckboxesSelected = allCheckboxes.every((cb) => cb.checked);

      if (selectAllBtn) {
        selectAllBtn.disabled = allCheckboxesSelected;
        const btnText = selectAllBtn.querySelector("span");
        if (btnText) {
          btnText.textContent = allCheckboxesSelected ? "Done" : "All";
        }
      }

      if (clearAllBtn) {
        clearAllBtn.disabled = !hasSelections;
      }
    }

    // Enhanced ConvertKit form submission
    const form = document.getElementById(
      "newsletter-signup"
    ) as HTMLFormElement | null;
    if (form) {
      form.addEventListener("submit", async (e) => {
        e.preventDefault();

        const emailInput = document.getElementById(
          "email"
        ) as HTMLInputElement | null;
        const email = emailInput?.value.trim() || "";

        const selectedNewsletters = Array.from(newsletterCheckboxes)
          .filter((cb) => cb.checked)
          .map((cb) => cb.value);
        const selectedAdditional = Array.from(additionalCheckboxes)
          .filter((cb) => cb.checked)
          .map((cb) => cb.value);

        // Validate email
        if (!email) {
          showMessage("Please enter your email address", "error");
          return;
        }

        if (!isValidEmail(email)) {
          showMessage("Please enter a valid email address", "error");
          return;
        }

        // Show loading state
        const submitButton = form.querySelector(
          ".subscribe-button"
        ) as HTMLButtonElement | null;
        const originalText = submitButton?.textContent || "";

        if (submitButton) {
          submitButton.classList.add("loading");
          submitButton.disabled = true;
        }

        try {
          // Create form data for ConvertKit
          const formData = new FormData();
          formData.append("email_address", email);

          // Add selected newsletters as tags or custom fields
          if (selectedNewsletters.length > 0 || selectedAdditional.length > 0) {
            const allSelections = [
              ...selectedNewsletters,
              ...selectedAdditional,
            ];
            formData.append("tags", allSelections.join(","));
          }

          // Submit to ConvertKit
          const response = await fetch(form.action, {
            method: "POST",
            body: formData,
            headers: {
              Accept: "application/json",
            },
          });

          if (response.ok) {
            showMessage(
              "Successfully subscribed! Check your email for confirmation.",
              "success"
            );
            form.reset();
            updateSummary();

            // Track successful subscription
            if (typeof window.gtag !== "undefined") {
              window.gtag("event", "newsletter_subscribe", {
                event_category: "Newsletter",
                event_label: "ConvertKit Form",
                value: selectedNewsletters.length + selectedAdditional.length,
              });
            }
          } else {
            throw new Error(`HTTP ${response.status}: ${response.statusText}`);
          }
        } catch (error) {
          console.error("Newsletter subscription error:", error);
          showMessage("Something went wrong. Please try again.", "error");
        } finally {
          // Reset button state
          if (submitButton) {
            submitButton.classList.remove("loading");
            submitButton.disabled = false;
            submitButton.textContent = originalText;
          }
        }
      });
    }

    // Email validation helper
    function isValidEmail(email: string): boolean {
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      return emailRegex.test(email);
    }

    // Message display helper
    function showMessage(message: string, type: string = "info") {
      // Remove existing messages
      const existingMessage = document.querySelector(".form-message");
      if (existingMessage) {
        existingMessage.remove();
      }

      // Create new message
      const messageEl = document.createElement("div");
      messageEl.className = `form-message ${type}`;
      messageEl.textContent = message;

      // Insert after form
      const form = document.getElementById("newsletter-signup");
      if (form && form.parentNode) {
        form.parentNode.insertBefore(messageEl, form.nextSibling);
      }

      // Auto-remove after 5 seconds
      setTimeout(() => {
        if (messageEl.parentNode) {
          messageEl.remove();
        }
      }, 5000);
    }

    // Initialize fade-in animations
    const observerOptions = {
      threshold: 0.1,
      rootMargin: "0px 0px -50px 0px",
    };

    const observer = new IntersectionObserver((entries) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          const element = entry.target as HTMLElement;
          element.style.opacity = "1";
          element.style.transform = "translateY(0)";
          observer.unobserve(entry.target);
        }
      });
    }, observerOptions);

    // Add fade-in animation to newsletter cards
    const cards = document.querySelectorAll(".newsletter-card");
    cards.forEach((card, index) => {
      const element = card as HTMLElement;
      element.style.opacity = "0";
      element.style.transform = "translateY(20px)";
      element.style.transition = `opacity 0.6s ease ${index * 0.1}s, transform 0.6s ease ${index * 0.1}s`;
      observer.observe(card);
    });

    // Keyboard navigation support
    document.addEventListener("keydown", (e) => {
      if (e.key === "Enter" || e.key === " ") {
        const focusedCard = (document.activeElement as HTMLElement)?.closest(
          ".newsletter-card"
        );
        if (focusedCard) {
          e.preventDefault();
          const checkbox = focusedCard.querySelector(
            'input[type="checkbox"]'
          ) as HTMLInputElement | null;
          if (checkbox) {
            checkbox.checked = !checkbox.checked;
            updateSummary();
          }
        }
      }
    });

    // Add keyboard focus support to cards
    cards.forEach((card) => {
      card.setAttribute("tabindex", "0");
      card.setAttribute("role", "button");
      const cardTitle = card.querySelector(".card-title");
      if (cardTitle) {
        card.setAttribute(
          "aria-label",
          `Toggle ${cardTitle.textContent} newsletter`
        );
      }
    });

    // Initialize summary on page load
    updateSummary();

    // Analytics tracking
    function trackNewsletterInteraction(
      action: string,
      newsletter: string | null = null
    ) {
      if (typeof window.gtag !== "undefined") {
        window.gtag("event", "newsletter_interaction", {
          action: action,
          newsletter: newsletter,
          timestamp: Date.now(),
        });
      }
      
    }

    // Track newsletter selections
    allCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", (e) => {
        const target = e.target as HTMLInputElement;
        const action = target.checked ? "select" : "deselect";
        trackNewsletterInteraction(action, target.value);
      });
    });
  });
</script>
