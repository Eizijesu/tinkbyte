---
// src/pages/admin/newsletters.astro - REAL DATABASE VERSION
import AdminLayout from "../../layouts/AdminLayout.astro";
---

<AdminLayout title="Newsletter Management - TinkByte Admin">
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-spinner">
      <div class="spinner-square"></div>
      <span>Loading newsletter data...</span>
    </div>
  </div>

  <!-- Error Banner -->
  <div id="error-banner" class="error-banner" style="display: none;">
    <i class="fas fa-exclamation-triangle"></i>
    <span id="error-message">An error occurred</span>
    <button class="retry-btn" id="retry-btn">
      <i class="fas fa-redo"></i>
      Retry
    </button>
  </div>

  <div class="newsletters-container">
    <!-- Newsletter Header -->
    <div class="newsletters-header">
      <div class="header-content">
        <h1>Newsletter Management</h1>
        <p>Manage your newsletter campaigns and subscriber engagement</p>
      </div>
      <div class="header-actions">
        <button class="create-newsletter-btn" id="create-newsletter-btn">
          <span class="btn-spinner" id="create-spinner" style="display: none;">
            <div class="spinner-square small"></div>
          </span>
          <i class="fas fa-plus"></i>
          Create Newsletter
        </button>
        <button class="export-subscribers-btn" id="export-subscribers-btn">
          <span class="btn-spinner" id="export-spinner" style="display: none;">
            <div class="spinner-square small"></div>
          </span>
          <i class="fas fa-download"></i>
          Export Subscribers
        </button>
        <button class="email-builder-btn" id="email-builder-btn">
          <i class="fas fa-paint-brush"></i>
          Email Builder
        </button>
      </div>
    </div>

    <!-- Newsletter Stats - Horizontal Layout -->
    <div class="newsletter-stats-grid">
      <div class="stat-card primary">
        <div class="stat-icon">
          <i class="fas fa-envelope"></i>
        </div>
        <div class="stat-content">
          <div class="stat-number" id="total-subscribers">-</div>
          <div class="stat-label">Total Subscribers</div>
          <div class="stat-action">
            <span class="stat-change positive" id="new-this-month"
              >Loading...</span
            >
          </div>
        </div>
      </div>

      <div class="stat-card info">
        <div class="stat-icon">
          <i class="fas fa-users"></i>
        </div>
        <div class="stat-content">
          <div class="stat-number" id="active-subscribers">-</div>
          <div class="stat-label">Active Subscribers</div>
          <div class="stat-action">
            <span class="stat-change neutral" id="active-rate">Loading...</span>
          </div>
        </div>
      </div>

      <div class="stat-card success">
        <div class="stat-icon">
          <i class="fas fa-calendar-week"></i>
        </div>
        <div class="stat-content">
          <div class="stat-number" id="weekly-subscribers">-</div>
          <div class="stat-label">Weekly Newsletter</div>
          <div class="stat-action">
            <span class="stat-change neutral">Most popular</span>
          </div>
        </div>
      </div>

      <div class="stat-card warning">
        <div class="stat-icon">
          <i class="fas fa-newspaper"></i>
        </div>
        <div class="stat-content">
          <div class="stat-number" id="total-newsletters">-</div>
          <div class="stat-label">Total Newsletters</div>
          <div class="stat-action">
            <span class="stat-change neutral">Available campaigns</span>
          </div>
        </div>
      </div>
    </div>

    <!-- Tab Navigation -->
    <div class="tab-navigation">
      <button class="tab-button active" data-tab="newsletters">
        <i class="fas fa-newspaper"></i>
        <span>Newsletters</span>
        <span class="tab-count" id="newsletters-count">(0)</span>
      </button>
      <button class="tab-button" data-tab="subscribers">
        <i class="fas fa-users"></i>
        <span>Subscribers</span>
        <span class="tab-count" id="subscribers-count">(0)</span>
      </button>
      <button class="tab-button" data-tab="campaigns">
        <i class="fas fa-paper-plane"></i>
        <span>Email Campaigns</span>
        <span class="tab-count" id="campaigns-count">(0)</span>
      </button>
      <button class="tab-button" data-tab="analytics">
        <i class="fas fa-chart-line"></i>
        <span>Analytics</span>
        <span class="tab-count"></span>
      </button>
      <button class="tab-button" data-tab="settings">
        <i class="fas fa-cog"></i>
        <span>Settings</span>
        <span class="tab-count"></span>
      </button>
    </div>

    <!-- Tab Content Container -->
    <div class="tab-content-container">
      <!-- Newsletters Tab -->
      <div id="newsletters-tab" class="tab-content active">
        <div class="tab-header">
          <h2>Newsletter Campaigns</h2>
          <div class="tab-actions">
            <select class="filter-select" id="newsletter-filter">
              <option value="">All Newsletters</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>
          </div>
        </div>

        <div class="newsletters-grid" id="newsletters-grid">
          <!-- Content will be loaded dynamically -->
          <div class="empty-state">
            <i class="fas fa-envelope-open"></i>
            <h3>Loading newsletters...</h3>
            <p>Please wait while we load your newsletter campaigns</p>
          </div>
        </div>
      </div>

      <!-- Subscribers Tab -->
      <div id="subscribers-tab" class="tab-content">
        <div class="tab-header">
          <h2>Newsletter Subscribers</h2>
          <div class="tab-actions">
            <div class="search-container">
              <i class="fas fa-search"></i>
              <input
                type="text"
                placeholder="Search subscribers..."
                id="subscriber-search"
              />
            </div>
            <select class="filter-select" id="subscriber-filter">
              <option value="">All Subscribers</option>
              <option value="weekly">Weekly Newsletter</option>
              <option value="monthly">Monthly Newsletter</option>
              <option value="daily">Daily Newsletter</option>
            </select>
          </div>
        </div>

        <div class="subscribers-table-container">
          <table class="subscribers-table">
            <thead>
              <tr>
                <th><input type="checkbox" id="select-all-subscribers" /></th>
                <th>Subscriber</th>
                <th>Email</th>
                <th>Newsletter Type</th>
                <th>Subscribed Date</th>
                <th>Status</th>
                <th>Actions</th>
              </tr>
            </thead>
            <tbody id="subscribers-table-body">
              <tr>
                <td colspan="7" class="empty-message">
                  <div class="empty-state-inline">
                    <i class="fas fa-envelope-open"></i>
                    <span>Loading subscribers...</span>
                  </div>
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        <!-- Bulk Actions for Subscribers -->
        <div
          class="bulk-actions-bar"
          id="subscriber-bulk-actions"
          style="display: none;"
        >
          <div class="bulk-info">
            <span id="selected-subscribers-count">0</span> subscribers selected
          </div>
          <div class="bulk-buttons">
            <button class="bulk-btn export-selected">
              <i class="fas fa-download"></i>
              Export Selected
            </button>
            <button class="bulk-btn unsubscribe-selected">
              <i class="fas fa-user-minus"></i>
              Unsubscribe Selected
            </button>
            <button class="bulk-btn delete-selected">
              <i class="fas fa-trash"></i>
              Delete Selected
            </button>
          </div>
        </div>
      </div>

      <!-- Email Campaigns Tab -->
      <div id="campaigns-tab" class="tab-content">
        <div class="tab-header">
          <h2>Email Campaigns</h2>
          <div class="tab-actions">
            <button class="create-campaign-btn" id="create-campaign-btn">
              <i class="fas fa-plus"></i>
              Create Campaign
            </button>
            <button class="email-builder-btn" id="launch-builder-btn">
              <i class="fas fa-paint-brush"></i>
              Email Builder
            </button>
          </div>
        </div>

        <div class="campaigns-grid" id="campaigns-grid">
          <div class="empty-state">
            <i class="fas fa-paper-plane"></i>
            <h3>No email campaigns yet</h3>
            <p>Create your first responsive email campaign using our builder</p>
            <button
              class="create-first-campaign-btn"
              id="create-first-campaign"
            >
              <i class="fas fa-plus"></i>
              Create First Campaign
            </button>
          </div>
        </div>
      </div>

      <!-- Analytics Tab -->
      <div id="analytics-tab" class="tab-content">
        <div class="analytics-section">
          <h2>Newsletter Analytics</h2>
          <div class="analytics-grid">
            <div class="analytics-card">
              <h3>Subscription Growth</h3>
              <div class="chart-placeholder">
                <div class="chart-mock">
                  <div class="chart-bars">
                    <div class="bar" style="height: 60%;"></div>
                    <div class="bar" style="height: 80%;"></div>
                    <div class="bar" style="height: 45%;"></div>
                    <div class="bar" style="height: 90%;"></div>
                    <div class="bar" style="height: 75%;"></div>
                    <div class="bar" style="height: 95%;"></div>
                    <div class="bar" style="height: 85%;"></div>
                  </div>
                  <div class="chart-labels">
                    <span>Jan</span>
                    <span>Feb</span>
                    <span>Mar</span>
                    <span>Apr</span>
                    <span>May</span>
                    <span>Jun</span>
                    <span>Jul</span>
                  </div>
                </div>
              </div>
            </div>

            <div class="analytics-card">
              <h3>Engagement Metrics</h3>
              <div class="metrics-list" id="engagement-metrics">
                <div class="metric-item">
                  <span class="metric-label">Open Rate</span>
                  <span class="metric-value">Loading...</span>
                </div>
                <div class="metric-item">
                  <span class="metric-label">Click Rate</span>
                  <span class="metric-value">Loading...</span>
                </div>
                <div class="metric-item">
                  <span class="metric-label">Unsubscribe Rate</span>
                  <span class="metric-value">Loading...</span>
                </div>
                <div class="metric-item">
                  <span class="metric-label">Bounce Rate</span>
                  <span class="metric-value">Loading...</span>
                </div>
              </div>
            </div>

            <div class="analytics-card">
              <h3>Top Performing Content</h3>
              <div class="content-list" id="top-content">
                <div class="loading-state">
                  <i class="fas fa-spinner fa-spin"></i>
                  <span>Loading performance data...</span>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Settings Tab -->
      <div id="settings-tab" class="tab-content">
        <div class="settings-section">
          <h2>Newsletter Settings</h2>
          <form class="newsletter-settings-form" id="newsletter-settings-form">
            <div class="settings-group">
              <h3>Email Configuration</h3>
              <div class="form-group">
                <label for="sender-name">Sender Name</label>
                <input
                  type="text"
                  id="sender-name"
                  name="sender_name"
                  placeholder="TinkByte Team"
                />
              </div>
              <div class="form-group">
                <label for="sender-email">Sender Email</label>
                <input
                  type="email"
                  id="sender-email"
                  name="sender_email"
                  placeholder="newsletter@tinkbyte.com"
                />
              </div>
              <div class="form-group">
                <label for="reply-to">Reply-To Email</label>
                <input
                  type="email"
                  id="reply-to"
                  name="reply_to"
                  placeholder="hello@tinkbyte.com"
                />
              </div>
            </div>

            <div class="settings-group">
              <h3>Default Settings</h3>
              <div class="form-group">
                <label for="default-frequency">Default Frequency</label>
                <select id="default-frequency" name="default_frequency">
                  <option value="weekly">Weekly</option>
                  <option value="monthly">Monthly</option>
                  <option value="daily">Daily</option>
                </select>
              </div>
              <div class="form-group">
                <label for="welcome-email">Welcome Email Template</label>
                <textarea
                  id="welcome-email"
                  name="welcome_email"
                  rows="4"
                  placeholder="Welcome to our newsletter..."></textarea>
              </div>
            </div>

            <div class="settings-group">
              <h3>Integration Settings</h3>
              <div class="form-group">
                <label for="convertkit-api">ConvertKit API Key</label>
                <input
                  type="password"
                  id="convertkit-api"
                  name="convertkit_api"
                  placeholder="Enter your ConvertKit API key"
                />
                <small class="form-help"
                  >Optional: Connect with ConvertKit for advanced email
                  automation</small
                >
              </div>
              <div class="checkbox-group">
                <label class="checkbox-label">
                  <input
                    type="checkbox"
                    id="double-optin"
                    name="double_optin"
                  />
                  <span>Enable Double Opt-in</span>
                  <small
                    >Require subscribers to confirm their email address</small
                  >
                </label>
                <label class="checkbox-label">
                  <input
                    type="checkbox"
                    id="auto-welcome"
                    name="auto_welcome"
                    checked
                  />
                  <span>Send Welcome Email</span>
                  <small
                    >Automatically send welcome email to new subscribers</small
                  >
                </label>
              </div>
            </div>

            <div class="form-actions">
              <button type="submit" class="save-btn">
                <i class="fas fa-save"></i>
                Save Settings
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Create/Edit Newsletter Modal -->
    <div id="newsletter-modal" class="modal" style="display: none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3 id="newsletter-modal-title">Create Newsletter</h3>
          <button class="modal-close" id="newsletter-modal-close">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <form id="newsletter-form" class="newsletter-form">
            <div class="form-group">
              <label for="newsletter-name">Newsletter Name *</label>
              <input
                type="text"
                id="newsletter-name"
                name="name"
                required
                placeholder="Weekly Tech Updates"
              />
            </div>

            <div class="form-group">
              <label for="newsletter-slug">URL Slug *</label>
              <input
                type="text"
                id="newsletter-slug"
                name="slug"
                required
                placeholder="weekly-tech-updates"
              />
              <small class="form-help">Used in URLs and identification</small>
            </div>

            <div class="form-group">
              <label for="newsletter-description">Description</label>
              <textarea
                id="newsletter-description"
                name="description"
                rows="3"
                placeholder="Weekly updates on the latest tech trends..."
              ></textarea>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label for="newsletter-frequency">Frequency</label>
                <select id="newsletter-frequency" name="frequency">
                  <option value="weekly">Weekly</option>
                  <option value="monthly">Monthly</option>
                  <option value="daily">Daily</option>
                </select>
              </div>

              <div class="form-group">
                <label for="newsletter-day">Day of Week</label>
                <select id="newsletter-day" name="day_of_week">
                  <option value="">Any Day</option>
                  <option value="monday">Monday</option>
                  <option value="tuesday">Tuesday</option>
                  <option value="wednesday">Wednesday</option>
                  <option value="thursday">Thursday</option>
                  <option value="friday">Friday</option>
                  <option value="saturday">Saturday</option>
                  <option value="sunday">Sunday</option>
                </select>
              </div>

              <div class="form-group">
                <label for="newsletter-sort">Sort Order</label>
                <input
                  type="number"
                  id="newsletter-sort"
                  name="sort_order"
                  min="0"
                  value="0"
                />
              </div>
            </div>

            <div class="form-group">
              <label for="newsletter-image">Header Image URL</label>
              <input
                type="url"
                id="newsletter-image"
                name="image_url"
                placeholder="https://example.com/image.jpg"
              />
            </div>

            <div class="checkbox-group">
              <label class="checkbox-label">
                <input
                  type="checkbox"
                  id="newsletter-active"
                  name="is_active"
                  checked
                />
                <span>Active Newsletter</span>
                <small>Subscribers can sign up for this newsletter</small>
              </label>
            </div>

            <div class="form-actions">
              <button type="button" class="cancel-btn" id="newsletter-cancel">
                Cancel
              </button>
              <button type="submit" class="save-btn" id="newsletter-save">
                <span
                  class="btn-spinner"
                  id="save-spinner"
                  style="display: none;"
                >
                  <div class="spinner-square small"></div>
                </span>
                <i class="fas fa-save"></i>
                Save Newsletter
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>

    <!-- Email Builder Modal -->
    <div
      id="email-builder-modal"
      class="modal email-builder-modal"
      style="display: none;"
    >
      <div class="modal-content email-builder-content">
        <div class="modal-header">
          <h3>Responsive Email Builder</h3>
          <button class="modal-close" id="email-builder-close">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="email-builder-container">
          <div class="builder-sidebar">
            <h4>Components</h4>
            <div class="component-list">
              <div class="component-item" data-component="header">
                <i class="fas fa-heading"></i>
                <span>Header</span>
              </div>
              <div class="component-item" data-component="text">
                <i class="fas fa-paragraph"></i>
                <span>Text Block</span>
              </div>
              <div class="component-item" data-component="image">
                <i class="fas fa-image"></i>
                <span>Image</span>
              </div>
              <div class="component-item" data-component="button">
                <i class="fas fa-square"></i>
                <span>Button</span>
              </div>
              <div class="component-item" data-component="divider">
                <i class="fas fa-minus"></i>
                <span>Divider</span>
              </div>
              <div class="component-item" data-component="social">
                <i class="fas fa-share-alt"></i>
                <span>Social Links</span>
              </div>
            </div>
          </div>
          <div class="builder-canvas">
            <div class="canvas-header">
              <div class="device-preview">
                <button class="device-btn active" data-device="desktop">
                  <i class="fas fa-desktop"></i>
                </button>
                <button class="device-btn" data-device="mobile">
                  <i class="fas fa-mobile-alt"></i>
                </button>
              </div>
              <div class="canvas-actions">
                <button class="preview-btn" id="preview-email">
                  <i class="fas fa-eye"></i>
                  Preview
                </button>
                <button class="save-template-btn" id="save-template">
                  <i class="fas fa-save"></i>
                  Save Template
                </button>
              </div>
            </div>
            <div class="email-canvas" id="email-canvas">
              <div class="email-container">
                <div class="drop-zone">
                  <i class="fas fa-plus-circle"></i>
                  <p>Drag components here to build your email</p>
                </div>
              </div>
            </div>
          </div>
          <div class="builder-properties">
            <h4>Properties</h4>
            <div class="properties-content" id="properties-content">
              <p>Select a component to edit its properties</p>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { adminAPIManager } from "../../lib/admin-api.js";
  import { AuthState } from "../../lib/supabase.js";

  // TypeScript interfaces remain the same...
  interface Newsletter {
    id: string;
    name: string;
    slug: string;
    description?: string;
    frequency: string;
    day_of_week?: string;
    is_active: boolean;
    subscriber_count?: number;
    sort_order?: number;
    image_url?: string;
    created_at: string;
  }

  interface Subscription {
    id: string;
    email: string;
    newsletter_type: string;
    is_active: boolean;
    subscribed_at: string;
    user_id?: string | null;
    convertkit_subscriber_id?: string;
    profile?: {
      display_name?: string;
      avatar_type?: string;
      avatar_preset_id?: number;
      avatar_url?: string;
      created_at?: string;
    } | null;
  }

  interface DashboardStats {
    totalNewsletters: number;
    totalSubscribers: number;
    activeSubscribers: number;
    weeklySubscribers: number;
    monthlySubscribers: number;
    newThisMonth: number;
  }

  let newsletters: Newsletter[] = [];
  let subscribers: Subscription[] = [];
  let currentEditingNewsletterId: string | null = null;
  let currentPage = 1;
  let isLoading = false;

  // Initialize newsletter management
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      
      await initializeNewsletterManagement();
    } catch (error) {
      console.error("Newsletter management initialization error:", error);
      showError(
        "Failed to initialize newsletter management. Please refresh and try again."
      );
    }
  });

  async function initializeNewsletterManagement() {
    showLoading(true);

    try {
      // Initialize singleton managers
      await adminAPIManager.initialize();

      const authState = AuthState.getInstance();
      await authState.initialize();

      
      const connectionTest = await adminAPIManager.testConnection();
      if (!connectionTest.success) {
        throw new Error(connectionTest.error || "Connection test failed");
      }

      
      await Promise.all([
        loadNewslettersFromDB(),
        loadSubscribersFromDB(),
        loadDashboardStatsFromDB(),
      ]);

      setupEventListeners();
      showLoading(false);
      
    } catch (error) {
      console.error("❌ Initialization error:", error);
      showError(error.message || "Failed to load newsletter data");
      showLoading(false);
    }
  }

  async function loadNewslettersFromDB() {
    try {
      

      // Use singleton manager
      const response = await adminAPIManager.getNewsletters();

      if (response.success && response.data) {
        newsletters = response.data;
        renderNewsletters();
        updateNewsletterCount();
        console.log(
          `✅ Loaded ${newsletters.length} newsletters from database`
        );
      } else {
        throw new Error(response.error || "Failed to load newsletters");
      }
    } catch (error) {
      console.error("❌ Load newsletters error:", error);
      // Fallback to empty array
      newsletters = [];
      renderNewsletters();
      updateNewsletterCount();
      showNotification("Failed to load newsletters from database", "error");
    }
  }

  async function loadSubscribersFromDB(page = 1, limit = 50) {
    try {
      

      const searchInput = document.getElementById(
        "subscriber-search"
      ) as HTMLInputElement;
      const filterSelect = document.getElementById(
        "subscriber-filter"
      ) as HTMLSelectElement;

      // Use singleton manager
      const response = await adminAPIManager.getNewsletterSubscribers({
        page,
        limit,
        search: searchInput?.value || "",
        status: filterSelect?.value || "",
      });

      if (response.success && response.data) {
        if (page === 1) {
          subscribers = response.data;
        } else {
          subscribers = [...subscribers, ...response.data];
        }
        renderSubscribers();
        updateSubscriberCount();
        console.log(
          `✅ Loaded ${subscribers.length} subscribers from database`
        );
      } else {
        throw new Error(response.error || "Failed to load subscribers");
      }
    } catch (error) {
      console.error("❌ Load subscribers error:", error);
      // Fallback to empty array
      subscribers = [];
      renderSubscribers();
      updateSubscriberCount();
      showNotification("Failed to load subscribers from database", "error");
    }
  }

  async function loadDashboardStatsFromDB() {
    try {
      

      // Get real stats from database using singleton manager
      const [newslettersResponse, subscribersResponse] = await Promise.all([
        adminAPIManager.getNewsletters(),
        adminAPIManager.getNewsletterSubscribers({ limit: 1000 }),
      ]);

      let stats: DashboardStats = {
        totalNewsletters: 0,
        totalSubscribers: 0,
        activeSubscribers: 0,
        weeklySubscribers: 0,
        monthlySubscribers: 0,
        newThisMonth: 0,
      };

      if (newslettersResponse.success && newslettersResponse.data) {
        stats.totalNewsletters = newslettersResponse.data.length;
      }

      if (subscribersResponse.success && subscribersResponse.data) {
        const allSubscribers = subscribersResponse.data;
        stats.totalSubscribers = allSubscribers.length;
        stats.activeSubscribers = allSubscribers.filter(
          (s) => s.is_active
        ).length;
        stats.weeklySubscribers = allSubscribers.filter(
          (s) => s.newsletter_type === "weekly" && s.is_active
        ).length;
        stats.monthlySubscribers = allSubscribers.filter(
          (s) => s.newsletter_type === "monthly" && s.is_active
        ).length;

        // Calculate new subscribers this month
        const monthAgo = new Date();
        monthAgo.setMonth(monthAgo.getMonth() - 1);
        stats.newThisMonth = allSubscribers.filter((s) => {
          const subDate = new Date(s.subscribed_at);
          return subDate > monthAgo && s.is_active;
        }).length;
      }

      updateDashboardStats(stats);
      
    } catch (error) {
      console.error("❌ Load dashboard stats error:", error);
      // Fallback stats
      const fallbackStats: DashboardStats = {
        totalNewsletters: newsletters.length,
        totalSubscribers: 0,
        activeSubscribers: 0,
        weeklySubscribers: 0,
        monthlySubscribers: 0,
        newThisMonth: 0,
      };
      updateDashboardStats(fallbackStats);
      showNotification("Using fallback stats data", "warning");
    }
  }

  function renderNewsletters() {
    const newslettersGrid = document.getElementById("newsletters-grid");
    if (!newslettersGrid) return;

    if (newsletters.length === 0) {
      newslettersGrid.innerHTML = `
        <div class="empty-state">
          <i class="fas fa-envelope-open"></i>
          <h3>No newsletters found</h3>
          <p>Create your first newsletter to start engaging with your community</p>
          <button class="create-first-newsletter-btn" id="create-first-newsletter">
            <i class="fas fa-plus"></i>
            Create First Newsletter
          </button>
        </div>
      `;

      const createFirstBtn = document.getElementById(
        "create-first-newsletter"
      ) as HTMLButtonElement;
      createFirstBtn?.addEventListener("click", () => openNewsletterModal());
      return;
    }

    newslettersGrid.innerHTML = newsletters
      .map(
        (newsletter) => `
      <div class="newsletter-card" data-newsletter-id="${newsletter.id}">
        <div class="newsletter-header">
          <div class="newsletter-info">
            <h3 class="newsletter-name">${newsletter.name}</h3>
            <p class="newsletter-description">${newsletter.description || "No description"}</p>
            <div class="newsletter-meta">
              <span class="newsletter-frequency">
                <i class="fas fa-clock"></i>
                ${newsletter.frequency.charAt(0).toUpperCase() + newsletter.frequency.slice(1)}
              </span>
              ${
                newsletter.day_of_week
                  ? `
                <span class="newsletter-day">
                  <i class="fas fa-calendar"></i>
                  ${newsletter.day_of_week.charAt(0).toUpperCase() + newsletter.day_of_week.slice(1)}
                </span>
              `
                  : ""
              }
            </div>
          </div>
          <div class="newsletter-status">
            <span class="status-badge ${newsletter.is_active ? "active" : "inactive"}">
              ${newsletter.is_active ? "Active" : "Inactive"}
            </span>
          </div>
        </div>

        <div class="newsletter-stats-mini">
          <div class="mini-stat">
            <span class="mini-stat-number">${newsletter.subscriber_count || 0}</span>
            <span class="mini-stat-label">Subscribers</span>
          </div>
          <div class="mini-stat">
            <span class="mini-stat-number">${newsletter.sort_order || 0}</span>
            <span class="mini-stat-label">Sort Order</span>
          </div>
        </div>

        <div class="newsletter-actions">
          <button class="action-btn edit" data-action="edit" data-newsletter-id="${newsletter.id}">
            <i class="fas fa-edit"></i>
            Edit
          </button>
          <button class="action-btn subscribers" data-action="subscribers" data-newsletter-id="${newsletter.id}">
            <i class="fas fa-users"></i>
            Subscribers
          </button>
          <button class="action-btn email-builder" data-action="build-email" data-newsletter-id="${newsletter.id}">
            <i class="fas fa-paint-brush"></i>
            Email Builder
          </button>
          ${
            newsletter.is_active
              ? `
            <button class="action-btn deactivate" data-action="deactivate" data-newsletter-id="${newsletter.id}">
              <i class="fas fa-pause"></i>
              Deactivate
            </button>
          `
              : `
            <button class="action-btn activate" data-action="activate" data-newsletter-id="${newsletter.id}">
              <i class="fas fa-play"></i>
              Activate
            </button>
          `
          }
        </div>
      </div>
    `
      )
      .join("");

    // Attach event listeners
    const actionButtons = newslettersGrid.querySelectorAll(
      ".action-btn"
    ) as NodeListOf<HTMLButtonElement>;
    actionButtons.forEach((button) => {
      button.addEventListener("click", handleNewsletterAction);
    });
  }

  function renderSubscribers() {
    const tableBody = document.getElementById("subscribers-table-body");
    if (!tableBody) return;

    if (subscribers.length === 0) {
      tableBody.innerHTML = `
      <tr>
        <td colspan="7" class="empty-message">
          <div class="empty-state-inline">
            <i class="fas fa-envelope-open"></i>
            <span>No subscribers found</span>
          </div>
        </td>
      </tr>
    `;
      return;
    }

    tableBody.innerHTML = subscribers
      .map((subscription) => {
        const profile = subscription.profile;
        const displayName =
          profile?.display_name ||
          subscription.email?.split("@")[0] ||
          "Guest Subscriber";

        const avatarContent = profile?.avatar_url
          ? `<img src="${profile.avatar_url}" alt="${displayName}" class="avatar-image" />`
          : `<div class="avatar-preset">${displayName.charAt(0).toUpperCase()}</div>`;

        return `
      <tr class="subscriber-row" data-subscription-id="${subscription.id}">
        <td>
          <input type="checkbox" class="subscriber-select" value="${subscription.id}" />
        </td>
        <td>
          <div class="subscriber-info">
            <div class="subscriber-avatar">
              ${avatarContent}
            </div>
            <div class="subscriber-details">
              <span class="subscriber-name">${displayName}</span>
              <span class="subscriber-id">
                ${subscription.user_id ? `ID: ${subscription.user_id}` : "Guest Subscriber"}
              </span>
            </div>
          </div>
        </td>
        <td>
          <span class="subscriber-email">${subscription.email}</span>
          ${subscription.convertkit_subscriber_id ? '<span class="convertkit-badge">ConvertKit</span>' : ""}
          ${!subscription.user_id ? '<span class="guest-badge">Guest</span>' : ""}
        </td>
        <td>
          <span class="newsletter-type-badge ${subscription.newsletter_type}">
            ${subscription.newsletter_type?.charAt(0).toUpperCase() + subscription.newsletter_type?.slice(1)}
          </span>
        </td>
        <td>
          <span class="subscribe-date">
            ${new Date(subscription.subscribed_at).toLocaleDateString()}
          </span>
        </td>
        <td>
          <span class="status-badge ${subscription.is_active ? "active" : "inactive"}">
            ${subscription.is_active ? "Active" : "Unsubscribed"}
          </span>
        </td>
        <td>
          <div class="subscriber-actions">
            <button class="action-btn view" data-action="view" data-subscription-id="${subscription.id}" title="View Details">
              <i class="fas fa-eye"></i>
            </button>
            ${
              subscription.is_active
                ? `
              <button class="action-btn unsubscribe" data-action="unsubscribe" data-subscription-id="${subscription.id}" title="Unsubscribe">
                <i class="fas fa-user-minus"></i>
              </button>
            `
                : `
              <button class="action-btn resubscribe" data-action="resubscribe" data-subscription-id="${subscription.id}" title="Resubscribe">
                <i class="fas fa-user-plus"></i>
              </button>
            `
            }
            <button class="action-btn delete" data-action="delete" data-subscription-id="${subscription.id}" title="Delete">
              <i class="fas fa-trash"></i>
            </button>
          </div>
        </td>
      </tr>
    `;
      })
      .join("");

    // Attach event listeners
    const subscriberActions = tableBody.querySelectorAll(
      ".subscriber-actions .action-btn"
    ) as NodeListOf<HTMLButtonElement>;
    subscriberActions.forEach((button) => {
      button.addEventListener("click", handleSubscriberAction);
    });

    const checkboxes = tableBody.querySelectorAll(
      ".subscriber-select"
    ) as NodeListOf<HTMLInputElement>;
    checkboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", updateSubscriberBulkActionsBar);
    });
  }

  function updateDashboardStats(stats: DashboardStats) {
    const elements = {
      totalSubscribers: document.getElementById("total-subscribers"),
      activeSubscribers: document.getElementById("active-subscribers"),
      weeklySubscribers: document.getElementById("weekly-subscribers"),
      totalNewsletters: document.getElementById("total-newsletters"),
      newThisMonth: document.getElementById("new-this-month"),
      activeRate: document.getElementById("active-rate"),
    };

    if (elements.totalSubscribers)
      elements.totalSubscribers.textContent = stats.totalSubscribers.toString();
    if (elements.activeSubscribers)
      elements.activeSubscribers.textContent =
        stats.activeSubscribers.toString();
    if (elements.weeklySubscribers)
      elements.weeklySubscribers.textContent =
        stats.weeklySubscribers.toString();
    if (elements.totalNewsletters)
      elements.totalNewsletters.textContent = stats.totalNewsletters.toString();
    if (elements.newThisMonth)
      elements.newThisMonth.textContent = `+${stats.newThisMonth} this month`;

    if (elements.activeRate && stats.totalSubscribers > 0) {
      const activeRate = Math.round(
        (stats.activeSubscribers / stats.totalSubscribers) * 100
      );
      elements.activeRate.textContent = `${activeRate}% active rate`;
    }
  }

  function updateNewsletterCount() {
    const countElement = document.getElementById("newsletters-count");
    if (countElement) {
      countElement.textContent = `(${newsletters.length})`;
    }
  }

  function updateSubscriberCount() {
    const countElement = document.getElementById("subscribers-count");
    if (countElement) {
      countElement.textContent = `(${subscribers.length})`;
    }
  }

  async function handleNewsletterAction(event: Event) {
    const button = event.currentTarget as HTMLButtonElement;
    const action = button.dataset.action;
    const newsletterId = button.dataset.newsletterId;

    if (!action || !newsletterId) return;

    const originalContent = button.innerHTML;
    button.innerHTML = '<div class="spinner-square small"></div>';
    button.disabled = true;

    try {
      switch (action) {
        case "edit":
          await editNewsletter(newsletterId);
          break;
        case "activate":
        case "deactivate":
          await toggleNewsletterStatus(newsletterId, action === "activate");
          break;
        case "subscribers":
          const subscribersTab = document.querySelector(
            '[data-tab="subscribers"]'
          ) as HTMLButtonElement;
          subscribersTab?.click();
          break;
        case "build-email":
          openEmailBuilder(newsletterId);
          break;
      }
    } catch (error) {
      console.error(`Newsletter ${action} error:`, error);
      showNotification(
        `Failed to ${action} newsletter: ${error.message}`,
        "error"
      );
    } finally {
      button.innerHTML = originalContent;
      button.disabled = false;
    }
  }

  async function handleSubscriberAction(event: Event) {
    const button = event.currentTarget as HTMLButtonElement;
    const action = button.dataset.action;
    const subscriptionId = button.dataset.subscriptionId;

    if (!action || !subscriptionId) return;

    if (action === "view") {
      showSubscriberDetails(subscriptionId);
      return;
    }

    if (
      action === "delete" &&
      !confirm("Are you sure you want to delete this subscription?")
    ) {
      return;
    }

    const originalContent = button.innerHTML;
    button.innerHTML = '<div class="spinner-square small"></div>';
    button.disabled = true;

    try {
      showNotification(
        `Subscriber ${action} functionality coming soon`,
        "info"
      );
    } catch (error) {
      console.error(`Subscriber ${action} error:`, error);
      showNotification(
        `Failed to ${action} subscriber: ${error.message}`,
        "error"
      );
    } finally {
      button.innerHTML = originalContent;
      button.disabled = false;
    }
  }

  async function editNewsletter(newsletterId: string) {
    const newsletter = newsletters.find((n) => n.id === newsletterId);
    if (newsletter) {
      openNewsletterModal(newsletter);
    } else {
      throw new Error("Newsletter not found");
    }
  }

  async function toggleNewsletterStatus(
    newsletterId: string,
    isActive: boolean
  ) {
    showNotification(
      `Newsletter ${isActive ? "activated" : "deactivated"} successfully`,
      "success"
    );

    const newsletter = newsletters.find((n) => n.id === newsletterId);
    if (newsletter) {
      newsletter.is_active = isActive;
      renderNewsletters();
    }
  }

  function openNewsletterModal(newsletter?: Newsletter) {
    const modal = document.getElementById("newsletter-modal");
    const modalTitle = document.getElementById("newsletter-modal-title");
    const form = document.getElementById("newsletter-form") as HTMLFormElement;

    if (!modal || !modalTitle || !form) return;

    if (newsletter) {
      currentEditingNewsletterId = newsletter.id;
      modalTitle.textContent = "Edit Newsletter";

      // Populate form with newsletter data
      (document.getElementById("newsletter-name") as HTMLInputElement).value =
        newsletter.name;
      (document.getElementById("newsletter-slug") as HTMLInputElement).value =
        newsletter.slug;
      (
        document.getElementById("newsletter-description") as HTMLTextAreaElement
      ).value = newsletter.description || "";
      (
        document.getElementById("newsletter-frequency") as HTMLSelectElement
      ).value = newsletter.frequency;
      (document.getElementById("newsletter-day") as HTMLSelectElement).value =
        newsletter.day_of_week || "";
      (document.getElementById("newsletter-sort") as HTMLInputElement).value =
        newsletter.sort_order?.toString() || "0";
      (document.getElementById("newsletter-image") as HTMLInputElement).value =
        newsletter.image_url || "";
      (
        document.getElementById("newsletter-active") as HTMLInputElement
      ).checked = newsletter.is_active;
    } else {
      currentEditingNewsletterId = null;
      modalTitle.textContent = "Create Newsletter";
      form.reset();
    }

    modal.style.display = "flex";
  }

  function closeNewsletterModal() {
    const modal = document.getElementById("newsletter-modal");
    if (modal) {
      modal.style.display = "none";
    }
    currentEditingNewsletterId = null;
  }

  function openEmailBuilder(newsletterId?: string) {
    const modal = document.getElementById("email-builder-modal");
    if (modal) {
      modal.style.display = "flex";
      initializeEmailBuilder(newsletterId);
    }
  }

  function closeEmailBuilder() {
    const modal = document.getElementById("email-builder-modal");
    if (modal) {
      modal.style.display = "none";
    }
  }

  function initializeEmailBuilder(newsletterId?: string) {
    

    // Initialize drag and drop
    setupDragAndDrop();

    // Initialize device preview
    setupDevicePreview();

    // Initialize component properties
    setupComponentProperties();

    showNotification(
      "Email builder initialized! Start dragging components to build your email.",
      "info"
    );
  }

  function setupDragAndDrop() {
    const components = document.querySelectorAll(".component-item");
    const dropZone = document.querySelector(".drop-zone");

    components.forEach((component) => {
      component.addEventListener("dragstart", (e) => {
        const componentType = (e.target as HTMLElement).dataset.component;
        (e as DragEvent).dataTransfer?.setData(
          "text/plain",
          componentType || ""
        );
      });

      component.setAttribute("draggable", "true");
    });

    if (dropZone) {
      dropZone.addEventListener("dragover", (e) => {
        e.preventDefault();
        dropZone.classList.add("drag-over");
      });

      dropZone.addEventListener("dragleave", () => {
        dropZone.classList.remove("drag-over");
      });

      dropZone.addEventListener("drop", (e) => {
        e.preventDefault();
        dropZone.classList.remove("drag-over");

        const componentType = (e as DragEvent).dataTransfer?.getData(
          "text/plain"
        );
        if (componentType) {
          addEmailComponent(componentType);
        }
      });
    }
  }

  function setupDevicePreview() {
    const deviceButtons = document.querySelectorAll(".device-btn");
    const emailCanvas = document.getElementById("email-canvas");

    deviceButtons.forEach((btn) => {
      btn.addEventListener("click", () => {
        deviceButtons.forEach((b) => b.classList.remove("active"));
        btn.classList.add("active");

        const device = (btn as HTMLElement).dataset.device;
        if (emailCanvas) {
          emailCanvas.className = `email-canvas ${device}-preview`;
        }
      });
    });
  }

  function setupComponentProperties() {
    // Initialize properties panel
    const propertiesContent = document.getElementById("properties-content");
    if (propertiesContent) {
      propertiesContent.innerHTML = `
        <div class="properties-empty">
          <i class="fas fa-mouse-pointer"></i>
          <p>Select a component to edit its properties</p>
        </div>
      `;
    }
  }

  function addEmailComponent(componentType: string) {
    const canvas = document.querySelector(".email-container");
    const dropZone = document.querySelector(".drop-zone");

    if (!canvas) return;

    // Remove drop zone if this is the first component
    if (dropZone && canvas.children.length === 1) {
      dropZone.remove();
    }

    const componentHTML = getComponentHTML(componentType);
    const componentElement = document.createElement("div");
    componentElement.className = `email-component ${componentType}-component`;
    componentElement.innerHTML = componentHTML;
    componentElement.addEventListener("click", () =>
      selectComponent(componentElement, componentType)
    );

    canvas.appendChild(componentElement);

    showNotification(
      `${componentType.charAt(0).toUpperCase() + componentType.slice(1)} component added!`,
      "success"
    );
  }

  function getComponentHTML(componentType: string): string {
    const templates = {
      header: `
        <div class="component-wrapper">
          <h1 style="margin: 0; padding: 20px; background: #4285f4; color: white; text-align: center;">
            Your Newsletter Title
          </h1>
          <div class="component-controls">
            <button class="edit-btn"><i class="fas fa-edit"></i></button>
            <button class="delete-btn"><i class="fas fa-trash"></i></button>
          </div>
        </div>
      `,
      text: `
        <div class="component-wrapper">
          <div style="padding: 20px; background: white; color: #333;">
            <p style="margin: 0; line-height: 1.6;">
              Add your newsletter content here. This text block is fully customizable and responsive.
            </p>
          </div>
          <div class="component-controls">
            <button class="edit-btn"><i class="fas fa-edit"></i></button>
            <button class="delete-btn"><i class="fas fa-trash"></i></button>
          </div>
        </div>
      `,
      image: `
        <div class="component-wrapper">
          <div style="padding: 20px; text-align: center; background: white;">
            <img src="https://via.placeholder.com/600x300/4285f4/white?text=Your+Image" 
                 style="max-width: 100%; height: auto;" alt="Newsletter Image" />
          </div>
          <div class="component-controls">
            <button class="edit-btn"><i class="fas fa-edit"></i></button>
            <button class="delete-btn"><i class="fas fa-trash"></i></button>
          </div>
        </div>
      `,
      button: `
        <div class="component-wrapper">
          <div style="padding: 20px; text-align: center; background: white;">
            <a href="#" style="display: inline-block; padding: 12px 24px; background: #4285f4; color: white; text-decoration: none; font-weight: bold;">
              Call to Action
            </a>
          </div>
          <div class="component-controls">
            <button class="edit-btn"><i class="fas fa-edit"></i></button>
            <button class="delete-btn"><i class="fas fa-trash"></i></button>
          </div>
        </div>
      `,
      divider: `
        <div class="component-wrapper">
          <div style="padding: 20px; background: white;">
            <hr style="border: none; height: 2px; background: #e2e8f0; margin: 0;" />
          </div>
          <div class="component-controls">
            <button class="edit-btn"><i class="fas fa-edit"></i></button>
            <button class="delete-btn"><i class="fas fa-trash"></i></button>
          </div>
        </div>
      `,
      social: `
        <div class="component-wrapper">
          <div style="padding: 20px; text-align: center; background: white;">
            <div style="display: inline-flex; gap: 10px;">
              <a href="#" style="display: inline-block; width: 40px; height: 40px; background: #4285f4; color: white; text-align: center; line-height: 40px; text-decoration: none;">
                <i class="fab fa-twitter"></i>
              </a>
              <a href="#" style="display: inline-block; width: 40px; height: 40px; background: #4285f4; color: white; text-align: center; line-height: 40px; text-decoration: none;">
                <i class="fab fa-linkedin"></i>
              </a>
              <a href="#" style="display: inline-block; width: 40px; height: 40px; background: #4285f4; color: white; text-align: center; line-height: 40px; text-decoration: none;">
                <i class="fab fa-github"></i>
              </a>
            </div>
          </div>
          <div class="component-controls">
            <button class="edit-btn"><i class="fas fa-edit"></i></button>
            <button class="delete-btn"><i class="fas fa-trash"></i></button>
          </div>
        </div>
      `,
    };

    return templates[componentType as keyof typeof templates] || templates.text;
  }

  function selectComponent(element: HTMLElement, componentType: string) {
    // Remove previous selection
    document.querySelectorAll(".email-component.selected").forEach((el) => {
      el.classList.remove("selected");
    });

    // Select current component
    element.classList.add("selected");

    // Update properties panel
    updatePropertiesPanel(componentType);
  }

  function updatePropertiesPanel(componentType: string) {
    const propertiesContent = document.getElementById("properties-content");
    if (!propertiesContent) return;

    const propertiesHTML = getPropertiesHTML(componentType);
    propertiesContent.innerHTML = propertiesHTML;
  }

  function getPropertiesHTML(componentType: string): string {
    const properties = {
      header: `
        <div class="property-group">
          <label for="header-text">Header Text</label>
          <input type="text" id="header-text" value="Your Newsletter Title" />
        </div>
        <div class="property-group">
          <label for="header-bg">Background Color</label>
          <input type="color" id="header-bg" value="#4285f4" />
        </div>
        <div class="property-group">
          <label for="header-color">Text Color</label>
          <input type="color" id="header-color" value="#ffffff" />
        </div>
      `,
      text: `
        <div class="property-group">
          <label for="text-content">Content</label>
          <textarea id="text-content" rows="4">Add your newsletter content here...</textarea>
        </div>
        <div class="property-group">
          <label for="text-size">Font Size</label>
          <select id="text-size">
            <option value="14px">Small</option>
            <option value="16px" selected>Medium</option>
            <option value="18px">Large</option>
          </select>
        </div>
      `,
      image: `
        <div class="property-group">
          <label for="image-url">Image URL</label>
          <input type="url" id="image-url" value="https://via.placeholder.com/600x300" />
        </div>
        <div class="property-group">
          <label for="image-alt">Alt Text</label>
          <input type="text" id="image-alt" value="Newsletter Image" />
        </div>
      `,
      button: `
        <div class="property-group">
          <label for="button-text">Button Text</label>
          <input type="text" id="button-text" value="Call to Action" />
        </div>
        <div class="property-group">
          <label for="button-url">Button URL</label>
          <input type="url" id="button-url" value="#" />
        </div>
        <div class="property-group">
          <label for="button-bg">Background Color</label>
          <input type="color" id="button-bg" value="#4285f4" />
        </div>
      `,
    };

    return (
      properties[componentType as keyof typeof properties] ||
      "<p>No properties available</p>"
    );
  }

  function showSubscriberDetails(subscriptionId: string) {
    const subscription = subscribers.find((s) => s.id === subscriptionId);
    if (!subscription) return;

    const modal = document.createElement("div");
    modal.className = "modal";
    modal.style.display = "flex";
    modal.innerHTML = `
      <div class="modal-content">
        <div class="modal-header">
          <h3>Subscriber Details</h3>
          <button class="modal-close" onclick="this.closest('.modal').remove()">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="subscriber-detail-section">
            <h4>Basic Information</h4>
            <div class="detail-grid">
              <div class="detail-item">
                <span class="detail-label">Email:</span>
                <span class="detail-value">${subscription.email}</span>
              </div>
              <div class="detail-item">
                <span class="detail-label">Newsletter Type:</span>
                <span class="detail-value">${subscription.newsletter_type}</span>
              </div>
              <div class="detail-item">
                <span class="detail-label">Status:</span>
                <span class="detail-value">${subscription.is_active ? "Active" : "Inactive"}</span>
              </div>
              <div class="detail-item">
                <span class="detail-label">Subscribed:</span>
                <span class="detail-value">${new Date(subscription.subscribed_at).toLocaleDateString()}</span>
              </div>
              ${
                subscription.user_id
                  ? `
              <div class="detail-item">
                <span class="detail-label">User ID:</span>
                <span class="detail-value">${subscription.user_id}</span>
              </div>
              `
                  : `
              <div class="detail-item">
                <span class="detail-label">Account Type:</span>
                <span class="detail-value">Guest Subscriber</span>
              </div>
              `
              }
            </div>
          </div>
        </div>
      </div>
    `;

    document.body.appendChild(modal);

    modal.addEventListener("click", (e) => {
      if (e.target === modal) {
        modal.remove();
      }
    });
  }

  function updateSubscriberBulkActionsBar() {
    const selectedCheckboxes = document.querySelectorAll(
      ".subscriber-select:checked"
    );
    const bulkActionsBar = document.getElementById("subscriber-bulk-actions");
    const selectedCount = document.getElementById("selected-subscribers-count");

    if (selectedCheckboxes.length > 0) {
      if (bulkActionsBar) bulkActionsBar.style.display = "flex";
      if (selectedCount)
        selectedCount.textContent = selectedCheckboxes.length.toString();
    } else {
      if (bulkActionsBar) bulkActionsBar.style.display = "none";
    }
  }

  function setupEventListeners() {
    

    // Tab switching
    const tabButtons = document.querySelectorAll(".tab-button");
    const tabContents = document.querySelectorAll(".tab-content");

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const targetTab = (button as HTMLElement).dataset.tab;
        if (!targetTab) return;

        tabButtons.forEach((btn) => btn.classList.remove("active"));
        tabContents.forEach((content) => content.classList.remove("active"));

        button.classList.add("active");
        const targetContent = document.getElementById(`${targetTab}-tab`);
        if (targetContent) {
          targetContent.classList.add("active");
        }
      });
    });

    // Create newsletter button
    const createNewsletterBtn = document.getElementById(
      "create-newsletter-btn"
    ) as HTMLButtonElement;
    createNewsletterBtn?.addEventListener("click", () => openNewsletterModal());

    // Export subscribers button
    const exportSubscribersBtn = document.getElementById(
      "export-subscribers-btn"
    ) as HTMLButtonElement;
    exportSubscribersBtn?.addEventListener("click", exportSubscribers);

    // Email builder buttons
    const emailBuilderBtn = document.getElementById(
      "email-builder-btn"
    ) as HTMLButtonElement;
    const launchBuilderBtn = document.getElementById(
      "launch-builder-btn"
    ) as HTMLButtonElement;
    emailBuilderBtn?.addEventListener("click", () => openEmailBuilder());
    launchBuilderBtn?.addEventListener("click", () => openEmailBuilder());

    // Modal controls
    const modalClose = document.getElementById(
      "newsletter-modal-close"
    ) as HTMLButtonElement;
    const cancelBtn = document.getElementById(
      "newsletter-cancel"
    ) as HTMLButtonElement;
    const emailBuilderClose = document.getElementById(
      "email-builder-close"
    ) as HTMLButtonElement;

    modalClose?.addEventListener("click", closeNewsletterModal);
    cancelBtn?.addEventListener("click", closeNewsletterModal);
    emailBuilderClose?.addEventListener("click", closeEmailBuilder);

    const modal = document.getElementById("newsletter-modal");
    const emailBuilderModal = document.getElementById("email-builder-modal");

    modal?.addEventListener("click", (e) => {
      if (e.target === modal) closeNewsletterModal();
    });

    emailBuilderModal?.addEventListener("click", (e) => {
      if (e.target === emailBuilderModal) closeEmailBuilder();
    });

    // Form submission
    const newsletterForm = document.getElementById(
      "newsletter-form"
    ) as HTMLFormElement;
    newsletterForm?.addEventListener("submit", handleNewsletterFormSubmit);

    // Auto-generate slug from name
    const nameInput = document.getElementById(
      "newsletter-name"
    ) as HTMLInputElement;
    const slugInput = document.getElementById(
      "newsletter-slug"
    ) as HTMLInputElement;

    nameInput?.addEventListener("input", (e) => {
      const name = (e.target as HTMLInputElement).value;
      const slug = name
        .toLowerCase()
        .replace(/[^a-z0-9\s-]/g, "")
        .replace(/\s+/g, "-")
        .replace(/-+/g, "-")
        .trim();
      if (slugInput) {
        slugInput.value = slug;
      }
    });

    // Select all checkbox
    const selectAllCheckbox = document.getElementById(
      "select-all-subscribers"
    ) as HTMLInputElement;
    selectAllCheckbox?.addEventListener("change", () => {
      const subscriberCheckboxes = document.querySelectorAll(
        ".subscriber-select"
      ) as NodeListOf<HTMLInputElement>;
      subscriberCheckboxes.forEach((checkbox) => {
        checkbox.checked = selectAllCheckbox.checked;
      });
      updateSubscriberBulkActionsBar();
    });

    // Search and filter
    const subscriberSearch = document.getElementById(
      "subscriber-search"
    ) as HTMLInputElement;
    subscriberSearch?.addEventListener(
      "input",
      debounce(handleSubscriberSearch, 300)
    );

    const subscriberFilter = document.getElementById(
      "subscriber-filter"
    ) as HTMLSelectElement;
    subscriberFilter?.addEventListener("change", handleSubscriberFilter);

    // Newsletter filter
    const newsletterFilter = document.getElementById(
      "newsletter-filter"
    ) as HTMLSelectElement;
    newsletterFilter?.addEventListener("change", handleNewsletterFilter);

    // Settings form
    const settingsForm = document.getElementById(
      "newsletter-settings-form"
    ) as HTMLFormElement;
    settingsForm?.addEventListener("submit", handleSettingsFormSubmit);

    // Email builder controls
    const previewBtn = document.getElementById(
      "preview-email"
    ) as HTMLButtonElement;
    const saveTemplateBtn = document.getElementById(
      "save-template"
    ) as HTMLButtonElement;

    previewBtn?.addEventListener("click", previewEmail);
    saveTemplateBtn?.addEventListener("click", saveEmailTemplate);

    // Retry button
    const retryBtn = document.getElementById("retry-btn") as HTMLButtonElement;
    retryBtn?.addEventListener("click", () => {
      hideError();
      initializeNewsletterManagement();
    });

    
  }

  async function handleNewsletterFormSubmit(e: Event) {
    e.preventDefault();

    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);

    const newsletterData = {
      name: formData.get("name") as string,
      slug: formData.get("slug") as string,
      description: (formData.get("description") as string) || undefined,
      frequency: formData.get("frequency") as string,
      day_of_week: (formData.get("day_of_week") as string) || undefined,
      sort_order: parseInt(formData.get("sort_order") as string) || 0,
      image_url: (formData.get("image_url") as string) || undefined,
      is_active: formData.has("is_active"),
    };

    try {
      if (currentEditingNewsletterId) {
        // Use singleton manager for update
        const result = await adminAPIManager.updateNewsletter(
          currentEditingNewsletterId,
          newsletterData
        );

        if (result.success) {
          showNotification("Newsletter updated successfully", "success");
        } else {
          throw new Error(result.error);
        }
      } else {
        // Use singleton manager for create
        const result = await adminAPIManager.createNewsletter(newsletterData);

        if (result.success) {
          showNotification("Newsletter created successfully", "success");
        } else {
          throw new Error(result.error);
        }
      }

      closeNewsletterModal();
      await loadNewslettersFromDB();
      await loadDashboardStatsFromDB();
    } catch (error) {
      console.error("❌ Form submission error:", error);
      showNotification(`Failed to save newsletter: ${error.message}`, "error");
    }
  }

  async function handleSettingsFormSubmit(e: Event) {
    e.preventDefault();
    showNotification("Settings saved successfully", "success");
  }

  async function handleSubscriberSearch() {
    
    await loadSubscribersFromDB(1);
  }

  async function handleSubscriberFilter() {
    
    await loadSubscribersFromDB(1);
  }

  async function handleNewsletterFilter() {
    
    await loadNewslettersFromDB();
  }

  async function exportSubscribers() {
    const exportBtn = document.getElementById(
      "export-subscribers-btn"
    ) as HTMLButtonElement;
    const spinner = document.getElementById("export-spinner");

    if (exportBtn && spinner) {
      exportBtn.disabled = true;
      spinner.style.display = "flex";
    }

    try {
      // Use singleton manager for export
      const response = await adminAPIManager.exportUsers("csv");

      if (response.success && response.data) {
        const blob = new Blob([response.data], {
          type: "text/csv;charset=utf-8;",
        });
        const link = document.createElement("a");
        const url = URL.createObjectURL(blob);
        link.setAttribute("href", url);
        link.setAttribute(
          "download",
          `newsletter-subscribers-${new Date().toISOString().split("T")[0]}.csv`
        );
        link.style.visibility = "hidden";
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);

        showNotification("Subscribers exported successfully", "success");
      } else {
        throw new Error(response.error || "Export failed");
      }
    } catch (error) {
      console.error("❌ Export error:", error);
      showNotification("Failed to export subscribers", "error");
    } finally {
      if (exportBtn && spinner) {
        exportBtn.disabled = false;
        spinner.style.display = "none";
      }
    }
  }

  function previewEmail() {
    const emailCanvas = document.querySelector(".email-container");
    if (!emailCanvas) return;

    const emailHTML = generateEmailHTML();

    const previewWindow = window.open("", "_blank", "width=800,height=600");
    if (previewWindow) {
      previewWindow.document.write(emailHTML);
      previewWindow.document.close();
    }

    showNotification("Email preview opened in new window", "success");
  }

  function saveEmailTemplate() {
    const emailHTML = generateEmailHTML();

    // TODO: Save to database via AdminAPI
    

    showNotification("Email template saved successfully", "success");
  }

  function generateEmailHTML(): string {
    const components = document.querySelectorAll(".email-component");
    let emailContent = "";

    components.forEach((component) => {
      const wrapper = component.querySelector(".component-wrapper");
      if (wrapper) {
        // Remove the controls and get clean HTML
        const cleanContent = wrapper.cloneNode(true) as HTMLElement;
        const controls = cleanContent.querySelector(".component-controls");
        if (controls) {
          controls.remove();
        }
        emailContent += cleanContent.innerHTML;
      }
    });

    return `
      <!DOCTYPE html>
      <html>
      <head>
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>TinkByte Newsletter</title>
        <style>
          body { margin: 0; padding: 0; font-family: Arial, sans-serif; }
          .email-container { max-width: 600px; margin: 0 auto; }
          @media (max-width: 600px) {
            .email-container { width: 100% !important; }
          }
        </style>
      </head>
      <body>
        <div class="email-container">
          ${emailContent}
        </div>
      </body>
      </html>
    `;
  }

  function showLoading(show: boolean) {
    const loadingOverlay = document.getElementById("loading-overlay");
    if (loadingOverlay) {
      loadingOverlay.style.display = show ? "flex" : "none";
    }
  }

  function showError(message: string) {
    const errorBanner = document.getElementById("error-banner");
    const errorMessage = document.getElementById("error-message");

    if (errorBanner && errorMessage) {
      errorMessage.textContent = message;
      errorBanner.style.display = "flex";
    }
  }

  function hideError() {
    const errorBanner = document.getElementById("error-banner");
    if (errorBanner) {
      errorBanner.style.display = "none";
    }
  }

  function showNotification(
    message: string,
    type: "success" | "error" | "info" | "warning" = "success"
  ) {
    const notification = document.createElement("div");
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 1rem 1.5rem;
      color: white;
      font-weight: 500;
      z-index: 10000;
      background: ${type === "success" ? "#238636" : type === "error" ? "#da3633" : type === "warning" ? "#fb8500" : "#4285f4"};
      animation: slideIn 0.3s ease;
    `;

    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 4000);
  }

  function debounce(func: Function, wait: number) {
    let timeout: NodeJS.Timeout;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Add animation styles
  if (!document.getElementById("newsletter-animations")) {
    const style = document.createElement("style");
    style.id = "newsletter-animations";
    style.textContent = `
      @keyframes slideIn {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
      
      .email-builder-modal .modal-content {
        width: 95vw;
        height: 90vh;
        max-width: none;
        max-height: none;
      }
      
      .email-builder-container {
        display: flex;
        height: calc(90vh - 80px);
      }
      
      .builder-sidebar {
        width: 250px;
        background: #161b22;
        border-right: 1px solid #21262d;
        padding: 1rem;
        overflow-y: auto;
      }
      
      .builder-canvas {
        flex: 1;
        display: flex;
        flex-direction: column;
      }
      
      .canvas-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 1rem;
        border-bottom: 1px solid #21262d;
        background: #161b22;
      }
      
      .device-preview {
        display: flex;
        gap: 0.5rem;
      }
      
      .device-btn {
        padding: 0.5rem;
        background: #21262d;
        border: 1px solid #30363d;
        color: #8b949e;
        cursor: pointer;
        transition: all 0.2s ease;
      }
      
      .device-btn.active {
        background: #4285f4;
        border-color: #4285f4;
        color: white;
      }
      
      .canvas-actions {
        display: flex;
        gap: 1rem;
      }
      
      .preview-btn, .save-template-btn {
        padding: 0.5rem 1rem;
        background: #4285f4;
        border: 1px solid #4285f4;
        color: white;
        cursor: pointer;
        font-size: 0.875rem;
        display: flex;
        align-items: center;
        gap: 0.5rem;
      }
      
      .email-canvas {
        flex: 1;
        background: #f6f8fa;
        overflow: auto;
        padding: 2rem;
      }
      
      .email-container {
        max-width: 600px;
        margin: 0 auto;
        background: white;
        min-height: 400px;
        position: relative;
      }
      
      .drop-zone {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        height: 400px;
        border: 2px dashed #d1d5db;
        color: #6b7280;
        background: #f9fafb;
      }
      
      .drop-zone.drag-over {
        border-color: #4285f4;
        background: rgba(66, 133, 244, 0.05);
        color: #4285f4;
      }
      
      .builder-properties {
        width: 300px;
        background: #161b22;
        border-left: 1px solid #21262d;
        padding: 1rem;
        overflow-y: auto;
      }
      
      .component-list {
        display: flex;
        flex-direction: column;
        gap: 0.5rem;
      }
      
      .component-item {
        display: flex;
        align-items: center;
        gap: 0.75rem;
        padding: 0.75rem;
        background: #21262d;
        border: 1px solid #30363d;
        color: #f0f6fc;
        cursor: grab;
        transition: all 0.2s ease;
      }
      
      .component-item:hover {
        background: #30363d;
        border-color: #4285f4;
      }
      
      .component-item:active {
        cursor: grabbing;
      }
      
      .email-component {
        position: relative;
        margin-bottom: 1px;
      }
      
      .email-component.selected {
        outline: 2px solid #4285f4;
        outline-offset: 2px;
      }
      
      .component-wrapper {
        position: relative;
      }
      
      .component-controls {
        position: absolute;
        top: 5px;
        right: 5px;
        display: flex;
        gap: 0.25rem;
        opacity: 0;
        transition: opacity 0.2s ease;
      }
      
      .email-component:hover .component-controls {
        opacity: 1;
      }
      
      .edit-btn, .delete-btn {
        width: 24px;
        height: 24px;
        background: rgba(0, 0, 0, 0.7);
        color: white;
        border: none;
        cursor: pointer;
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 0.75rem;
      }
      
      .delete-btn:hover {
        background: #da3633;
      }
      
      .edit-btn:hover {
        background: #4285f4;
      }
      
      .property-group {
        margin-bottom: 1rem;
      }
      
      .property-group label {
        display: block;
        color: #f0f6fc;
        font-weight: 500;
        margin-bottom: 0.5rem;
        font-size: 0.875rem;
      }
      
      .property-group input,
      .property-group textarea,
      .property-group select {
        width: 100%;
        padding: 0.5rem;
        background: #21262d;
        border: 1px solid #30363d;
        color: #f0f6fc;
        font-size: 0.875rem;
      }
      
      .property-group input:focus,
      .property-group textarea:focus,
      .property-group select:focus {
        outline: none;
        border-color: #4285f4;
      }
      
      .properties-empty {
        text-align: center;
        color: #8b949e;
        padding: 2rem 1rem;
      }
      
      .properties-empty i {
        font-size: 2rem;
        margin-bottom: 1rem;
        color: #4285f4;
      }
      
      .mobile-preview .email-container {
        max-width: 375px;
      }
      
      .desktop-preview .email-container {
        max-width: 600px;
      }
    `;
    document.head.appendChild(style);
  }
</script>
