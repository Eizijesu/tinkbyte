---
// src/pages/admin/dashboard.astro - CLEANED VERSION
import AdminLayout from "../../layouts/AdminLayout.astro";

declare global {
  interface WindowEventMap {
    adminMetricsUpdate: CustomEvent;
  }
}
---

<AdminLayout title="Admin Dashboard - TinkByte">
  <div class="dashboard-container">
    <!-- Loading State -->
    <div id="loading-overlay" class="loading-overlay">
      <div class="loading-spinner">
        <div class="spinner-square"></div>
        <span>Loading dashboard...</span>
      </div>
    </div>

    <!-- Error State -->
    <div id="error-banner" class="error-banner" style="display: none;">
      <i class="fas fa-exclamation-triangle"></i>
      <span id="error-message">Error loading dashboard</span>
      <button class="retry-btn" id="retry-btn">
        <i class="fas fa-sync-alt"></i>
        Retry
      </button>
    </div>

    <!-- Dashboard Content -->
    <div id="dashboard-content" style="display: none;">
      <!-- Dashboard Header -->
      <div class="dashboard-header">
        <div class="header-content">
          <h1>Admin Dashboard</h1>
          <p>Welcome back! Here's what's happening with your community.</p>
        </div>
        <div class="header-actions">
          <button class="refresh-btn" id="refresh-btn">
            <div class="btn-spinner" style="display: none;">
              <div class="spinner-square small"></div>
            </div>
            <i class="fas fa-sync-alt"></i>
            Refresh
          </button>
        </div>
      </div>

      <!-- Quick Stats -->
      <div class="stats-grid">
        <div class="stat-card urgent">
          <div class="stat-icon">
            <i class="fas fa-exclamation-triangle"></i>
          </div>
          <div class="stat-content">
            <div class="stat-number" id="pending-count">0</div>
            <div class="stat-label">Pending Comments</div>
            <div class="stat-action">
              <a href="/admin/moderation">Review Now</a>
            </div>
          </div>
        </div>

        <div class="stat-card warning">
          <div class="stat-icon">
            <i class="fas fa-flag"></i>
          </div>
          <div class="stat-content">
            <div class="stat-number" id="flagged-count">0</div>
            <div class="stat-label">Flagged Content</div>
            <div class="stat-action">
              <a href="/admin/moderation?tab=flagged">View Flagged</a>
            </div>
          </div>
        </div>

        <div class="stat-card info">
          <div class="stat-icon">
            <i class="fas fa-users"></i>
          </div>
          <div class="stat-content">
            <div class="stat-number" id="users-count">0</div>
            <div class="stat-label">Total Users</div>
            <div class="stat-action">
              <a href="/admin/users">Manage Users</a>
            </div>
          </div>
        </div>

        <div class="stat-card success">
          <div class="stat-icon">
            <i class="fas fa-chart-line"></i>
          </div>
          <div class="stat-content">
            <div class="stat-number" id="comments-count">0</div>
            <div class="stat-label">Total Comments</div>
            <div class="stat-action">
              <a href="/admin/analytics">View Analytics</a>
            </div>
          </div>
        </div>
      </div>

      <!-- Quick Actions -->
      <div class="actions-section">
        <h2>Quick Actions</h2>
        <div class="actions-grid">
          <div class="action-card">
            <div class="action-icon">
              <i class="fas fa-shield-alt"></i>
            </div>
            <div class="action-content">
              <h3>Comment Moderation</h3>
              <p>Review and moderate user comments</p>
              <a href="/admin/moderation" class="action-btn primary">
                <i class="fas fa-arrow-right"></i>
                Go to Moderation
              </a>
            </div>
          </div>

          <div class="action-card">
            <div class="action-icon">
              <i class="fas fa-chart-bar"></i>
            </div>
            <div class="action-content">
              <h3>Analytics Dashboard</h3>
              <p>View community engagement metrics</p>
              <a href="/admin/analytics" class="action-btn secondary">
                <i class="fas fa-arrow-right"></i>
                View Analytics
              </a>
            </div>
          </div>

          <div class="action-card">
            <div class="action-icon">
              <i class="fas fa-users-cog"></i>
            </div>
            <div class="action-content">
              <h3>User Management</h3>
              <p>Manage user accounts and permissions</p>
              <a href="/admin/users" class="action-btn secondary">
                <i class="fas fa-arrow-right"></i>
                Manage Users
              </a>
            </div>
          </div>

          <div class="action-card">
            <div class="action-icon">
              <i class="fas fa-edit"></i>
            </div>
            <div class="action-content">
              <h3>Content Management</h3>
              <p>Edit and manage site content</p>
              <a href="/admin/index.html" class="action-btn secondary">
                <i class="fas fa-arrow-right"></i>
                Open TinaCMS
              </a>
            </div>
          </div>
        </div>
      </div>

      <!-- System Status -->
      <div class="status-section">
        <h2>System Status</h2>
        <div class="status-grid">
          <div class="status-item">
            <div class="status-indicator" id="db-status"></div>
            <div class="status-content">
              <div class="status-title">Database</div>
              <div class="status-description" id="db-status-text">
                Checking...
              </div>
            </div>
          </div>
          <div class="status-item">
            <div class="status-indicator" id="auth-status"></div>
            <div class="status-content">
              <div class="status-title">Authentication</div>
              <div class="status-description" id="auth-status-text">
                Checking...
              </div>
            </div>
          </div>
          <div class="status-item">
            <div class="status-indicator" id="comment-status"></div>
            <div class="status-content">
              <div class="status-title">Comment System</div>
              <div class="status-description" id="comment-status-text">
                Checking...
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { adminAPIManager } from "../../lib/admin-api.js";
  import { AuthState } from "../../lib/supabase.js";
  import { getAdminRealtimeManager } from "../../lib/admin/realtime-manager.js";

  let realtimeManager: any = null;
  let metricsUpdateHandler: ((event: CustomEvent) => void) | null = null;

  // SINGLE DOMContentLoaded event listener
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      await initializeDashboard();
      await initializeRealtime();
    } catch (error) {
      console.error("Dashboard initialization error:", error);
      showError(
        "Failed to initialize dashboard: " + (error?.message || "Unknown error")
      );
    }
  });

  async function initializeDashboard() {
    

    try {
      // Use singleton manager
      await adminAPIManager.initialize();

      

      // Initialize auth state
      const authState = AuthState.getInstance();
      await authState.initialize();

      // Add small delay for UX
      await new Promise((resolve) => setTimeout(resolve, 1500));

      // Load dashboard data using singleton
      await loadDashboardData();
      await updateSystemStatus();

      setupRefreshButton();
      setupRetryButton();
      showDashboardContent();

      // Setup periodic refresh
      setInterval(refreshDashboard, 5 * 60 * 1000);

      
    } catch (error) {
      console.error("❌ Dashboard initialization failed:", error);
      if (
        error.message.includes("session") ||
        error.message.includes("sign in")
      ) {
        setTimeout(() => {
          window.location.href = `/auth/admin-signin?error=${encodeURIComponent(error.message)}`;
        }, 2000);
      }
      throw error;
    }
  }

  async function initializeRealtime() {
    try {
      realtimeManager = getAdminRealtimeManager();
      await realtimeManager.initialize();

      // FIXED: Proper event listener with correct typing
      metricsUpdateHandler = (event: Event) => {
        const customEvent = event as CustomEvent;
        handleRealtimeMetricsUpdate(customEvent.detail);
      };

      window.addEventListener(
        "adminMetricsUpdate",
        metricsUpdateHandler as EventListener
      );
      
    } catch (error) {
      console.error("❌ Failed to initialize real-time updates:", error);
    }
  }

  async function loadDashboardData() {
    
    try {
      await new Promise((resolve) => setTimeout(resolve, 500));

      // Use singleton manager instead of static AdminAPI
      const result = await adminAPIManager.getDashboardStats();

      if (result.success && result.data) {
        
        updateStatNumbers(result.data);
      } else {
        console.error("❌ Failed to load dashboard data:", result.error);
        throw new Error(result.error || "Failed to load dashboard data");
      }
    } catch (error) {
      console.error("❌ Dashboard data loading error:", error);
      throw error;
    }
  }

  async function updateSystemStatus() {
    try {
      // Use singleton manager
      const result = await adminAPIManager.testConnection();
      if (result.success) {
        updateStatusIndicator("db-status", "online", "All systems operational");
        updateStatusIndicator("auth-status", "online", "Working normally");
        updateStatusIndicator("comment-status", "online", "Fully operational");
        
      } else {
        updateStatusIndicator("db-status", "offline", "Connection issues");
        updateStatusIndicator(
          "auth-status",
          "offline",
          "Authentication problems"
        );
        updateStatusIndicator(
          "comment-status",
          "offline",
          "System unavailable"
        );
        
      }
    } catch (error) {
      console.error("❌ Status check error:", error);
      updateStatusIndicator("db-status", "offline", "Connection failed");
      updateStatusIndicator("auth-status", "offline", "Status unknown");
      updateStatusIndicator("comment-status", "offline", "Status unknown");
    }
  }

  function handleRealtimeMetricsUpdate(detail: any) {
    

    // Update specific metrics based on the update type
    switch (detail.type) {
      case "reaction":
        // Increment reaction counters
        if (detail.subtype === "like") {
          incrementStatCounter("comments-count"); // or create a likes counter
        }
        break;

      case "comment":
        if (detail.subtype === "new_comment") {
          incrementStatCounter("comments-count");
          if (detail.data?.moderation_status === "pending") {
            incrementStatCounter("pending-count");
          }
        }
        break;

      case "moderation":
        // Handle moderation status changes
        if (detail.data?.moderation_status === "approved") {
          decrementStatCounter("pending-count");
        }
        break;

      case "user":
        if (detail.subtype === "new_user") {
          incrementStatCounter("users-count");
        }
        break;
    }
  }

  // ADD these helper functions
  function incrementStatCounter(elementId: string) {
    const element = document.getElementById(elementId);
    if (element) {
      const currentValue = parseInt(element.textContent || "0");
      element.textContent = String(currentValue + 1);

      // Add visual feedback
      element.style.color = "#22c55e";
      element.style.transform = "scale(1.1)";
      setTimeout(() => {
        element.style.color = "";
        element.style.transform = "";
      }, 1000);
    }
  }

  function decrementStatCounter(elementId: string) {
    const element = document.getElementById(elementId);
    if (element) {
      const currentValue = parseInt(element.textContent || "0");
      element.textContent = String(Math.max(0, currentValue - 1));

      // Add visual feedback
      element.style.color = "#ef4444";
      element.style.transform = "scale(1.1)";
      setTimeout(() => {
        element.style.color = "";
        element.style.transform = "";
      }, 1000);
    }
  }

  // ADD cleanup when page unloads
  window.addEventListener("beforeunload", () => {
    if (realtimeManager) {
      realtimeManager.destroy();
    }
    if (metricsUpdateHandler) {
      window.removeEventListener(
        "adminMetricsUpdate",
        metricsUpdateHandler as EventListener
      );
    }
  });

  function updateStatusIndicator(
    elementId: string,
    status: string,
    text: string
  ) {
    const indicator = document.getElementById(elementId);
    const textElement = document.getElementById(
      elementId.replace("-status", "-status-text")
    );

    if (indicator) {
      indicator.className = `status-indicator ${status}`;
    }
    if (textElement) {
      textElement.textContent = text;
    }
  }

  function setupRefreshButton() {
    const refreshBtn = document.getElementById("refresh-btn");
    refreshBtn?.addEventListener("click", refreshDashboard);
  }

  function setupRetryButton() {
    const retryBtn = document.getElementById("retry-btn");
    retryBtn?.addEventListener("click", async () => {
      hideError();
      showLoading();
      try {
        await initializeDashboard();
      } catch (error) {
        showError(
          "Failed to load dashboard: " + (error?.message || "Unknown error")
        );
      }
    });
  }

  async function refreshDashboard() {
    const refreshBtn = document.getElementById(
      "refresh-btn"
    ) as HTMLButtonElement;
    const btnSpinner = refreshBtn?.querySelector(".btn-spinner") as HTMLElement;
    const btnIcon = refreshBtn?.querySelector(".fa-sync-alt") as HTMLElement;

    if (refreshBtn) {
      refreshBtn.disabled = true;
      if (btnSpinner) btnSpinner.style.display = "flex";
      if (btnIcon) btnIcon.style.display = "none";
    }

    try {
      // Use singleton manager
      const result = await adminAPIManager.getDashboardStats();
      if (result.success && result.data) {
        updateStatNumbers(result.data);
        await updateSystemStatus();
        showNotification("Dashboard refreshed successfully", "success");
      } else {
        showNotification(
          "Failed to refresh dashboard: " + (result.error || "Unknown error"),
          "error"
        );
      }
    } catch (error) {
      console.error("Refresh error:", error);
      showNotification("Error refreshing dashboard", "error");
    } finally {
      if (refreshBtn) {
        refreshBtn.disabled = false;
        if (btnSpinner) btnSpinner.style.display = "none";
        if (btnIcon) btnIcon.style.display = "inline";
      }
    }
  }

  function updateStatNumbers(data: any) {
    const pendingElement = document.getElementById("pending-count");
    const flaggedElement = document.getElementById("flagged-count");
    const usersElement = document.getElementById("users-count");
    const commentsElement = document.getElementById("comments-count");

    if (pendingElement)
      pendingElement.textContent = String(data.comments?.pending || 0);
    if (flaggedElement)
      flaggedElement.textContent = String(data.comments?.flagged || 0);
    if (usersElement) usersElement.textContent = String(data.users?.total || 0);
    if (commentsElement)
      commentsElement.textContent = String(data.comments?.total || 0);
  }

  function showLoading() {
    const loadingOverlay = document.getElementById("loading-overlay");
    const dashboardContent = document.getElementById("dashboard-content");
    if (loadingOverlay) loadingOverlay.style.display = "flex";
    if (dashboardContent) dashboardContent.style.display = "none";
  }

  function showDashboardContent() {
    const loadingOverlay = document.getElementById("loading-overlay");
    const dashboardContent = document.getElementById("dashboard-content");

    
    if (loadingOverlay) {
      loadingOverlay.style.display = "none";
      
    }
    if (dashboardContent) {
      dashboardContent.style.display = "block";
      
    }

    setTimeout(() => {
      if (loadingOverlay && loadingOverlay.style.display !== "none") {
        
        loadingOverlay.style.display = "none";
        if (dashboardContent) dashboardContent.style.display = "block";
      }
    }, 3000);
  }

  function showError(message: string) {
    const loadingOverlay = document.getElementById("loading-overlay");
    const errorBanner = document.getElementById("error-banner");
    const errorMessage = document.getElementById("error-message");
    const dashboardContent = document.getElementById("dashboard-content");

    if (loadingOverlay) loadingOverlay.style.display = "none";
    if (dashboardContent) dashboardContent.style.display = "none";
    if (errorBanner) errorBanner.style.display = "flex";
    if (errorMessage) errorMessage.textContent = message;
  }

  function hideError() {
    const errorBanner = document.getElementById("error-banner");
    if (errorBanner) errorBanner.style.display = "none";
  }

  function showNotification(message: string, type = "success") {
    const notification = document.createElement("div");
    notification.className = `notification ${type}`;
    notification.innerHTML = `
      <div class="notification-content">
        <i class="fas ${type === "success" ? "fa-check" : "fa-exclamation-triangle"}"></i>
        <span>${message}</span>
      </div>
    `;

    notification.style.cssText = `
      position: fixed; top: 20px; right: 20px; padding: 1rem 1.5rem;
      color: white; font-weight: 500; z-index: 10000; border-radius: 4px;
      background: ${type === "success" ? "#238636" : "#da3633"};
      animation: slideIn 0.3s ease; display: flex; align-items: center; gap: 0.5rem;
    `;

    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  }

  if (!document.getElementById("dashboard-animations")) {
    const style = document.createElement("style");
    style.id = "dashboard-animations";
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
    `;
    document.head.appendChild(style);
  }
</script>
