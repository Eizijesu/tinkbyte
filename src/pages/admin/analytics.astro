---
// src/pages/admin/analytics.astro - CLEANED VERSION
import AdminLayout from "../../layouts/AdminLayout.astro";

// Fallback data for static generation
const fallbackStats = {
  users: {
    total: 0,
    active: 0,
    blocked: 0,
    admins: 0,
    newLast30Days: 0,
    newLast7Days: 0,
  },
  comments: { total: 0, pending: 0, flagged: 0, approved: 0, last30Days: 0 },
  content: {
    totalArticles: 0,
    publishedArticles: 0,
    totalCategories: 0,
    totalAuthors: 0,
    totalPodcasts: 0,
  },
  newsletter: {
    totalNewsletters: 0,
    totalSubscribers: 0,
    activeSubscribers: 0,
  },
  generatedAt: new Date().toISOString(),
};

const fallbackAnalytics = {
  period: "30d",
  growth: Array.from({ length: 7 }, (_, i) => ({
    date: new Date(Date.now() - (6 - i) * 24 * 60 * 60 * 1000).toISOString(),
    users: 0,
    comments: 0,
    subscribers: 0,
    articles: 0,
  })),
  topUsers: [],
  topArticles: [],
  topCategories: [],
  generatedAt: new Date().toISOString(),
};

const stats = fallbackStats;
const analytics = fallbackAnalytics;

const weeklyGrowthPercent =
  stats.comments.last30Days > 0
    ? Math.round((stats.users.newLast7Days / stats.comments.last30Days) * 100)
    : 0;
const userGrowthPercent =
  stats.users.total > 0
    ? Math.round((stats.users.newLast30Days / stats.users.total) * 100)
    : 0;
const moderationEfficiency =
  stats.comments.total > 0
    ? Math.round((stats.comments.approved / stats.comments.total) * 100)
    : 0;
const engagementRate =
  stats.users.total > 0
    ? Math.round((stats.users.active / stats.users.total) * 100)
    : 0;

const chartData = analytics.growth.slice(-7).map((day) => ({
  date: new Date(day.date).toLocaleDateString("en-US", { weekday: "short" }),
  count: day.comments,
}));

while (chartData.length < 7) {
  chartData.unshift({ date: "N/A", count: 0 });
}


---

<AdminLayout title="Analytics Dashboard - TinkByte Admin">
  <div class="analytics-dashboard">
    <!-- Loading Overlay -->
    <div id="loading-overlay" class="loading-overlay" style="display: none;">
      <div class="loading-spinner">
        <div class="spinner-square"></div>
        <span>Loading analytics...</span>
      </div>
    </div>

    <!-- Error Banner -->
    <div id="error-banner" class="error-banner" style="display: none;">
      <svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="15" y1="9" x2="9" y2="15"></line>
        <line x1="9" y1="9" x2="15" y2="15"></line>
      </svg>
      <span id="error-message">Unable to load analytics data</span>
      <button id="retry-btn" class="retry-btn">
        <span class="btn-text">Retry</span>
        <div class="btn-spinner" style="display: none;">
          <div class="spinner-square small"></div>
        </div>
      </button>
    </div>

    <!-- Header -->
    <div class="dashboard-header">
      <div class="header-content">
        <h1>Analytics Dashboard</h1>
        <p>Community engagement and moderation insights</p>
      </div>
      <div class="header-actions">
        <a href="/admin/dashboard" class="nav-button">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M19 12H5M12 19l-7-7 7-7"></path>
          </svg>
          Back to Dashboard
        </a>
        <button class="export-button" id="export-btn">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7,10 12,15 17,10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
          Export Data
        </button>
      </div>
    </div>

    <!-- Time Range Selector -->
    <div class="time-range-selector">
      <div class="range-buttons">
        <button class="range-btn" data-range="7d">7 Days</button>
        <button class="range-btn active" data-range="30d">30 Days</button>
        <button class="range-btn" data-range="90d">90 Days</button>
      </div>
      <div class="last-updated" id="last-updated">
        Last updated: {new Date(stats.generatedAt).toLocaleString()}
      </div>
    </div>

    <!-- Key Metrics Grid -->
    <div class="metrics-grid" id="metrics-grid">
      <div class="metric-card primary">
        <div class="metric-header">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"
            ></path>
          </svg>
          <h3>Total Comments</h3>
        </div>
        <div class="metric-value" data-metric="total-comments">
          {stats.comments.total}
        </div>
        <div class="metric-change positive">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <polyline points="23,6 13.5,15.5 8.5,10.5 1,18"></polyline>
            <polyline points="17,6 23,6 23,12"></polyline>
          </svg>
          <span data-metric="weekly-growth"
            >+{weeklyGrowthPercent}% this month ({stats.comments.last30Days} recent)</span
          >
        </div>
      </div>

      <div class="metric-card">
        <div class="metric-header">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M12 6v6l4 2"></path>
          </svg>
          <h3>Pending Moderation</h3>
        </div>
        <div class="metric-value" data-metric="pending-comments">
          {stats.comments.pending}
        </div>
        <div class="metric-change neutral">
          <span data-metric="flagged-count"
            >{stats.comments.flagged} flagged for review</span
          >
        </div>
      </div>

      <div class="metric-card success">
        <div class="metric-header">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              d="M8 14s-6-3.5-6-8c0-2.5 2-4.5 4.5-4.5C7.5 1.5 8 2 8 2s.5-.5 1.5-.5C12 1.5 14 3.5 14 6c0 4.5-6 8-6 8z"
            ></path>
          </svg>
          <h3>Article Engagement</h3>
        </div>
        <div class="metric-value" data-metric="total-article-likes">0</div>
        <div class="metric-change positive">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <polyline points="23,6 13.5,15.5 8.5,10.5 1,18"></polyline>
            <polyline points="17,6 23,6 23,12"></polyline>
          </svg>
          <span data-metric="total-article-saves">0 saves</span>
        </div>
      </div>

      <div class="metric-card">
        <div class="metric-header">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M22 12h-4l-3 9L9 3l-3 9H2"></path>
          </svg>
          <h3>Moderation Efficiency</h3>
        </div>
        <div class="metric-value" data-metric="moderation-efficiency">
          {moderationEfficiency}%
        </div>
        <div class="metric-change positive">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <polyline points="23,6 13.5,15.5 8.5,10.5 1,18"></polyline>
            <polyline points="17,6 23,6 23,12"></polyline>
          </svg>
          <span data-metric="approved-count"
            >{stats.comments.approved} approved</span
          >
        </div>
      </div>

      <div class="metric-card">
        <div class="metric-header">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
            <circle cx="9" cy="7" r="4"></circle>
            <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
            <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
          </svg>
          <h3>Active Users</h3>
        </div>
        <div class="metric-value" data-metric="active-users">
          {stats.users.active}
        </div>
        <div class="metric-change positive">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <polyline points="23,6 13.5,15.5 8.5,10.5 1,18"></polyline>
            <polyline points="17,6 23,6 23,12"></polyline>
          </svg>
          <span data-metric="user-growth"
            >+{userGrowthPercent}% this month ({stats.users.newLast30Days} new)</span
          >
        </div>
      </div>
    </div>

    <!-- Charts Section -->
    <div class="charts-section">
      <div class="chart-container">
        <div class="chart-header">
          <h3>Comment Activity Trend</h3>
          <div class="chart-controls">
            <button class="chart-btn active" data-chart="comments"
              >Comments</button
            >
            <button class="chart-btn" data-chart="users">Users</button>
          </div>
        </div>
        <div class="chart-placeholder" id="activity-chart">
          <div class="chart-mock">
            <div class="chart-bars" id="chart-bars">
              {
                chartData.map((day) => {
                  const maxCount = Math.max(...chartData.map((d) => d.count));
                  const height =
                    maxCount > 0 ? (day.count / maxCount) * 100 : 20;
                  return (
                    <div
                      class="bar"
                      style={`height: ${height}%`}
                      title={`${day.date}: ${day.count} comments`}
                    />
                  );
                })
              }
            </div>
            <div class="chart-labels" id="chart-labels">
              {chartData.map((day) => <span>{day.date}</span>)}
            </div>
          </div>
        </div>
      </div>

      <div class="chart-container">
        <div class="chart-header">
          <h3>Moderation Status</h3>
        </div>
        <div class="chart-placeholder" id="moderation-chart">
          <div class="moderation-stats" id="moderation-stats">
            <div class="stat-item">
              <div class="stat-color approved"></div>
              <span class="stat-label">Approved</span>
              <span class="stat-value" data-metric="stat-approved"
                >{stats.comments.approved}</span
              >
            </div>
            <div class="stat-item">
              <div class="stat-color pending"></div>
              <span class="stat-label">Pending</span>
              <span class="stat-value" data-metric="stat-pending"
                >{stats.comments.pending}</span
              >
            </div>
            <div class="stat-item">
              <div class="stat-color flagged"></div>
              <span class="stat-label">Flagged</span>
              <span class="stat-value" data-metric="stat-flagged"
                >{stats.comments.flagged}</span
              >
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Top Contributors -->
    <div class="contributors-section">
      <div class="contributors-header">
        <h3>Top Contributors</h3>
        <a href="/admin/users" class="view-all-link">View All Users</a>
      </div>
      <div class="contributors-list" id="contributors-list">
        {
          analytics.topUsers && analytics.topUsers.length > 0 ? (
            analytics.topUsers.slice(0, 10).map((user: any, index: number) => (
              <div class="contributor-item">
                <div class="contributor-rank">#{index + 1}</div>
                <div class="contributor-info">
                  <div class="contributor-name">
                    {user.display_name || `User ${index + 1}`}
                  </div>
                  <div class="contributor-stats">
                    {user.total_comments || 0} comments •{" "}
                    {user.reputation_score || 0} reputation
                  </div>
                </div>
                <div class="contributor-badge">
                  {user.total_reads || 0} reads
                </div>
              </div>
            ))
          ) : (
            <div class="empty-contributors">
              <p>Loading contributor data...</p>
            </div>
          )
        }
      </div>
    </div>

    <!-- Engagement Insights -->
    <div class="insights-section">
      <div class="insights-header">
        <h3>Engagement Insights</h3>
      </div>
      <div class="insights-grid">
        <div class="insight-card">
          <div class="insight-icon">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path d="M9 19c-5 0-8-1-8-6V9c0-5 3-6 8-6s8 1 8 6v4c0 5-3 6-8 6z"
              ></path>
              <path d="M9 10a3 3 0 1 0 0-6 3 3 0 0 0 0 6z"></path>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
            </svg>
          </div>
          <div class="insight-content">
            <div class="insight-title">Community Health</div>
            <div class="insight-value" data-metric="community-health">
              {
                moderationEfficiency > 80
                  ? "Excellent"
                  : moderationEfficiency > 60
                    ? "Good"
                    : moderationEfficiency > 40
                      ? "Fair"
                      : "Needs Attention"
              }
            </div>
            <div class="insight-description">
              Based on moderation efficiency (<span
                data-metric="efficiency-percent">{moderationEfficiency}%</span
              >)
            </div>
          </div>
        </div>

        <div class="insight-card">
          <div class="insight-icon">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path d="M18 20V10"></path>
              <path d="M12 20V4"></path>
              <path d="M6 20v-6"></path>
            </svg>
          </div>
          <div class="insight-content">
            <div class="insight-title">Growth Trend</div>
            <div class="insight-value" data-metric="growth-trend">
              {
                userGrowthPercent > 20
                  ? "📈 High Growth"
                  : userGrowthPercent > 10
                    ? "📊 Steady Growth"
                    : userGrowthPercent > 0
                      ? "📉 Slow Growth"
                      : "📉 No Growth"
              }
            </div>
            <div class="insight-description">
              Monthly user growth: <span data-metric="monthly-growth"
                >{userGrowthPercent}%</span
              >
            </div>
          </div>
        </div>

        <div class="insight-card">
          <div class="insight-icon">
            <svg
              width="24"
              height="24"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <path
                d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
              ></path>
            </svg>
          </div>
          <div class="insight-content">
            <div class="insight-title">Engagement Rate</div>
            <div class="insight-value" data-metric="engagement-rate">
              {engagementRate}%
            </div>
            <div class="insight-description">Active users vs total users</div>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { adminAPIManager } from "../../lib/admin-api";
  import { adminAuthManager } from "../../lib/admin/auth";

  // Global state
  let isLoading = false;
  let currentData: any = null;

  function isLocalStorageAvailable(): boolean {
    try {
      return typeof window !== "undefined" && window.localStorage !== undefined;
    } catch (e) {
      return false;
    }
  }

  function showLoading(): void {
    isLoading = true;
    const overlay = document.getElementById("loading-overlay");
    if (overlay) (overlay as HTMLElement).style.display = "flex";
  }

  function hideLoading(): void {
    isLoading = false;
    const overlay = document.getElementById("loading-overlay");
    if (overlay) (overlay as HTMLElement).style.display = "none";
  }

  function showError(message: string): void {
    const banner = document.getElementById("error-banner");
    const messageEl = document.getElementById("error-message");
    if (banner && messageEl) {
      messageEl.textContent = message;
      (banner as HTMLElement).style.display = "flex";
    }
  }

  function hideError(): void {
    const banner = document.getElementById("error-banner");
    if (banner) (banner as HTMLElement).style.display = "none";
  }

  function updateMetrics(data: any): void {
    if (!data) return;

    const metrics = {
      "total-comments": data.comments?.total || 0,
      "pending-comments": data.comments?.pending || 0,
      "active-users": data.users?.active || 0,
      "total-users": data.users?.total || 0,
      "published-articles": data.content?.publishedArticles || 0,
      "active-subscribers": data.newsletter?.activeSubscribers || 0,
      "stat-approved": data.comments?.approved || 0,
      "stat-pending": data.comments?.pending || 0,
      "stat-flagged": data.comments?.flagged || 0,
      "total-article-likes": data.engagement?.totalArticleLikes || 0,
      "total-article-saves": data.engagement?.totalArticleSaves || 0,
      "total-comment-reactions": data.engagement?.totalCommentReactions || 0,
      "avg-engagement": data.engagement?.avgEngagementPerArticle || 0,
    };

    Object.entries(metrics).forEach(([key, value]) => {
      const elements = document.querySelectorAll(`[data-metric="${key}"]`);
      elements.forEach((el) => {
        if (el) el.textContent = value.toString();
      });
    });

    const lastUpdated = document.getElementById("last-updated");
    if (lastUpdated && data.generatedAt) {
      lastUpdated.textContent = `Last updated: ${new Date(data.generatedAt).toLocaleString()}`;
    }
  }

  async function loadAnalyticsData(range: string = "30d"): Promise<void> {
    if (isLoading) return;

    try {
      showLoading();
      hideError();

      

      // Initialize the singleton manager
      await adminAPIManager.initialize();

      const [dashboardResult, analyticsResult] = await Promise.all([
        adminAPIManager.getDashboardStats(),
        adminAPIManager.getAnalyticsData(range),
      ]);

      if (dashboardResult.success && dashboardResult.data) {
        currentData = dashboardResult.data;
        updateMetrics(currentData);
        
      } else {
        throw new Error(
          dashboardResult.error || "Failed to load dashboard stats"
        );
      }

      if (analyticsResult.success && analyticsResult.data) {
        updateChartData(analyticsResult.data);
        updateContributors(analyticsResult.data.topUsers || []);
        console.log(
          "✅ Analytics data loaded successfully:",
          analyticsResult.data
        );
      } else {
        console.warn("⚠️ Analytics data not available:", analyticsResult.error);
      }
    } catch (error: any) {
      console.error("❌ Analytics loading error:", error);

      // Handle authentication errors
      if (
        error.message.includes("session") ||
        error.message.includes("authenticated")
      ) {
        setTimeout(() => {
          window.location.href = `/auth/admin-signin?error=${encodeURIComponent(error.message)}`;
        }, 2000);
      }

      showError(
        error.message || "Failed to load analytics data. Using fallback data."
      );
    } finally {
      hideLoading();
    }
  }

  function updateChartData(data: any): void {
    if (!data?.growth || data.growth.length === 0) return;

    const chartBars = document.getElementById("chart-bars");
    const chartLabels = document.getElementById("chart-labels");

    if (!chartBars || !chartLabels) return;

    const recentData = data.growth.slice(-7);
    const maxCount = Math.max(...recentData.map((d: any) => d.comments));

    chartBars.innerHTML = "";
    chartLabels.innerHTML = "";

    recentData.forEach((day: any) => {
      const height = maxCount > 0 ? (day.comments / maxCount) * 100 : 20;
      const dayName = new Date(day.date).toLocaleDateString("en-US", {
        weekday: "short",
      });

      const bar = document.createElement("div");
      bar.className = "bar";
      bar.style.height = `${height}%`;
      bar.title = `${dayName}: ${day.comments} comments`;
      chartBars.appendChild(bar);

      const label = document.createElement("span");
      label.textContent = dayName;
      chartLabels.appendChild(label);
    });
  }

  function updateContributors(users: any[]): void {
    const contributorsList = document.getElementById("contributors-list");
    if (!contributorsList) return;

    if (!users || users.length === 0) {
      contributorsList.innerHTML =
        '<div class="empty-contributors"><p>No contributors data available</p></div>';
      return;
    }

    contributorsList.innerHTML = users
      .slice(0, 10)
      .map(
        (user: any, index: number) => `
      <div class="contributor-item">
        <div class="contributor-rank">#${index + 1}</div>
        <div class="contributor-info">
          <div class="contributor-name">${user.display_name || `User ${index + 1}`}</div>
          <div class="contributor-stats">${user.total_comments || 0} comments • ${user.reputation_score || 0} reputation</div>
        </div>
        <div class="contributor-badge">${user.total_reads || 0} reads</div>
      </div>
    `
      )
      .join("");
  }

  async function exportData(): Promise<void> {
    try {
      showLoading();

      // Use singleton manager
      await adminAPIManager.initialize();
      const result = await adminAPIManager.exportUsers("csv");

      if (result.success && typeof result.data === "string") {
        const blob = new Blob([result.data], { type: "text/csv" });
        const url = window.URL.createObjectURL(blob);
        const a = document.createElement("a");
        a.href = url;
        a.download = `analytics-${new Date().toISOString().split("T")[0]}.csv`;
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
        window.URL.revokeObjectURL(url);
        showNotification("Analytics data exported successfully", "success");
      } else {
        throw new Error(result.error || "Failed to export data");
      }
    } catch (error: any) {
      console.error("Export error:", error);
      showNotification("Failed to export analytics data", "error");
    } finally {
      hideLoading();
    }
  }

  function showNotification(
    message: string,
    type: "success" | "error" = "success"
  ): void {
    const notification = document.createElement("div");
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed; top: 20px; right: 20px; padding: 1rem 1.5rem;
      color: white; font-weight: 500; z-index: 10000; border-radius: 4px;
      background: ${type === "success" ? "#238636" : "#da3633"};
      animation: slideIn 0.3s ease;
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  }

  // Initialize when DOM is loaded
  document.addEventListener("DOMContentLoaded", async () => {
    

    try {
      // Verify authentication first
      await adminAuthManager.initialize();
      const user = await adminAuthManager.getCurrentUser();

      if (!user) {
        throw new Error("Authentication required");
      }

      
      await loadAnalyticsData();
    } catch (error: any) {
      console.error("❌ Analytics initialization error:", error);
      showError("Authentication required. Please refresh the page.");

      // Redirect to sign in after delay
      setTimeout(() => {
        window.location.href = `/auth/admin-signin?error=${encodeURIComponent(error.message)}`;
      }, 3000);
    }

    // Time range buttons
    const rangeButtons = document.querySelectorAll(
      ".range-btn"
    ) as NodeListOf<HTMLButtonElement>;
    rangeButtons.forEach((button) => {
      button.addEventListener("click", async () => {
        if (isLoading) return;
        rangeButtons.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");
        const range = (button as HTMLElement).dataset.range;
        if (range) {
          
          await loadAnalyticsData(range);
        }
      });
    });

    // Chart controls
    const chartButtons = document.querySelectorAll(
      ".chart-btn"
    ) as NodeListOf<HTMLButtonElement>;
    chartButtons.forEach((button) => {
      button.addEventListener("click", () => {
        chartButtons.forEach((btn) => btn.classList.remove("active"));
        button.classList.add("active");
        console.log(
          "📈 Chart type changed:",
          (button as HTMLElement).dataset.chart
        );
      });
    });

    // Export button
    const exportBtn = document.getElementById(
      "export-btn"
    ) as HTMLButtonElement;
    if (exportBtn) {
      exportBtn.addEventListener("click", exportData);
    }

    // Retry button
    const retryBtn = document.getElementById("retry-btn") as HTMLButtonElement;
    if (retryBtn) {
      retryBtn.addEventListener("click", async () => {
        const btnText = retryBtn.querySelector(".btn-text") as HTMLElement;
        const btnSpinner = retryBtn.querySelector(
          ".btn-spinner"
        ) as HTMLElement;

        if (btnText) btnText.style.display = "none";
        if (btnSpinner) btnSpinner.style.display = "flex";

        await loadAnalyticsData();

        if (btnText) btnText.style.display = "block";
        if (btnSpinner) btnSpinner.style.display = "none";
      });
    }
  });

  // Add animation styles
  if (!document.getElementById("analytics-animations")) {
    const style = document.createElement("style");
    style.id = "analytics-animations";
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
    `;
    document.head.appendChild(style);
  }
</script>
