---
// src/pages/admin/reset-password.astro
import Layout from "../../layouts/Layout.astro";

// Type assertion to ensure TypeScript recognizes the properties
const user = (Astro.locals as any).user;
const isAdmin = (Astro.locals as any).isAdmin;

if (!user || !isAdmin) {
  return Astro.redirect("/auth/signin");
}
---

<Layout title="Admin Password Reset | TinkByte">
  <div class="admin-reset-container">
    <div class="admin-reset-form">
      <h1>Admin Password Reset</h1>
      <p>Reset password for: <strong>{user.email}</strong></p>

      <form id="admin-reset-form">
        <div class="form-group">
          <label for="current-password">Current Password</label>
          <input
            type="password"
            id="current-password"
            class="form-input"
            placeholder="Enter current password"
            required
          />
        </div>

        <div class="form-group">
          <label for="new-password">New Password</label>
          <input
            type="password"
            id="new-password"
            class="form-input"
            placeholder="Enter new password"
            required
            minlength="8"
          />
        </div>

        <div class="form-group">
          <label for="confirm-password">Confirm New Password</label>
          <input
            type="password"
            id="confirm-password"
            class="form-input"
            placeholder="Confirm new password"
            required
            minlength="8"
          />
        </div>

        <button type="submit" class="admin-btn" id="reset-btn">
          <span class="btn-text">Update Password</span>
          <div class="btn-spinner" style="display: none;">⏳</div>
        </button>
      </form>

      <!-- Error and Success Messages -->
      <div class="error-message" id="error-message" style="display: none;">
        <span id="error-text"></span>
      </div>

      <div class="success-message" id="success-message" style="display: none;">
        <span id="success-text"></span>
      </div>

      <div class="admin-options">
        <a href="/admin">← Back to Admin Panel</a>
        <a href="/auth/signout">Sign Out</a>
      </div>
    </div>
  </div>
</Layout>

<style>
  .admin-reset-container {
    min-height: 100vh;
    display: flex;
    align-items: center;
    justify-content: center;
    background: #0f172a;
    padding: 2rem;
  }

  .admin-reset-form {
    background: #1e293b;
    border: 1px solid #334155;
    padding: 2rem;
    max-width: 400px;
    width: 100%;
  }

  h1 {
    color: #f1f5f9;
    margin-bottom: 0.5rem;
    text-align: center;
  }

  p {
    color: #94a3b8;
    text-align: center;
    margin-bottom: 2rem;
    font-size: 0.875rem;
  }

  .form-group {
    margin-bottom: 1rem;
  }

  .form-group label {
    display: block;
    color: #f1f5f9;
    font-size: 0.875rem;
    margin-bottom: 0.5rem;
    font-weight: 500;
  }

  .form-input {
    width: 100%;
    padding: 0.875rem;
    background: #0f172a;
    border: 1px solid #334155;
    color: #f1f5f9;
    font-size: 0.875rem;
    box-sizing: border-box;
  }

  .form-input:focus {
    outline: none;
    border-color: #3b82f6;
  }

  .admin-btn {
    width: 100%;
    padding: 0.875rem;
    background: #3b82f6;
    color: white;
    border: none;
    font-weight: 600;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
  }

  .admin-btn:hover {
    background: #2563eb;
  }

  .admin-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }

  .admin-options {
    text-align: center;
    margin-top: 1rem;
  }

  .admin-options a {
    color: #94a3b8;
    text-decoration: none;
    font-size: 0.875rem;
    display: block;
    margin-bottom: 0.5rem;
  }

  .admin-options a:hover {
    color: #f1f5f9;
  }

  .error-message,
  .success-message {
    padding: 0.75rem;
    font-size: 0.875rem;
    margin-top: 1rem;
    text-align: center;
  }

  .error-message {
    background: rgba(239, 68, 68, 0.1);
    border: 1px solid #ef4444;
    color: #ef4444;
  }

  .success-message {
    background: rgba(34, 197, 94, 0.1);
    border: 1px solid #22c55e;
    color: #22c55e;
  }
</style>

<script>
  import { supabase } from "../../lib/supabase.js";

  document.addEventListener("DOMContentLoaded", async () => {
    const form = document.getElementById("admin-reset-form") as HTMLFormElement;
    const currentPasswordInput = document.getElementById(
      "current-password"
    ) as HTMLInputElement;
    const newPasswordInput = document.getElementById(
      "new-password"
    ) as HTMLInputElement;
    const confirmPasswordInput = document.getElementById(
      "confirm-password"
    ) as HTMLInputElement;
    const submitBtn = document.getElementById("reset-btn") as HTMLButtonElement;
    const btnText = submitBtn?.querySelector(".btn-text") as HTMLElement;
    const btnSpinner = submitBtn?.querySelector(".btn-spinner") as HTMLElement;
    const errorMessage = document.getElementById(
      "error-message"
    ) as HTMLElement;
    const errorText = document.getElementById("error-text") as HTMLElement;
    const successMessage = document.getElementById(
      "success-message"
    ) as HTMLElement;
    const successText = document.getElementById("success-text") as HTMLElement;

    function showError(message: string): void {
      if (errorText && errorMessage) {
        errorText.textContent = message;
        errorMessage.style.display = "block";
        if (successMessage) successMessage.style.display = "none";
      }
    }

    function showSuccess(message: string): void {
      if (successText && successMessage) {
        successText.textContent = message;
        successMessage.style.display = "block";
        if (errorMessage) errorMessage.style.display = "none";
      }
    }

    function hideMessages(): void {
      if (errorMessage) errorMessage.style.display = "none";
      if (successMessage) successMessage.style.display = "none";
    }

    form?.addEventListener("submit", async (e: Event) => {
      e.preventDefault();
      hideMessages();

      const currentPassword = currentPasswordInput.value.trim();
      const newPassword = newPasswordInput.value.trim();
      const confirmPassword = confirmPasswordInput.value.trim();

      // Validation
      if (!currentPassword) {
        showError("Please enter your current password");
        return;
      }

      if (newPassword.length < 8) {
        showError("New password must be at least 8 characters long");
        return;
      }

      if (newPassword !== confirmPassword) {
        showError("New passwords do not match");
        return;
      }

      if (currentPassword === newPassword) {
        showError("New password must be different from current password");
        return;
      }

      // Show loading
      submitBtn.disabled = true;
      btnText.style.display = "none";
      btnSpinner.style.display = "block";

      try {
        // Get current session
        const {
          data: { session },
          error: sessionError,
        } = await supabase.auth.getSession();

        if (sessionError || !session) {
          throw new Error("Session expired. Please sign in again.");
        }

        // Use API endpoint for password update
        const response = await fetch("/api/auth/update-password", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${session.access_token}`,
          },
          body: JSON.stringify({
            currentPassword,
            newPassword,
          }),
        });

        const result = await response.json();

        if (!response.ok) {
          throw new Error(result.error || "Failed to update password");
        }

        showSuccess("Password updated successfully!");

        // Clear form
        currentPasswordInput.value = "";
        newPasswordInput.value = "";
        confirmPasswordInput.value = "";

        // Redirect to admin panel after successful update
        setTimeout(() => {
          window.location.href = "/admin";
        }, 2000);
      } catch (error: any) {
        console.error("Password update error:", error);
        showError(error.message || "Failed to update password");
      } finally {
        submitBtn.disabled = false;
        btnText.style.display = "block";
        btnSpinner.style.display = "none";
      }
    });
  });
</script>
