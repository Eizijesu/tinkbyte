---
// src/pages/admin/authors.astro - FIXED VERSION
import AdminLayout from "../../layouts/AdminLayout.astro";
---

<AdminLayout title="Authors Management - TinkByte Admin">
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-spinner">
      <div class="spinner-square"></div>
      <span>Loading authors...</span>
    </div>
  </div>

  <!-- Error Banner -->
  <div id="error-banner" class="error-banner" style="display: none;">
    <i class="fas fa-exclamation-triangle"></i>
    <span id="error-message">An error occurred</span>
    <button class="retry-btn" id="retry-btn">
      <i class="fas fa-redo"></i>
      Retry
    </button>
  </div>

  <div class="authors-container">
    <!-- Authors Header -->
    <div class="authors-header">
      <div class="header-content">
        <h1>Authors Management</h1>
        <p>Manage your content creators and contributors</p>
      </div>
      <div class="header-actions">
        <button class="create-author-btn" id="create-author-btn">
          <span class="btn-spinner" id="create-spinner" style="display: none;">
            <div class="spinner-square small"></div>
          </span>
          <i class="fas fa-plus"></i>
          Add Author
        </button>
        <button class="export-authors-btn" id="export-authors-btn">
          <span class="btn-spinner" id="export-spinner" style="display: none;">
            <div class="spinner-square small"></div>
          </span>
          <i class="fas fa-download"></i>
          Export Authors
        </button>
      </div>
    </div>

    <!-- Authors Stats -->
    <div class="authors-stats">
      <div class="stat-card primary">
        <div class="stat-icon">
          <i class="fas fa-users"></i>
        </div>
        <div class="stat-content">
          <span class="stat-number" id="total-authors">-</span>
          <span class="stat-label">Total Authors</span>
          <span class="stat-change positive" id="active-authors"
            >Loading...</span
          >
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">
          <i class="fas fa-check-circle"></i>
        </div>
        <div class="stat-content">
          <span class="stat-number" id="verified-authors">-</span>
          <span class="stat-label">Verified Authors</span>
          <span class="stat-change neutral" id="verification-rate"
            >Loading...</span
          >
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">
          <i class="fas fa-star"></i>
        </div>
        <div class="stat-content">
          <span class="stat-number" id="featured-authors">-</span>
          <span class="stat-label">Featured Authors</span>
          <span class="stat-change neutral">Most popular</span>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">
          <i class="fas fa-file-alt"></i>
        </div>
        <div class="stat-content">
          <span class="stat-number" id="total-articles">-</span>
          <span class="stat-label">Total Articles</span>
          <span class="stat-change neutral">Published content</span>
        </div>
      </div>
    </div>

    <!-- Search and Filters -->
    <div class="authors-controls">
      <div class="search-container">
        <i class="fas fa-search"></i>
        <input type="text" placeholder="Search authors..." id="author-search" />
      </div>
      <div class="filter-container">
        <select class="filter-select" id="status-filter">
          <option value="">All Status</option>
          <option value="active">Active</option>
          <option value="inactive">Inactive</option>
          <option value="verified">Verified</option>
          <option value="featured">Featured</option>
        </select>
        <select class="filter-select" id="sort-filter">
          <option value="created_at">Newest First</option>
          <option value="name">Name A-Z</option>
          <option value="article_count">Most Articles</option>
          <option value="updated_at">Recently Updated</option>
        </select>
      </div>
    </div>

    <!-- Authors Grid -->
    <div class="authors-grid" id="authors-grid">
      <!-- Authors will be loaded dynamically -->
    </div>

    <!-- Pagination -->
    <div id="pagination" class="pagination-container">
      <!-- Pagination will be loaded here -->
    </div>

    <!-- Create/Edit Author Modal -->
    <div id="author-modal" class="modal" style="display: none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3 id="author-modal-title">Add New Author</h3>
          <button class="modal-close" id="author-modal-close">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <form id="author-form" class="author-form">
            <div class="form-row">
              <div class="form-group">
                <label for="author-name">Author Name *</label>
                <input
                  type="text"
                  id="author-name"
                  name="name"
                  required
                  placeholder="e.g., John Smith"
                />
              </div>
              <div class="form-group">
                <label for="author-slug">URL Slug *</label>
                <input
                  type="text"
                  id="author-slug"
                  name="slug"
                  required
                  placeholder="e.g., john-smith"
                />
              </div>
            </div>

            <div class="form-group">
              <label for="author-bio">Bio</label>
              <textarea
                id="author-bio"
                name="bio"
                rows="4"
                placeholder="Author biography and background..."></textarea>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label for="author-email">Email</label>
                <input
                  type="email"
                  id="author-email"
                  name="email"
                  placeholder="author@example.com"
                />
              </div>
              <div class="form-group">
                <label for="author-role">Role</label>
                <input
                  type="text"
                  id="author-role"
                  name="role"
                  placeholder="e.g., Senior Product Manager"
                />
              </div>
            </div>

            <div class="form-row">
              <div class="form-group">
                <label for="author-company">Company</label>
                <input
                  type="text"
                  id="author-company"
                  name="company"
                  placeholder="e.g., TechCorp Inc."
                />
              </div>
              <div class="form-group">
                <label for="author-avatar">Avatar URL</label>
                <input
                  type="url"
                  id="author-avatar"
                  name="avatar"
                  placeholder="https://example.com/avatar.jpg"
                />
              </div>
            </div>

            <div class="form-group">
              <label>Social Links</label>
              <div class="social-inputs">
                <input
                  type="url"
                  name="social_twitter"
                  placeholder="Twitter URL"
                />
                <input
                  type="url"
                  name="social_linkedin"
                  placeholder="LinkedIn URL"
                />
                <input
                  type="url"
                  name="social_github"
                  placeholder="GitHub URL"
                />
                <input
                  type="url"
                  name="social_website"
                  placeholder="Website URL"
                />
              </div>
            </div>

            <div class="form-group">
              <div class="checkbox-group">
                <label class="checkbox-label">
                  <input
                    type="checkbox"
                    name="is_active"
                    id="author-active"
                    checked
                  />
                  <span>Active Author</span>
                </label>
                <label class="checkbox-label">
                  <input
                    type="checkbox"
                    name="is_verified"
                    id="author-verified"
                  />
                  <span>Verified Author</span>
                </label>
                <label class="checkbox-label">
                  <input type="checkbox" name="featured" id="author-featured" />
                  <span>Featured Author</span>
                </label>
              </div>
            </div>

            <div class="form-actions">
              <button type="button" class="cancel-btn" id="author-cancel"
                >Cancel</button
              >
              <button type="submit" class="save-btn" id="author-save">
                <span
                  class="btn-spinner"
                  id="save-spinner"
                  style="display: none;"
                >
                  <div class="spinner-square small"></div>
                </span>
                <i class="fas fa-save"></i>
                Save Author
              </button>
            </div>
          </form>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { adminAPIManager } from "../../lib/admin-api.js";
  import { adminAuthManager } from "../../lib/admin/auth.js";

  interface Author {
    id: string;
    slug: string;
    name: string;
    bio?: string;
    avatar?: string;
    role?: string;
    company?: string;
    email?: string;
    social?: Record<string, string>;
    featured: boolean;
    is_verified: boolean;
    is_active: boolean;
    article_count?: number;
    follower_count?: number;
    created_at: string;
    updated_at?: string;
  }

  interface DashboardStats {
    totalAuthors: number;
    activeAuthors: number;
    verifiedAuthors: number;
    featuredAuthors: number;
    totalArticles: number;
  }

  interface PaginationInfo {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  }

  let authors: Author[] = [];
  let currentEditingAuthorId: string | null = null;
  let currentPage = 1;
  let currentFilters = {
    search: "",
    status: "",
    sort: "created_at",
  };

  // Declare global function
  declare global {
    interface Window {
      goToPage: (page: number) => Promise<void>;
    }
  }

  document.addEventListener("DOMContentLoaded", async () => {
    try {
      await new Promise((resolve) => setTimeout(resolve, 100));
      await initializeAuthorsManagement();
    } catch (error) {
      console.error("Authors management initialization error:", error);
      showError(
        "Failed to initialize authors management. Please refresh and try again."
      );
    }
  });

  async function initializeAuthorsManagement() {
    showLoading(true);

    try {
      // Initialize singleton managers
      await adminAuthManager.initialize();
      await adminAPIManager.initialize();

      

      // Test connection using singleton
      const connectionTest = await adminAPIManager.testConnection();
      if (!connectionTest.success) {
        throw new Error(connectionTest.error || "Connection test failed");
      }

      await Promise.all([loadAuthors(), loadDashboardStats()]);
      setupEventListeners();
      showLoading(false);
    } catch (error: any) {
      console.error("Initialization error:", error);
      showError(error.message || "Failed to load authors data");
      showLoading(false);
    }
  }

  async function loadAuthors(page = 1) {
    try {
      // Use singleton API manager
      const response = await adminAPIManager.getAuthors({
        page,
        limit: 20,
        search: currentFilters.search,
        status: currentFilters.status,
        sortBy: currentFilters.sort,
        sortOrder: "desc",
      });

      if (response.success && response.data) {
        if (page === 1) {
          authors = response.data;
        } else {
          authors = [...authors, ...response.data];
        }
        renderAuthors();
        renderPagination(response.pagination);
      } else {
        throw new Error(response.error || "Failed to load authors");
      }
    } catch (error: any) {
      console.error("Load authors error:", error);
      throw error;
    }
  }

  async function loadDashboardStats() {
    try {
      // Use singleton API manager
      const response = await adminAPIManager.getAuthors({ limit: 1000 });

      if (response.success && response.data) {
        const allAuthors = response.data;

        const stats: DashboardStats = {
          totalAuthors: allAuthors.length,
          activeAuthors: allAuthors.filter((a) => a.is_active).length,
          verifiedAuthors: allAuthors.filter((a) => a.is_verified).length,
          featuredAuthors: allAuthors.filter((a) => a.featured).length,
          totalArticles: allAuthors.reduce(
            (sum, a) => sum + (a.article_count || 0),
            0
          ),
        };

        updateDashboardStats(stats);
      }
    } catch (error: any) {
      console.error("Load dashboard stats error:", error);
    }
  }

  function renderAuthors() {
    const authorsGrid = document.getElementById("authors-grid");
    if (!authorsGrid) return;

    if (authors.length === 0) {
      authorsGrid.innerHTML = `
        <div class="empty-state">
          <i class="fas fa-users"></i>
          <h3>No authors found</h3>
          <p>Start building your content team by adding your first author</p>
          <button class="create-first-author-btn" id="create-first-author">
            <i class="fas fa-plus"></i>
            Add First Author
          </button>
        </div>
      `;

      const createFirstBtn = document.getElementById(
        "create-first-author"
      ) as HTMLButtonElement;
      createFirstBtn?.addEventListener("click", () => openAuthorModal());
      return;
    }

    authorsGrid.innerHTML = authors
      .map((author) => {
        const social = author.social || {};
        const socialLinks: string[] = [];

        if (social.twitter)
          socialLinks.push(
            `<a href="${social.twitter}" class="social-link" target="_blank"><i class="fab fa-twitter"></i></a>`
          );
        if (social.linkedin)
          socialLinks.push(
            `<a href="${social.linkedin}" class="social-link" target="_blank"><i class="fab fa-linkedin"></i></a>`
          );
        if (social.github)
          socialLinks.push(
            `<a href="${social.github}" class="social-link" target="_blank"><i class="fab fa-github"></i></a>`
          );
        if (social.website)
          socialLinks.push(
            `<a href="${social.website}" class="social-link" target="_blank"><i class="fas fa-globe"></i></a>`
          );

        const badges: string[] = [];
        if (author.is_active)
          badges.push('<span class="author-badge active">Active</span>');
        else badges.push('<span class="author-badge inactive">Inactive</span>');
        if (author.is_verified)
          badges.push('<span class="author-badge verified">Verified</span>');
        if (author.featured)
          badges.push('<span class="author-badge featured">Featured</span>');

        return `
        <div class="author-card" data-author-id="${author.id}">
          <div class="author-header">
            <div class="author-avatar">
              ${
                author.avatar
                  ? `<img src="${author.avatar}" alt="${author.name}" />`
                  : `<span>${author.name.charAt(0).toUpperCase()}</span>`
              }
            </div>
            <div class="author-info">
              <h3 class="author-name">${author.name}</h3>
              ${author.role ? `<p class="author-role">${author.role}</p>` : ""}
              ${author.company ? `<p class="author-company">${author.company}</p>` : ""}
            </div>
          </div>

          ${author.bio ? `<div class="author-bio">${author.bio}</div>` : ""}

          <div class="author-stats">
            <div class="author-stat">
              <span class="author-stat-number">${author.article_count || 0}</span>
              <span class="author-stat-label">Articles</span>
            </div>
            <div class="author-stat">
              <span class="author-stat-number">${author.follower_count || 0}</span>
              <span class="author-stat-label">Followers</span>
            </div>
          </div>

          <div class="author-badges">
            ${badges.join("")}
          </div>

          ${
            socialLinks.length > 0
              ? `<div class="author-social">${socialLinks.join("")}</div>`
              : ""
          }

          <div class="author-actions">
            <button class="action-btn edit" data-action="edit" data-author-id="${author.id}">
              <i class="fas fa-edit"></i>
              Edit
            </button>
            <button class="action-btn delete" data-action="delete" data-author-id="${author.id}">
              <i class="fas fa-trash"></i>
              Delete
            </button>
          </div>
        </div>
      `;
      })
      .join("");

    const actionButtons = authorsGrid.querySelectorAll(
      ".action-btn"
    ) as NodeListOf<HTMLButtonElement>;
    actionButtons.forEach((button) => {
      button.addEventListener("click", handleAuthorAction);
    });
  }

  function renderPagination(pagination?: PaginationInfo) {
    const container = document.getElementById("pagination");
    if (!container || !pagination) return;

    if (pagination.totalPages <= 1) {
      container.innerHTML = "";
      return;
    }

    let paginationHtml = '<div class="pagination-buttons">';

    if (pagination.page > 1) {
      paginationHtml += `<button class="pagination-btn" onclick="window.goToPage(${pagination.page - 1})">Previous</button>`;
    }

    for (
      let i = Math.max(1, pagination.page - 2);
      i <= Math.min(pagination.totalPages, pagination.page + 2);
      i++
    ) {
      const isActive = i === pagination.page;
      paginationHtml += `<button class="pagination-btn ${isActive ? "active" : ""}" onclick="window.goToPage(${i})">${i}</button>`;
    }

    if (pagination.page < pagination.totalPages) {
      paginationHtml += `<button class="pagination-btn" onclick="window.goToPage(${pagination.page + 1})">Next</button>`;
    }

    paginationHtml += "</div>";
    container.innerHTML = paginationHtml;
  }

  function updateDashboardStats(stats: DashboardStats) {
    const elements = {
      totalAuthors: document.getElementById("total-authors"),
      verifiedAuthors: document.getElementById("verified-authors"),
      featuredAuthors: document.getElementById("featured-authors"),
      totalArticles: document.getElementById("total-articles"),
      activeAuthors: document.getElementById("active-authors"),
    };

    if (elements.totalAuthors)
      elements.totalAuthors.textContent = stats.totalAuthors.toString();
    if (elements.verifiedAuthors)
      elements.verifiedAuthors.textContent = stats.verifiedAuthors.toString();
    if (elements.featuredAuthors)
      elements.featuredAuthors.textContent = stats.featuredAuthors.toString();
    if (elements.totalArticles)
      elements.totalArticles.textContent = stats.totalArticles.toString();
    if (elements.activeAuthors) {
      elements.activeAuthors.textContent = `${stats.activeAuthors} active`;
    }
  }

  async function handleAuthorAction(event: Event) {
    const button = event.currentTarget as HTMLButtonElement;
    const action = button.dataset.action;
    const authorId = button.dataset.authorId;

    if (!action || !authorId) return;

    const originalContent = button.innerHTML;
    button.innerHTML = '<div class="spinner-square small"></div>';
    button.disabled = true;

    try {
      switch (action) {
        case "edit":
          await editAuthor(authorId);
          break;
        case "delete":
          if (
            confirm(
              "Are you sure you want to delete this author? This action cannot be undone."
            )
          ) {
            await deleteAuthor(authorId);
          }
          break;
      }
    } catch (error: any) {
      console.error(`Author ${action} error:`, error);
      showNotification(`Failed to ${action} author: ${error.message}`, "error");
    } finally {
      button.innerHTML = originalContent;
      button.disabled = false;
    }
  }

  async function editAuthor(authorId: string) {
    const author = authors.find((a) => a.id === authorId);
    if (author) {
      openAuthorModal(author);
    } else {
      throw new Error("Author not found");
    }
  }

  async function deleteAuthor(authorId: string) {
    // Use singleton API manager
    const result = await adminAPIManager.deleteAuthor(authorId);

    if (result.success) {
      authors = authors.filter((a) => a.id !== authorId);
      renderAuthors();
      await loadDashboardStats();
      showNotification("Author deleted successfully", "success");
    } else {
      throw new Error(result.error || "Failed to delete author");
    }
  }

  function openAuthorModal(author?: Author) {
    const modal = document.getElementById("author-modal");
    const modalTitle = document.getElementById("author-modal-title");
    const form = document.getElementById("author-form") as HTMLFormElement;

    if (!modal || !modalTitle || !form) return;

    if (author) {
      currentEditingAuthorId = author.id;
      modalTitle.textContent = "Edit Author";
      populateAuthorForm(author);
    } else {
      currentEditingAuthorId = null;
      modalTitle.textContent = "Add New Author";
      form.reset();
    }

    modal.style.display = "flex";
  }

  function closeAuthorModal() {
    const modal = document.getElementById("author-modal");
    if (modal) {
      modal.style.display = "none";
    }
    currentEditingAuthorId = null;
  }

  function populateAuthorForm(author: Author) {
    const form = document.getElementById("author-form") as HTMLFormElement;
    if (!form) return;

    (form.querySelector('[name="name"]') as HTMLInputElement).value =
      author.name || "";
    (form.querySelector('[name="slug"]') as HTMLInputElement).value =
      author.slug || "";
    (form.querySelector('[name="bio"]') as HTMLTextAreaElement).value =
      author.bio || "";
    (form.querySelector('[name="email"]') as HTMLInputElement).value =
      author.email || "";
    (form.querySelector('[name="role"]') as HTMLInputElement).value =
      author.role || "";
    (form.querySelector('[name="company"]') as HTMLInputElement).value =
      author.company || "";
    (form.querySelector('[name="avatar"]') as HTMLInputElement).value =
      author.avatar || "";

    const social = author.social || {};
    (form.querySelector('[name="social_twitter"]') as HTMLInputElement).value =
      social.twitter || "";
    (form.querySelector('[name="social_linkedin"]') as HTMLInputElement).value =
      social.linkedin || "";
    (form.querySelector('[name="social_github"]') as HTMLInputElement).value =
      social.github || "";
    (form.querySelector('[name="social_website"]') as HTMLInputElement).value =
      social.website || "";

    (form.querySelector('[name="is_active"]') as HTMLInputElement).checked =
      author.is_active;
    (form.querySelector('[name="is_verified"]') as HTMLInputElement).checked =
      author.is_verified;
    (form.querySelector('[name="featured"]') as HTMLInputElement).checked =
      author.featured;
  }

  function generateSlug(name: string): string {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, "")
      .replace(/\s+/g, "-")
      .replace(/-+/g, "-")
      .trim();
  }

  async function handleAuthorFormSubmit(e: Event) {
    e.preventDefault();

    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);
    const saveBtn = form.querySelector(".save-btn") as HTMLButtonElement;
    const spinner = form.querySelector(".btn-spinner") as HTMLElement;

    if (saveBtn && spinner) {
      saveBtn.disabled = true;
      spinner.style.display = "flex";
    }

    try {
      const authorData = {
        name: formData.get("name") as string,
        slug: formData.get("slug") as string,
        bio: (formData.get("bio") as string) || undefined,
        email: (formData.get("email") as string) || undefined,
        role: (formData.get("role") as string) || undefined,
        company: (formData.get("company") as string) || undefined,
        avatar: (formData.get("avatar") as string) || undefined,
        social: {
          twitter: (formData.get("social_twitter") as string) || undefined,
          linkedin: (formData.get("social_linkedin") as string) || undefined,
          github: (formData.get("social_github") as string) || undefined,
          website: (formData.get("social_website") as string) || undefined,
        },
        is_active: formData.has("is_active"),
        is_verified: formData.has("is_verified"),
        featured: formData.has("featured"),
      };

      const isEdit = currentEditingAuthorId !== null;
      let result;

      // Use singleton API manager
      if (isEdit) {
        result = await adminAPIManager.updateAuthor(
          currentEditingAuthorId!,
          authorData
        );
      } else {
        result = await adminAPIManager.createAuthor(authorData);
      }

      if (result.success) {
        showNotification(
          isEdit
            ? "Author updated successfully"
            : "Author created successfully",
          "success"
        );
        closeAuthorModal();
        await loadAuthors(1);
        await loadDashboardStats();
      } else {
        throw new Error(result.error || "Failed to save author");
      }
    } catch (error: any) {
      console.error("Author form submission error:", error);
      showNotification("An error occurred while saving the author", "error");
    } finally {
      if (saveBtn && spinner) {
        saveBtn.disabled = false;
        spinner.style.display = "none";
      }
    }
  }

  function setupEventListeners() {
    const createAuthorBtn = document.getElementById(
      "create-author-btn"
    ) as HTMLButtonElement;
    createAuthorBtn?.addEventListener("click", () => openAuthorModal());

    const exportAuthorsBtn = document.getElementById(
      "export-authors-btn"
    ) as HTMLButtonElement;
    exportAuthorsBtn?.addEventListener("click", exportAuthors);

    const modalClose = document.getElementById(
      "author-modal-close"
    ) as HTMLButtonElement;
    const cancelBtn = document.getElementById(
      "author-cancel"
    ) as HTMLButtonElement;
    modalClose?.addEventListener("click", closeAuthorModal);
    cancelBtn?.addEventListener("click", closeAuthorModal);

    const modal = document.getElementById("author-modal");
    modal?.addEventListener("click", (e) => {
      if (e.target === modal) closeAuthorModal();
    });

    const form = document.getElementById("author-form") as HTMLFormElement;
    form?.addEventListener("submit", handleAuthorFormSubmit);

    const nameInput = document.getElementById(
      "author-name"
    ) as HTMLInputElement;
    const slugInput = document.getElementById(
      "author-slug"
    ) as HTMLInputElement;
    nameInput?.addEventListener("input", (e) => {
      const name = (e.target as HTMLInputElement).value;
      const slug = generateSlug(name);
      if (slugInput) {
        slugInput.value = slug;
      }
    });

    const authorSearch = document.getElementById(
      "author-search"
    ) as HTMLInputElement;
    authorSearch?.addEventListener("input", debounce(handleSearch, 300));

    const statusFilter = document.getElementById(
      "status-filter"
    ) as HTMLSelectElement;
    const sortFilter = document.getElementById(
      "sort-filter"
    ) as HTMLSelectElement;
    statusFilter?.addEventListener("change", handleFilters);
    sortFilter?.addEventListener("change", handleFilters);

    const retryBtn = document.getElementById("retry-btn") as HTMLButtonElement;
    retryBtn?.addEventListener("click", () => {
      hideError();
      initializeAuthorsManagement();
    });
  }

  async function handleSearch() {
    const searchInput = document.getElementById(
      "author-search"
    ) as HTMLInputElement;
    currentFilters.search = searchInput?.value || "";
    currentPage = 1;
    await loadAuthors(1);
  }

  async function handleFilters() {
    const statusFilter = document.getElementById(
      "status-filter"
    ) as HTMLSelectElement;
    const sortFilter = document.getElementById(
      "sort-filter"
    ) as HTMLSelectElement;

    currentFilters.status = statusFilter?.value || "";
    currentFilters.sort = sortFilter?.value || "created_at";
    currentPage = 1;
    await loadAuthors(1);
  }

  async function exportAuthors() {
    const exportBtn = document.getElementById(
      "export-authors-btn"
    ) as HTMLButtonElement;
    const spinner = document.getElementById("export-spinner");

    if (exportBtn && spinner) {
      exportBtn.disabled = true;
      spinner.style.display = "flex";
    }

    try {
      const csvHeaders = [
        "Name",
        "Slug",
        "Email",
        "Role",
        "Company",
        "Status",
        "Verified",
        "Featured",
        "Articles",
        "Created",
      ];
      const csvData = authors.map((author) => [
        author.name,
        author.slug,
        author.email || "",
        author.role || "",
        author.company || "",
        author.is_active ? "Active" : "Inactive",
        author.is_verified ? "Yes" : "No",
        author.featured ? "Yes" : "No",
        author.article_count || 0,
        new Date(author.created_at).toLocaleDateString(),
      ]);

      const csvContent = [
        csvHeaders.join(","),
        ...csvData.map((row) =>
          row.map((cell) => `"${String(cell).replace(/"/g, '""')}"`).join(",")
        ),
      ].join("\n");

      const blob = new Blob([csvContent], { type: "text/csv;charset=utf-8;" });
      const link = document.createElement("a");
      const url = URL.createObjectURL(blob);
      link.setAttribute("href", url);
      link.setAttribute(
        "download",
        `authors-${new Date().toISOString().split("T")[0]}.csv`
      );
      link.style.visibility = "hidden";
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);

      showNotification("Authors exported successfully", "success");
    } catch (error: any) {
      console.error("Export error:", error);
      showNotification("Failed to export authors", "error");
    } finally {
      if (exportBtn && spinner) {
        exportBtn.disabled = false;
        spinner.style.display = "none";
      }
    }
  }

  // Global pagination function
  window.goToPage = async function (page: number) {
    currentPage = page;
    await loadAuthors(page);
  };

  function showLoading(show: boolean) {
    const loadingOverlay = document.getElementById("loading-overlay");
    if (loadingOverlay) {
      loadingOverlay.style.display = show ? "flex" : "none";
    }
  }

  function showError(message: string) {
    const errorBanner = document.getElementById("error-banner");
    const errorMessage = document.getElementById("error-message");

    if (errorBanner && errorMessage) {
      errorMessage.textContent = message;
      errorBanner.style.display = "flex";
    }
  }

  function hideError() {
    const errorBanner = document.getElementById("error-banner");
    if (errorBanner) {
      errorBanner.style.display = "none";
    }
  }

  function showNotification(
    message: string,
    type: "success" | "error" = "success"
  ) {
    const notification = document.createElement("div");
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 1rem 1.5rem;
      color: white;
      font-weight: 500;
      z-index: 10000;
      background: ${type === "success" ? "#238636" : "#da3633"};
      animation: slideIn 0.3s ease;
    `;

    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 4000);
  }

  function debounce(func: Function, wait: number) {
    let timeout: NodeJS.Timeout;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Add slideIn animation
  if (!document.getElementById("authors-animations")) {
    const style = document.createElement("style");
    style.id = "authors-animations";
    style.textContent = `
      @keyframes slideIn {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
    `;
    document.head.appendChild(style);
  }
</script>
