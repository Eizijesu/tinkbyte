---
// src/pages/admin/moderation.astro - SINGLETON VERSION
import AdminLayout from "../../layouts/AdminLayout.astro";
---

<AdminLayout title="Comment Moderation - TinkByte Admin">
  <div class="moderation-container">
    <!-- Loading Overlay -->
    <div id="loading-overlay" class="loading-overlay" style="display: none;">
      <div class="loading-spinner">
        <div class="spinner-square"></div>
        <span>Processing moderation action...</span>
      </div>
    </div>

    <!-- Error Banner -->
    <div id="error-banner" class="error-banner" style="display: none;">
      <svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="15" y1="9" x2="9" y2="15"></line>
        <line x1="9" y1="9" x2="15" y2="15"></line>
      </svg>
      <span id="error-message">Unable to load moderation data</span>
      <button id="retry-btn" class="retry-btn">
        <span class="btn-text">Retry</span>
        <div class="btn-spinner" style="display: none;">
          <div class="spinner-square small"></div>
        </div>
      </button>
    </div>

    <!-- Page Header -->
    <div class="moderation-header">
      <div class="header-content">
        <h1>Comment Moderation</h1>
        <p>Manage and moderate user comments across your platform</p>
      </div>
      <div class="header-actions">
        <button class="export-btn" id="export-comments">
          <i class="fas fa-download"></i>
          Export Comments
        </button>
      </div>
    </div>

    <!-- Moderation Stats Cards -->
    <div class="moderation-stats-grid">
      <div class="stat-card urgent">
        <div class="stat-icon">
          <i class="fas fa-clock"></i>
        </div>
        <div class="stat-content">
          <div class="stat-number" id="pending-stat">-</div>
          <div class="stat-label">Pending Review</div>
          <div class="stat-action">
            <a href="#" data-tab="pending">Review Now</a>
          </div>
        </div>
      </div>

      <div class="stat-card warning">
        <div class="stat-icon">
          <i class="fas fa-flag"></i>
        </div>
        <div class="stat-content">
          <div class="stat-number" id="flagged-stat">0</div>
          <div class="stat-label">Flagged</div>
          <div class="stat-action">
            <a href="#" data-tab="flagged">View All</a>
          </div>
        </div>
      </div>

      <div class="stat-card success">
        <div class="stat-icon">
          <i class="fas fa-check"></i>
        </div>
        <div class="stat-content">
          <div class="stat-number" id="approved-stat">0</div>
          <div class="stat-label">Approved</div>
          <div class="stat-action">
            <a href="#" data-tab="approved">View All</a>
          </div>
        </div>
      </div>
    </div>

    <!-- Tab Navigation -->
    <div class="tab-navigation">
      <button class="tab-button active" data-tab="pending">
        <i class="fas fa-clock"></i>
        <span>Pending Comments</span>
        <span class="tab-count" id="pending-tab-count">(0)</span>
      </button>
      <button class="tab-button" data-tab="flagged">
        <i class="fas fa-flag"></i>
        <span>Flagged Content</span>
        <span class="tab-count" id="flagged-tab-count">(0)</span>
      </button>
      <button class="tab-button" data-tab="approved">
        <i class="fas fa-check"></i>
        <span>Approved</span>
        <span class="tab-count" id="approved-tab-count">(0)</span>
      </button>
    </div>

    <!-- Tab Content Areas -->
    <div class="tab-content-container">
      <!-- Pending Comments Tab -->
      <div id="pending-tab" class="tab-content active">
        <div class="tab-header">
          <h2>Pending Comments</h2>
          <div class="bulk-actions">
            <button class="bulk-btn approve-bulk" id="bulk-approve">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-check"></i>
              Approve Selected
            </button>
            <button class="bulk-btn reject-bulk" id="bulk-reject">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-times"></i>
              Reject Selected
            </button>
          </div>
        </div>

        <div class="comments-list" id="pending-comments">
          <div class="empty-state" id="pending-empty">
            <i class="fas fa-comments"></i>
            <h3>Loading pending comments...</h3>
            <p>Please wait while we load the moderation queue</p>
          </div>
        </div>
      </div>

      <!-- Flagged Comments Tab -->
      <div id="flagged-tab" class="tab-content">
        <div class="tab-header">
          <h2>Flagged Comments</h2>
          <div class="bulk-actions">
            <button class="bulk-btn approve-bulk" id="bulk-restore">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-undo"></i>
              Restore Selected
            </button>
            <button class="bulk-btn reject-bulk" id="bulk-delete">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-trash"></i>
              Delete Selected
            </button>
          </div>
        </div>

        <div class="comments-list" id="flagged-comments">
          <div class="empty-state" id="flagged-empty">
            <i class="fas fa-flag"></i>
            <h3>Loading flagged comments...</h3>
            <p>Please wait while we load flagged content</p>
          </div>
        </div>
      </div>

      <!-- Approved Comments Tab -->
      <div id="approved-tab" class="tab-content">
        <div class="tab-header">
          <h2>Recently Approved Comments</h2>
        </div>

        <div class="comments-list" id="approved-comments">
          <div class="empty-state" id="approved-empty">
            <i class="fas fa-check-circle"></i>
            <h3>Loading approved comments...</h3>
            <p>Please wait while we load recent approvals</p>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { adminAPIManager } from "../../lib/admin-api.js";
  import { adminAuthManager } from "../../lib/admin/auth.js";
  import { getAdminRealtimeManager } from "../../lib/admin/realtime-manager.js";

  declare global {
    interface WindowEventMap {
      adminMetricsUpdate: CustomEvent;
    }
  }

  // Singleton-based Moderation Manager
  class ModerationManager {
    private static instance: ModerationManager;
    private isInitialized: boolean = false;
    private isLoading: boolean = false;
    private realtimeManager: any = null;
    private currentData: any = {
      pending: [],
      flagged: [],
      approved: [],
    };

    private constructor() {}

    static getInstance(): ModerationManager {
      if (!ModerationManager.instance) {
        ModerationManager.instance = new ModerationManager();
      }
      return ModerationManager.instance;
    }

    async initialize(): Promise<void> {
      if (this.isInitialized) return;

      try {
        console.log("🚀 Initializing Moderation Manager...");

        // Initialize admin API manager
        await adminAPIManager.initialize();

        // Initialize realtime manager
        this.realtimeManager = getAdminRealtimeManager();
        await this.realtimeManager.initialize();

        // Setup event listeners
        this.setupEventListeners();
        this.setupRealtimeUpdates();

        // Load initial data
        await this.loadModerationData();

        this.isInitialized = true;
        console.log("✅ Moderation Manager initialized successfully");
      } catch (error) {
        console.error("❌ Moderation Manager initialization failed:", error);
        this.showError(
          error.message || "Failed to initialize moderation system"
        );
        throw error;
      }
    }

    private setupRealtimeUpdates(): void {
      window.addEventListener("adminMetricsUpdate", (event: CustomEvent) => {
        console.log("📊 Moderation real-time update:", event.detail);

        if (
          event.detail.type === "comment" ||
          event.detail.type === "moderation"
        ) {
          // Refresh data after a short delay
          setTimeout(() => {
            this.loadModerationData();
          }, 1000);
        }
      });
    }

    private async loadModerationData(): Promise<void> {
      if (this.isLoading) return;

      try {
        this.showLoading();
        this.hideError();

        console.log(
          "🔄 Loading moderation data using singleton API manager..."
        );

        const [pendingResult, flaggedResult, approvedResult] =
          await Promise.allSettled([
            adminAPIManager.getComments({ status: "pending", limit: 50 }),
            adminAPIManager.getComments({ status: "flagged", limit: 50 }),
            adminAPIManager.getComments({ status: "approved", limit: 50 }),
          ]);

        this.currentData = {
          pending:
            pendingResult.status === "fulfilled" && pendingResult.value.success
              ? pendingResult.value.data || []
              : [],
          flagged:
            flaggedResult.status === "fulfilled" && flaggedResult.value.success
              ? flaggedResult.value.data || []
              : [],
          approved:
            approvedResult.status === "fulfilled" &&
            approvedResult.value.success
              ? approvedResult.value.data || []
              : [],
        };

        this.updateModerationUI();
        this.updateStats();
        console.log(
          "✅ Moderation data loaded successfully:",
          this.currentData
        );
      } catch (error: any) {
        console.error("❌ Moderation loading error:", error);
        this.showError(error.message || "Failed to load moderation data");
      } finally {
        this.hideLoading();
      }
    }

    private updateModerationUI(): void {
      this.updateCommentsTab("pending", this.currentData.pending);
      this.updateCommentsTab("flagged", this.currentData.flagged);
      this.updateCommentsTab("approved", this.currentData.approved);
    }

    private updateCommentsTab(tabType: string, comments: any[]): void {
      const container = document.getElementById(`${tabType}-comments`);
      const emptyState = document.getElementById(`${tabType}-empty`);

      if (!container || !emptyState) return;

      if (!comments || comments.length === 0) {
        emptyState.innerHTML = `
          <i class="fas fa-${this.getTabIcon(tabType)}"></i>
          <h3>No ${tabType} comments</h3>
          <p>${this.getEmptyMessage(tabType)}</p>
        `;
        emptyState.style.display = "block";
        return;
      }

      emptyState.style.display = "none";

      const commentsHTML = comments
        .map((comment) => {
          const userProfile = comment.profiles;
          const displayName =
            userProfile?.display_name ||
            comment.guest_name ||
            (userProfile?.email ? userProfile.email.split("@")[0] : null) ||
            "Anonymous User";

          const isGuest = !comment.user_id;
          const hasProfile = !!userProfile;

          return `
            <div class="comment-item ${tabType}" data-comment-id="${comment.id}">
              <div class="comment-header">
                ${
                  tabType !== "approved"
                    ? `
                  <div class="comment-checkbox">
                    <input type="checkbox" class="comment-select" value="${comment.id}" />
                  </div>
                `
                    : ""
                }
                <div class="user-info">
                  <div class="user-avatar">
                    ${
                      hasProfile && userProfile.avatar_url
                        ? `<img src="${userProfile.avatar_url}" alt="Avatar" />`
                        : `<div class="avatar-preset ${isGuest ? "guest-avatar" : ""}">
                          ${displayName.charAt(0).toUpperCase()}
                        </div>`
                    }
                  </div>
                  <div class="user-details">
                    <span class="user-name">
                      ${displayName}
                      ${isGuest ? '<span class="guest-badge">GUEST</span>' : ""}
                      ${hasProfile && userProfile.is_admin ? '<span class="admin-badge">ADMIN</span>' : ""}
                    </span>
                    <span class="user-rep">
                      ${isGuest ? "Guest User" : `Rep: ${userProfile?.reputation_score || 0}`}
                    </span>
                  </div>
                </div>
                <div class="comment-meta">
                  <span class="comment-date">
                    ${new Date(comment.created_at).toLocaleDateString()}
                  </span>
                  <span class="article-title">
                    ${comment.articles?.title || "Unknown Article"}
                  </span>
                </div>
              </div>

              <div class="comment-content">
                <p>${comment.content}</p>
                ${
                  comment.mention_users?.length > 0
                    ? `
                  <div class="mentions">
                    <i class="fas fa-at"></i>
                    <span>Mentions: ${comment.mention_users.length} users</span>
                  </div>
                `
                    : ""
                }
                ${
                  comment.moderation_reason
                    ? `
                  <div class="moderation-reason">
                    <i class="fas fa-info-circle"></i>
                    <span>Reason: ${comment.moderation_reason}</span>
                  </div>
                `
                    : ""
                }
              </div>

              <div class="comment-actions">
                ${this.getActionButtons(tabType, comment.id)}
              </div>
            </div>
          `;
        })
        .join("");

      container.innerHTML = commentsHTML;
      this.attachCommentActionListeners();
    }

    private getTabIcon(tabType: string): string {
      switch (tabType) {
        case "pending":
          return "clock";
        case "flagged":
          return "flag";
        case "approved":
          return "check-circle";
        default:
          return "comments";
      }
    }

    private getActionButtons(tabType: string, commentId: string): string {
      switch (tabType) {
        case "pending":
          return `
            <button class="action-btn approve" data-action="approve" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-check"></i>
              Approve
            </button>
            <button class="action-btn reject" data-action="reject" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-times"></i>
              Reject
            </button>
            <button class="action-btn flag" data-action="flag" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-flag"></i>
              Flag
            </button>
          `;
        case "flagged":
          return `
            <button class="action-btn approve" data-action="approve" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-check"></i>
              Restore
            </button>
            <button class="action-btn delete" data-action="hide" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-trash"></i>
              Delete
            </button>
          `;
        case "approved":
          return `
            <button class="action-btn flag" data-action="flag" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-flag"></i>
              Flag
            </button>
            <button class="action-btn hide" data-action="reject" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;">
                <div class="spinner-square small"></div>
              </div>
              <i class="fas fa-eye-slash"></i>
              Hide
            </button>
          `;
        default:
          return "";
      }
    }

    private getEmptyMessage(tabType: string): string {
      switch (tabType) {
        case "pending":
          return "All comments have been moderated. Great job!";
        case "flagged":
          return "No comments are currently flagged for review.";
        case "approved":
          return "No comments have been approved recently.";
        default:
          return "No comments found.";
      }
    }

    private updateStats(): void {
      const stats = {
        pending: this.currentData.pending?.length || 0,
        flagged: this.currentData.flagged?.length || 0,
        approved: this.currentData.approved?.length || 0,
      };

      // Update stat numbers
      const elements = {
        pendingStat: document.getElementById("pending-stat"),
        flaggedStat: document.getElementById("flagged-stat"),
        approvedStat: document.getElementById("approved-stat"),
        pendingTabCount: document.getElementById("pending-tab-count"),
        flaggedTabCount: document.getElementById("flagged-tab-count"),
        approvedTabCount: document.getElementById("approved-tab-count"),
      };

      if (elements.pendingStat)
        elements.pendingStat.textContent = stats.pending.toString();
      if (elements.flaggedStat)
        elements.flaggedStat.textContent = stats.flagged.toString();
      if (elements.approvedStat)
        elements.approvedStat.textContent = stats.approved.toString();
      if (elements.pendingTabCount)
        elements.pendingTabCount.textContent = `(${stats.pending})`;
      if (elements.flaggedTabCount)
        elements.flaggedTabCount.textContent = `(${stats.flagged})`;
      if (elements.approvedTabCount)
        elements.approvedTabCount.textContent = `(${stats.approved})`;
    }

    private attachCommentActionListeners(): void {
      const actionButtons = document.querySelectorAll(".action-btn");
      actionButtons.forEach((button) => {
        button.addEventListener("click", async (e) => {
          const btn = e.currentTarget as HTMLButtonElement;
          const action = btn.dataset.action;
          const commentId = btn.dataset.commentId;

          if (action && commentId) {
            if (
              action === "hide" &&
              !confirm(
                "Are you sure you want to delete this comment? This action cannot be undone."
              )
            ) {
              return;
            }
            await this.moderateComment(commentId, action, btn);
          }
        });
      });
    }

    private async moderateComment(
      commentId: string,
      action: string,
      buttonElement: HTMLButtonElement
    ): Promise<void> {
      const spinner = buttonElement.querySelector(
        ".btn-spinner"
      ) as HTMLElement;
      const icon = buttonElement.querySelector("i") as HTMLElement;

      // Show loading state
      buttonElement.disabled = true;
      if (spinner) spinner.style.display = "flex";
      if (icon) icon.style.display = "none";

      try {
        const reason =
          action === "reject" || action === "flag"
            ? prompt(`Please provide a reason for ${action}ing this comment:`)
            : null;

        if ((action === "reject" || action === "flag") && !reason) {
          return;
        }

        // Use singleton API manager
        const result = await adminAPIManager.moderateComment(
          commentId,
          action,
          reason || undefined
        );

        if (result.success) {
          // Remove comment from UI
          const commentElement = document.querySelector(
            `[data-comment-id="${commentId}"]`
          ) as HTMLElement;
          if (commentElement) {
            commentElement.style.opacity = "0.5";
            setTimeout(() => {
              commentElement.remove();
              this.updateStatsAfterAction();
            }, 300);
          }

          this.showNotification(
            result.message || `Comment ${action}ed successfully`,
            "success"
          );
        } else {
          this.showNotification(
            result.error || `Failed to ${action} comment`,
            "error"
          );
        }
      } catch (error) {
        console.error("Moderation error:", error);
        this.showNotification("An error occurred", "error");
      } finally {
        // Hide loading state
        buttonElement.disabled = false;
        if (spinner) spinner.style.display = "none";
        if (icon) icon.style.display = "inline";
      }
    }

    private async bulkModerateComments(
      action: string,
      buttonElement: HTMLButtonElement
    ): Promise<void> {
      const selectedComments = this.getSelectedComments();

      if (selectedComments.length === 0) {
        this.showNotification("Please select comments to moderate", "error");
        return;
      }

      const spinner = buttonElement.querySelector(
        ".btn-spinner"
      ) as HTMLElement;
      const icon = buttonElement.querySelector("i") as HTMLElement;

      // Show loading state
      buttonElement.disabled = true;
      if (spinner) spinner.style.display = "flex";
      if (icon) icon.style.display = "none";

      try {
        const reason =
          action === "reject" || action === "flag"
            ? prompt(
                `Please provide a reason for bulk ${action}ing these comments:`
              )
            : null;

        if ((action === "reject" || action === "flag") && !reason) {
          return;
        }

        // Use singleton API manager
        const result = await adminAPIManager.bulkModerateComments(
          selectedComments,
          action,
          reason || undefined
        );

        if (result.success) {
          // Remove comments from UI
          selectedComments.forEach((commentId) => {
            const commentElement = document.querySelector(
              `[data-comment-id="${commentId}"]`
            ) as HTMLElement;
            if (commentElement) {
              commentElement.style.opacity = "0.5";
              setTimeout(() => {
                commentElement.remove();
              }, 300);
            }
          });

          this.showNotification(
            result.message || "Bulk moderation completed",
            "success"
          );
          this.updateStatsAfterAction();
        } else {
          this.showNotification(
            result.error || "Bulk moderation failed",
            "error"
          );
        }
      } catch (error) {
        console.error("Bulk moderation error:", error);
        this.showNotification(
          "An error occurred during bulk moderation",
          "error"
        );
      } finally {
        // Hide loading state
        buttonElement.disabled = false;
        if (spinner) spinner.style.display = "none";
        if (icon) icon.style.display = "inline";
      }
    }

    private getSelectedComments(): string[] {
      const checkboxes = document.querySelectorAll(
        ".comment-select:checked"
      ) as NodeListOf<HTMLInputElement>;
      return Array.from(checkboxes).map((checkbox) => checkbox.value);
    }

    private updateStatsAfterAction(): void {
      // Recount visible comments
      const pendingCount = document.querySelectorAll(
        "#pending-comments .comment-item"
      ).length;
      const flaggedCount = document.querySelectorAll(
        "#flagged-comments .comment-item"
      ).length;
      const approvedCount = document.querySelectorAll(
        "#approved-comments .comment-item"
      ).length;

      // Update current data
      this.currentData = {
        pending: Array(pendingCount).fill({}),
        flagged: Array(flaggedCount).fill({}),
        approved: Array(approvedCount).fill({}),
      };

      this.updateStats();
    }

    private setupEventListeners(): void {
      // Tab switching
      const tabButtons = document.querySelectorAll(".tab-button");
      const tabContents = document.querySelectorAll(".tab-content");

      tabButtons.forEach((button) => {
        button.addEventListener("click", () => {
          const targetTab = (button as HTMLElement).dataset.tab;
          if (!targetTab) return;

          tabButtons.forEach((btn) => btn.classList.remove("active"));
          tabContents.forEach((content) => content.classList.remove("active"));

          button.classList.add("active");
          const targetContent = document.getElementById(`${targetTab}-tab`);
          if (targetContent) {
            targetContent.classList.add("active");
          }
        });
      });

      // Stat action links
      const statActions = document.querySelectorAll(".stat-action a");
      statActions.forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const targetTab = (link as HTMLElement).dataset.tab;

          if (targetTab) {
            const tabButton = document.querySelector(
              `[data-tab="${targetTab}"]`
            );
            if (tabButton) {
              (tabButton as HTMLElement).click();
            }
          }
        });
      });

      // Bulk action buttons
      const bulkButtons = {
        approve: document.getElementById("bulk-approve"),
        reject: document.getElementById("bulk-reject"),
        restore: document.getElementById("bulk-restore"),
        delete: document.getElementById("bulk-delete"),
      };

      if (bulkButtons.approve) {
        bulkButtons.approve.addEventListener("click", () =>
          this.bulkModerateComments(
            "approve",
            bulkButtons.approve as HTMLButtonElement
          )
        );
      }
      if (bulkButtons.reject) {
        bulkButtons.reject.addEventListener("click", () =>
          this.bulkModerateComments(
            "reject",
            bulkButtons.reject as HTMLButtonElement
          )
        );
      }
      if (bulkButtons.restore) {
        bulkButtons.restore.addEventListener("click", () =>
          this.bulkModerateComments(
            "approve",
            bulkButtons.restore as HTMLButtonElement
          )
        );
      }
      if (bulkButtons.delete) {
        bulkButtons.delete.addEventListener("click", () =>
          this.bulkModerateComments(
            "hide",
            bulkButtons.delete as HTMLButtonElement
          )
        );
      }

      // Retry button
      const retryBtn = document.getElementById("retry-btn");
      if (retryBtn) {
        retryBtn.addEventListener("click", async () => {
          const btnText = retryBtn.querySelector(".btn-text") as HTMLElement;
          const btnSpinner = retryBtn.querySelector(
            ".btn-spinner"
          ) as HTMLElement;

          if (btnText) btnText.style.display = "none";
          if (btnSpinner) btnSpinner.style.display = "flex";

          await this.loadModerationData();

          if (btnText) btnText.style.display = "block";
          if (btnSpinner) btnSpinner.style.display = "none";
        });
      }
    }

    private showLoading(): void {
      this.isLoading = true;
      const overlay = document.getElementById("loading-overlay");
      if (overlay) overlay.style.display = "flex";
    }

    private hideLoading(): void {
      this.isLoading = false;
      const overlay = document.getElementById("loading-overlay");
      if (overlay) overlay.style.display = "none";
    }

    private showError(message: string): void {
      const banner = document.getElementById("error-banner");
      const messageEl = document.getElementById("error-message");
      if (banner && messageEl) {
        messageEl.textContent = message;
        banner.style.display = "flex";
      }
    }

    private hideError(): void {
      const banner = document.getElementById("error-banner");
      if (banner) banner.style.display = "none";
    }

    private showNotification(
      message: string,
      type: "success" | "error" = "success"
    ): void {
      const notification = document.createElement("div");
      notification.className = `notification ${type}`;
      notification.textContent = message;
      notification.style.cssText = `
        position: fixed; top: 20px; right: 20px; padding: 1rem 1.5rem;
        color: white; font-weight: 500; z-index: 10000; border-radius: 4px;
        background: ${type === "success" ? "#238636" : "#da3633"};
        animation: slideIn 0.3s ease; display: flex; align-items: center; gap: 0.5rem;
      `;

      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 3000);
    }

    public async refresh(): Promise<void> {
      await this.loadModerationData();
    }

    public destroy(): void {
      if (this.realtimeManager) {
        this.realtimeManager.destroy();
      }
      this.isInitialized = false;
    }
  }

  // Initialize singleton manager
  let moderationManager: ModerationManager | null = null;

  document.addEventListener("DOMContentLoaded", async () => {
    try {
      console.log("🚀 Moderation dashboard initializing...");

      moderationManager = ModerationManager.getInstance();
      await moderationManager.initialize();

      // Make globally available
      (window as any).moderationManager = moderationManager;

      console.log("✅ Moderation dashboard initialized successfully");
    } catch (error) {
      console.error("❌ Moderation dashboard initialization failed:", error);
    }
  });

  // Cleanup on page unload
  window.addEventListener("beforeunload", () => {
    if (moderationManager) {
      moderationManager.destroy();
    }
  });

  // Add animation styles
  if (!document.getElementById("moderation-animations")) {
    const style = document.createElement("style");
    style.id = "moderation-animations";
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
    `;
    document.head.appendChild(style);
  }
</script>
