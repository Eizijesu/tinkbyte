---
// src/pages/admin/categories.astro - CLEAN VERSION (NO STYLES)
import AdminLayout from "../../layouts/AdminLayout.astro";

// TypeScript interfaces
interface Category {
  id: string;
  name: string;
  slug: string;
  description?: string;
  target_audience?: string;
  color: string;
  icon?: string;
  sort_order: number;
  is_premium: boolean;
  created_at: string;
  article_count: number;
  follower_count?: number;
  is_featured?: boolean;
  featured?: boolean;
}

interface Newsletter {
  id: string;
  name: string;
  slug: string;
  description?: string;
  frequency: string;
  subscriber_count?: number;
  is_active: boolean;
}

interface Article {
  id: string;
  title: string;
  slug: string;
  created_at: string;
  is_published: boolean;
  category_slug: string;
  categories?: {
    name: string;
    slug: string;
    color: string;
  } | null;
}

// Initialize with fallback data for static generation
let categories: Category[] = [];
let newsletters: Newsletter[] = [];
let recentArticles: Article[] = [];
let errorMessage: string | null = null;

// Fallback stats for static generation
const fallbackStats = {
  total: 0,
  premium: 0,
  featured: 0,
  active: 0,
  totalArticles: 0,
};

const stats = fallbackStats;


---

<AdminLayout title="Categories - TinkByte Admin">
  <div class="categories-container">
    <!-- Loading Overlay -->
    <div id="loading-overlay" class="loading-overlay" style="display: none;">
      <div class="loading-spinner">
        <div class="spinner-square"></div>
        <span>Loading categories...</span>
      </div>
    </div>

    <!-- Error Banner -->
    <div id="error-banner" class="error-banner" style="display: none;">
      <svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="15" y1="9" x2="9" y2="15"></line>
        <line x1="9" y1="9" x2="15" y2="15"></line>
      </svg>
      <span id="error-message">Unable to load categories data</span>
      <button id="retry-btn" class="retry-btn">
        <span class="btn-text">Retry</span>
        <div class="btn-spinner" style="display: none;">
          <div class="spinner-square small"></div>
        </div>
      </button>
    </div>

    <!-- Categories Header -->
    <div class="categories-header">
      <div class="header-content">
        <h1>Categories</h1>
        <p>Manage your content categories and organization</p>
      </div>
      <div class="header-actions">
        <button class="add-category-btn" id="add-category-btn">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
          Add New Category
        </button>
        <button class="bulk-actions-btn" id="bulk-actions-btn">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M9 12l2 2 4-4"></path>
            <rect x="3" y="3" width="18" height="18" rx="2" ry="2"></rect>
          </svg>
          Bulk Actions
        </button>
        <a href="/admin/index.html" class="cms-link-btn" target="_blank">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M18 13v6a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V8a2 2 0 0 1 2-2h6"
            ></path>
            <polyline points="15,3 21,3 21,9"></polyline>
            <line x1="10" y1="14" x2="21" y2="3"></line>
          </svg>
          Manage in TinaCMS
        </a>
      </div>
    </div>

    <!-- Enhanced Filters and Search -->
    <div class="categories-filters">
      <div class="search-section">
        <div class="search-input-container">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <circle cx="11" cy="11" r="8"></circle>
            <path d="M21 21l-4.35-4.35"></path>
          </svg>
          <input
            type="text"
            placeholder="Search categories..."
            id="category-search"
          />
        </div>
      </div>
      <div class="filter-section">
        <select id="status-filter" class="filter-select">
          <option value="">All Categories</option>
          <option value="premium">Premium Only</option>
          <option value="featured">Featured Only</option>
          <option value="active">Active (with articles)</option>
          <option value="inactive">Inactive (no articles)</option>
        </select>
        <select id="sort-filter" class="filter-select">
          <option value="sort_order">Sort Order</option>
          <option value="name">Name A-Z</option>
          <option value="created_at">Newest First</option>
          <option value="article_count">Most Articles</option>
        </select>
        <button class="filter-btn" id="apply-filters">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <polygon points="22,3 2,3 10,12.46 10,19 14,21 14,12.46"></polygon>
          </svg>
          Apply Filters
        </button>
      </div>
    </div>

    <!-- Categories Stats -->
    <div class="categories-stats" id="categories-stats">
      <div class="stat-card">
        <div class="stat-icon">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"
            ></path>
            <line x1="7" y1="7" x2="7.01" y2="7"></line>
          </svg>
        </div>
        <div class="stat-content">
          <span class="stat-number" data-stat="total">{stats.total}</span>
          <span class="stat-label">Total Categories</span>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
            ></path>
          </svg>
        </div>
        <div class="stat-content">
          <span class="stat-number" data-stat="premium">{stats.premium}</span>
          <span class="stat-label">Premium Categories</span>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <polygon
              points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"
            ></polygon>
          </svg>
        </div>
        <div class="stat-content">
          <span class="stat-number" data-stat="featured">{stats.featured}</span>
          <span class="stat-label">Featured Categories</span>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M18 20V10"></path>
            <path d="M12 20V4"></path>
            <path d="M6 20v-6"></path>
          </svg>
        </div>
        <div class="stat-content">
          <span class="stat-number" data-stat="active">{stats.active}</span>
          <span class="stat-label">Active Categories</span>
        </div>
      </div>
      <div class="stat-card">
        <div class="stat-icon">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"
            ></path>
            <polyline points="14,2 14,8 20,8"></polyline>
            <line x1="16" y1="13" x2="8" y2="13"></line>
            <line x1="16" y1="17" x2="8" y2="17"></line>
            <polyline points="10,9 9,9 8,9"></polyline>
          </svg>
        </div>
        <div class="stat-content">
          <span class="stat-number" data-stat="total-articles"
            >{stats.totalArticles}</span
          >
          <span class="stat-label">Total Articles</span>
        </div>
      </div>
    </div>

    <!-- Categories Grid -->
    <div class="categories-grid" id="categories-grid">
      <div class="empty-state" id="empty-state">
        <svg
          width="48"
          height="48"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
        >
          <path
            d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"
          ></path>
          <line x1="7" y1="7" x2="7.01" y2="7"></line>
        </svg>
        <h3>Loading categories...</h3>
        <p>Please wait while we load your categories</p>
      </div>
    </div>

    <!-- Newsletter Integration Section -->
    <div class="newsletter-integration-section" id="newsletter-section">
      <h2>Newsletter Integration</h2>
      <div class="newsletter-grid" id="newsletter-grid">
        <div class="newsletter-empty">
          <p>Loading newsletter data...</p>
        </div>
      </div>
    </div>

    <!-- Recent Articles section -->
    <div class="recent-articles-section" id="recent-articles-section">
      <h2>Recent Articles by Category</h2>
      <div class="articles-by-category" id="articles-by-category">
        <p class="no-articles">Loading recent articles...</p>
      </div>
    </div>

    <!-- Enhanced Add/Edit Category Modal -->
    <div id="category-modal" class="modal" style="display: none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3 id="modal-title">Add New Category</h3>
          <button class="modal-close" id="modal-close">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
        <form id="category-form" class="modal-form">
          <div class="form-tabs">
            <button type="button" class="tab-btn active" data-tab="basic"
              >Basic Info</button
            >
            <button type="button" class="tab-btn" data-tab="advanced"
              >Advanced</button
            >
            <button type="button" class="tab-btn" data-tab="seo"
              >SEO & Features</button
            >
          </div>

          <!-- Basic Info Tab -->
          <div id="basic-tab" class="tab-content active">
            <div class="form-group">
              <label for="category-name">Category Name *</label>
              <input
                type="text"
                id="category-name"
                name="name"
                required
                placeholder="e.g., Build Thinking"
              />
              <div class="validation-message" id="name-validation"></div>
            </div>

            <div class="form-group">
              <label for="category-slug">URL Slug *</label>
              <input
                type="text"
                id="category-slug"
                name="slug"
                required
                placeholder="e.g., build-thinking"
              />
              <small class="form-help"
                >Auto-generated from name, but you can customize</small
              >
              <div class="validation-message" id="slug-validation"></div>
            </div>

            <div class="form-group">
              <label for="category-description">Description</label>
              <textarea
                id="category-description"
                name="description"
                rows="3"
                placeholder="Brief description of this category..."></textarea>
            </div>

            <div class="form-group">
              <label for="category-target-audience">Target Audience</label>
              <select id="category-target-audience" name="target_audience">
                <option value="">Select target audience</option>
                <option value="Product Managers">Product Managers</option>
                <option value="Developers">Developers</option>
                <option value="Designers">Designers</option>
                <option value="Entrepreneurs">Entrepreneurs</option>
                <option value="General">General Audience</option>
                <option value="Executives">Executives</option>
              </select>
            </div>
          </div>

          <!-- Advanced Tab -->
          <div id="advanced-tab" class="tab-content">
            <div class="form-row">
              <div class="form-group">
                <label for="category-color">Category Color</label>
                <div class="color-picker-container">
                  <input
                    type="color"
                    id="category-color"
                    name="color"
                    value="#243788"
                  />
                  <div class="color-presets">
                    <button
                      type="button"
                      class="color-preset"
                      data-color="#243788"
                      style="background: #243788"></button>
                    <button
                      type="button"
                      class="color-preset"
                      data-color="#4285f4"
                      style="background: #4285f4"></button>
                    <button
                      type="button"
                      class="color-preset"
                      data-color="#34a853"
                      style="background: #34a853"></button>
                    <button
                      type="button"
                      class="color-preset"
                      data-color="#fbbc04"
                      style="background: #fbbc04"></button>
                    <button
                      type="button"
                      class="color-preset"
                      data-color="#ea4335"
                      style="background: #ea4335"></button>
                    <button
                      type="button"
                      class="color-preset"
                      data-color="#9c27b0"
                      style="background: #9c27b0"></button>
                  </div>
                </div>
              </div>

              <div class="form-group">
                <label for="category-icon">Icon Class</label>
                <div class="icon-picker-container">
                  <input
                    type="text"
                    id="category-icon"
                    name="icon"
                    placeholder="e.g., fas fa-lightbulb"
                  />
                  <div class="icon-presets">
                    <button
                      type="button"
                      class="icon-preset"
                      data-icon="fas fa-lightbulb">💡</button
                    >
                    <button
                      type="button"
                      class="icon-preset"
                      data-icon="fas fa-code">💻</button
                    >
                    <button
                      type="button"
                      class="icon-preset"
                      data-icon="fas fa-paint-brush">🎨</button
                    >
                    <button
                      type="button"
                      class="icon-preset"
                      data-icon="fas fa-rocket">🚀</button
                    >
                    <button
                      type="button"
                      class="icon-preset"
                      data-icon="fas fa-chart-line">📈</button
                    >
                    <button
                      type="button"
                      class="icon-preset"
                      data-icon="fas fa-users">👥</button
                    >
                  </div>
                </div>
              </div>

              <div class="form-group">
                <label for="category-sort-order">Sort Order</label>
                <input
                  type="number"
                  id="category-sort-order"
                  name="sort_order"
                  min="0"
                  value="0"
                />
              </div>
            </div>

            <div class="form-group">
              <label>Category Tags</label>
              <div class="tags-input-container">
                <input
                  type="text"
                  id="category-tags"
                  placeholder="Type and press Enter to add tags"
                />
                <div class="tags-display" id="tags-display"></div>
              </div>
            </div>
          </div>

          <!-- SEO & Features Tab -->
          <div id="seo-tab" class="tab-content">
            <div class="form-group">
              <div class="checkbox-group">
                <label class="checkbox-label">
                  <input
                    type="checkbox"
                    id="category-is-premium"
                    name="is_premium"
                  />
                  <span>Premium Category</span>
                  <small>Only premium subscribers can access</small>
                </label>
                <label class="checkbox-label">
                  <input
                    type="checkbox"
                    id="category-is-featured"
                    name="is_featured"
                  />
                  <span>Featured Category</span>
                  <small>Show prominently on homepage</small>
                </label>
                <label class="checkbox-label">
                  <input
                    type="checkbox"
                    id="category-newsletter-enabled"
                    name="newsletter_enabled"
                  />
                  <span>Enable Newsletter</span>
                  <small>Send newsletter updates for this category</small>
                </label>
              </div>
            </div>

            <div class="form-group">
              <label for="category-seo-title">SEO Title</label>
              <input
                type="text"
                id="category-seo-title"
                name="seo_title"
                placeholder="Custom SEO title (optional)"
              />
            </div>

            <div class="form-group">
              <label for="category-seo-description">SEO Description</label>
              <textarea
                id="category-seo-description"
                name="seo_description"
                rows="2"
                placeholder="Custom SEO description (optional)"></textarea>
            </div>
          </div>

          <div class="form-actions">
            <button type="button" class="cancel-btn" id="cancel-btn"
              >Cancel</button
            >
            <button type="submit" class="save-btn" id="save-btn">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <path
                  d="M19 21H5a2 2 0 0 1-2-2V5a2 2 0 0 1 2-2h11l5 5v11a2 2 0 0 1-2 2z"
                ></path>
                <polyline points="17,21 17,13 7,13 7,21"></polyline>
                <polyline points="7,3 7,8 15,8"></polyline>
              </svg>
              Save Category
            </button>
          </div>
        </form>
      </div>
    </div>

    <!-- Bulk Actions Modal -->
    <div id="bulk-actions-modal" class="modal" style="display: none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Bulk Actions</h3>
          <button class="modal-close" id="bulk-modal-close">
            <svg
              width="20"
              height="20"
              viewBox="0 0 24 24"
              fill="none"
              stroke="currentColor"
              stroke-width="2"
            >
              <line x1="18" y1="6" x2="6" y2="18"></line>
              <line x1="6" y1="6" x2="18" y2="18"></line>
            </svg>
          </button>
        </div>
        <div class="bulk-actions-content">
          <div class="bulk-selection-info">
            <span id="bulk-selected-count">0</span> categories selected
          </div>
          <div class="bulk-action-buttons">
            <button class="bulk-action-btn" data-action="feature">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <polygon
                  points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"
                ></polygon>
              </svg>
              Toggle Featured
            </button>
            <button class="bulk-action-btn" data-action="premium">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <path
                  d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"
                ></path>
              </svg>
              Toggle Premium
            </button>
            <button class="bulk-action-btn" data-action="export">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                <polyline points="7,10 12,15 17,10"></polyline>
                <line x1="12" y1="15" x2="12" y2="3"></line>
              </svg>
              Export Selected
            </button>
            <button class="bulk-action-btn danger" data-action="delete">
              <svg
                width="16"
                height="16"
                viewBox="0 0 24 24"
                fill="none"
                stroke="currentColor"
                stroke-width="2"
              >
                <polyline points="3,6 5,6 21,6"></polyline>
                <path
                  d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"
                ></path>
              </svg>
              Delete Selected
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { adminAPIManager } from "../../lib/admin-api";
  import { adminAuthManager } from "../../lib/admin/auth";

  // Global state
  let isLoading = false;
  let currentData: any = null;
  let currentEditingCategoryId: string | null = null;
  let categoryTags: string[] = [];

  // Safe localStorage check
  function isLocalStorageAvailable(): boolean {
    try {
      return typeof window !== "undefined" && window.localStorage !== undefined;
    } catch (e) {
      return false;
    }
  }

  // Show/hide loading overlay
  function showLoading(): void {
    isLoading = true;
    const overlay = document.getElementById("loading-overlay");
    if (overlay) (overlay as HTMLElement).style.display = "flex";
  }

  function hideLoading(): void {
    isLoading = false;
    const overlay = document.getElementById("loading-overlay");
    if (overlay) (overlay as HTMLElement).style.display = "none";
  }

  // Show/hide error banner
  function showError(message: string): void {
    const banner = document.getElementById("error-banner");
    const messageEl = document.getElementById("error-message");
    if (banner && messageEl) {
      messageEl.textContent = message;
      (banner as HTMLElement).style.display = "flex";
    }
  }

  function hideError(): void {
    const banner = document.getElementById("error-banner");
    if (banner) (banner as HTMLElement).style.display = "none";
  }

  // Load categories data using AdminAPI
  async function loadCategoriesData(): Promise<void> {
    if (isLoading) return;

    try {
      showLoading();
      hideError();

      

      // Initialize singleton managers
      await adminAuthManager.initialize();
      await adminAPIManager.initialize();

      

      // Use singleton API manager
      const result = await adminAPIManager.getCategories();

      if (result.success && result.data) {
        currentData = result.data;
        updateCategoriesUI(currentData);
        updateStats(currentData);
        
      } else {
        throw new Error(result.error || "Failed to load categories data");
      }
    } catch (error: any) {
      console.error("❌ Categories loading error:", error);
      showError(
        error.message || "Failed to load categories data. Using fallback data."
      );
    } finally {
      hideLoading();
    }
  }

  // Update categories UI
  function updateCategoriesUI(categories: any[]): void {
    const categoriesGrid = document.getElementById("categories-grid");

    if (!categoriesGrid) return;

    if (!categories || categories.length === 0) {
      categoriesGrid.innerHTML = `
      <div class="empty-state">
        <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z"></path>
          <line x1="7" y1="7" x2="7.01" y2="7"></line>
        </svg>
        <h3>No categories found</h3>
        <p>Create your first category to organize your content</p>
        <button class="create-first-category-btn" id="create-first-category">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="12" y1="5" x2="12" y2="19"></line>
            <line x1="5" y1="12" x2="19" y2="12"></line>
          </svg>
          Create First Category
        </button>
      </div>
    `;

      // Re-attach event listener
      const createBtn = document.getElementById("create-first-category");
      createBtn?.addEventListener("click", () => openModal());
      return;
    }

    // Clear the grid and render categories
    categoriesGrid.innerHTML = categories
      .map(
        (category) => `
    <div class="category-card" data-category-id="${category.id}" data-category-slug="${category.slug}">
      <div class="category-header">
        <div class="category-select">
          <input type="checkbox" class="category-checkbox" value="${category.id}" />
        </div>
        <div class="category-color" style="background-color: ${category.color || "#243788"}"></div>
        <div class="category-info">
          <h3 class="category-name">${category.name}</h3>
          <p class="category-slug">/${category.slug}</p>
        </div>
        <div class="category-badges">
          ${
            category.is_featured
              ? `
            <span class="featured-badge">
              <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"></polygon>
              </svg>
              Featured
            </span>
          `
              : ""
          }
          ${
            category.is_premium
              ? `
            <span class="premium-badge">
              <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
                <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
              </svg>
              Premium
            </span>
          `
              : ""
          }
          <span class="article-count">${category.article_count || 0} articles</span>
        </div>
      </div>

      <div class="category-description">
        <p>${category.description || "No description available"}</p>
        ${
          category.target_audience
            ? `
          <div class="target-audience">
            <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M17 21v-2a4 4 0 0 0-4-4H5a4 4 0 0 0-4 4v2"></path>
              <circle cx="9" cy="7" r="4"></circle>
              <path d="M23 21v-2a4 4 0 0 0-3-3.87"></path>
              <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
            </svg>
            <span>Target: ${category.target_audience}</span>
          </div>
        `
            : ""
        }
      </div>

      <div class="category-meta">
        <div class="meta-item">
          <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="8" y1="6" x2="21" y2="6"></line>
            <line x1="8" y1="12" x2="21" y2="12"></line>
            <line x1="8" y1="18" x2="21" y2="18"></line>
            <line x1="3" y1="6" x2="3.01" y2="6"></line>
            <line x1="3" y1="12" x2="3.01" y2="12"></line>
            <line x1="3" y1="18" x2="3.01" y2="18"></line>
          </svg>
          <span>Order: ${category.sort_order || 0}</span>
        </div>
        <div class="meta-item">
          <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
            <line x1="16" y1="2" x2="16" y2="6"></line>
            <line x1="8" y1="2" x2="8" y2="6"></line>
            <line x1="3" y1="10" x2="21" y2="10"></line>
          </svg>
          <span>Created: ${new Date(category.created_at).toLocaleDateString()}</span>
        </div>
        <div class="meta-item">
          <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M20.84 4.61a5.5 5.5 0 0 0-7.78 0L12 5.67l-1.06-1.06a5.5 5.5 0 0 0-7.78 7.78l1.06 1.06L12 21.23l7.78-7.78 1.06-1.06a5.5 5.5 0 0 0 0-7.78z"></path>
          </svg>
          <span>${category.follower_count || 0} followers</span>
        </div>
      </div>

      ${
        (category.article_count || 0) > 0
          ? `
        <div class="category-impact">
          <div class="impact-warning">
            <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
              <path d="M10.29 3.86L1.82 18a2 2 0 0 0 1.71 3h16.94a2 2 0 0 0 1.71-3L13.71 3.86a2 2 0 0 0-3.42 0z"></path>
              <line x1="12" y1="9" x2="12" y2="13"></line>
              <line x1="12" y1="17" x2="12.01" y2="17"></line>
            </svg>
            <span>Deleting this category will affect ${category.article_count} articles</span>
          </div>
        </div>
      `
          : ""
      }

      <div class="category-actions">
        <button class="action-btn edit" data-action="edit" data-category-id="${category.id}" title="Edit Category">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7"></path>
            <path d="M18.5 2.5a2.12 2.12 0 0 1 3 3l-9.5 9.5-4 1 1-4 9.5-9.5z"></path>
          </svg>
          Edit
        </button>
        <button class="action-btn view" data-action="view" data-category-slug="${category.slug}" title="View Category Page">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M1 12s4-8 11-8 11 8 11 8-4 8-11 8-11-8-11-8z"></path>
            <circle cx="12" cy="12" r="3"></circle>
          </svg>
          View
        </button>
        <button class="action-btn articles" data-action="articles" data-category-id="${category.slug}" title="View Articles">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <path d="M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"></path>
            <polyline points="14,2 14,8 20,8"></polyline>
            <line x1="16" y1="13" x2="8" y2="13"></line>
            <line x1="16" y1="17" x2="8" y2="17"></line>
            <polyline points="10,9 9,9 8,9"></polyline>
          </svg>
          Articles (${category.article_count || 0})
        </button>
        <button class="action-btn feature" data-action="feature" data-category-id="${category.id}" title="${category.is_featured ? "Remove from Featured" : "Add to Featured"}">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polygon points="12,2 15.09,8.26 22,9.27 17,14.14 18.18,21.02 12,17.77 5.82,21.02 7,14.14 2,9.27 8.91,8.26"></polygon>
          </svg>
          ${category.is_featured ? "Unfeature" : "Feature"}
        </button>
        <button class="action-btn delete" data-action="delete" data-category-id="${category.id}" title="Delete Category">
          <svg width="14" height="14" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="3,6 5,6 21,6"></polyline>
            <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6m3 0V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2"></path>
          </svg>
          Delete
        </button>
      </div>
    </div>
`
      )
      .join("");

    // Re-attach event listeners to new elements
    attachCategoryActionListeners();
    attachBulkActionListeners();

    
  }

  // Update stats
  function updateStats(categories: any[]): void {
    if (!categories) return;

    const stats = {
      total: categories.length,
      premium: categories.filter((c) => c.is_premium).length,
      featured: categories.filter((c) => c.is_featured || c.featured).length,
      active: categories.filter((c) => (c.article_count || 0) > 0).length,
      totalArticles: categories.reduce(
        (sum, cat) => sum + (cat.article_count || 0),
        0
      ),
    };

    // Update stat numbers
    const totalEl = document.querySelector('[data-stat="total"]');
    const premiumEl = document.querySelector('[data-stat="premium"]');
    const featuredEl = document.querySelector('[data-stat="featured"]');
    const activeEl = document.querySelector('[data-stat="active"]');
    const totalArticlesEl = document.querySelector(
      '[data-stat="total-articles"]'
    );

    if (totalEl) totalEl.textContent = stats.total.toString();
    if (premiumEl) premiumEl.textContent = stats.premium.toString();
    if (featuredEl) featuredEl.textContent = stats.featured.toString();
    if (activeEl) activeEl.textContent = stats.active.toString();
    if (totalArticlesEl)
      totalArticlesEl.textContent = stats.totalArticles.toString();
  }

  // Attach event listeners to category action buttons
  function attachCategoryActionListeners(): void {
    const actionButtons = document.querySelectorAll(".action-btn");
    actionButtons.forEach((button) => {
      button.addEventListener("click", (e) => {
        const btn = e.currentTarget as HTMLButtonElement;
        const action = btn.dataset.action;
        const categoryId = btn.dataset.categoryId;
        const categorySlug = btn.dataset.categorySlug;

        if (action && (categoryId || categorySlug)) {
          handleCategoryAction(action, categoryId, categorySlug);
        }
      });
    });
  }

  // Attach bulk action listeners
  function attachBulkActionListeners(): void {
    const categoryCheckboxes = document.querySelectorAll(
      ".category-checkbox"
    ) as NodeListOf<HTMLInputElement>;
    categoryCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", updateBulkSelectedCount);
    });
  }

  // Handle category actions
  async function handleCategoryAction(
    action: string,
    categoryId?: string,
    categorySlug?: string
  ): Promise<void> {
    switch (action) {
      case "edit":
        if (categoryId) {
          await editCategory(categoryId);
        }
        break;
      case "view":
        if (categorySlug) {
          window.open(`/blog/categories/${categorySlug}`, "_blank");
        }
        break;
      case "articles":
        if (categorySlug) {
          window.location.href = `/admin/articles?category=${categorySlug}`;
        }
        break;
      case "feature":
        if (categoryId) {
          await toggleCategoryFeature(categoryId);
        }
        break;
      case "delete":
        if (categoryId) {
          const categoryCard = document.querySelector(
            `[data-category-id="${categoryId}"]`
          );
          const articleCount =
            categoryCard
              ?.querySelector(".article-count")
              ?.textContent?.match(/\d+/)?.[0] || "0";

          let confirmMessage = "Are you sure you want to delete this category?";
          if (parseInt(articleCount) > 0) {
            confirmMessage += `\n\nThis will affect ${articleCount} articles. Consider moving them to another category first.`;
          }
          confirmMessage += "\n\nThis action cannot be undone.";

          if (confirm(confirmMessage)) {
            await deleteCategory(categoryId);
          }
        }
        break;
    }
  }

  // Modal functions
  function openModal(category?: any): void {
    const modal = document.getElementById("category-modal");
    const modalTitle = document.getElementById("modal-title");
    const form = document.getElementById("category-form") as HTMLFormElement;

    if (!modal || !modalTitle || !form) return;

    if (category) {
      currentEditingCategoryId = category.id;
      modalTitle.textContent = "Edit Category";
      populateForm(category);
    } else {
      currentEditingCategoryId = null;
      modalTitle.textContent = "Add New Category";
      form.reset();
      categoryTags = [];
      updateTagsDisplay();
      (document.getElementById("category-color") as HTMLInputElement).value =
        "#243788";
    }

    modal.style.display = "flex";
  }

  function closeModal(): void {
    const modal = document.getElementById("category-modal");
    if (modal) {
      modal.style.display = "none";
    }
    currentEditingCategoryId = null;
    categoryTags = [];
    clearValidationMessages();
  }

  function populateForm(category: any): void {
    (document.getElementById("category-name") as HTMLInputElement).value =
      category.name || "";
    (document.getElementById("category-slug") as HTMLInputElement).value =
      category.slug || "";
    (
      document.getElementById("category-description") as HTMLTextAreaElement
    ).value = category.description || "";
    (
      document.getElementById("category-target-audience") as HTMLSelectElement
    ).value = category.target_audience || "";
    (document.getElementById("category-color") as HTMLInputElement).value =
      category.color || "#243788";
    (document.getElementById("category-icon") as HTMLInputElement).value =
      category.icon || "";
    (document.getElementById("category-sort-order") as HTMLInputElement).value =
      category.sort_order || "0";
    (
      document.getElementById("category-is-premium") as HTMLInputElement
    ).checked = category.is_premium || false;
    (
      document.getElementById("category-is-featured") as HTMLInputElement
    ).checked = category.is_featured || false;
    (
      document.getElementById("category-newsletter-enabled") as HTMLInputElement
    ).checked = category.newsletter_enabled || false;
    (document.getElementById("category-seo-title") as HTMLInputElement).value =
      category.seo_title || "";
    (
      document.getElementById("category-seo-description") as HTMLTextAreaElement
    ).value = category.seo_description || "";

    // Load tags if available
    categoryTags = category.tags || [];
    updateTagsDisplay();
  }

  function generateSlug(name: string): string {
    return name
      .toLowerCase()
      .replace(/[^a-z0-9\s-]/g, "")
      .replace(/\s+/g, "-")
      .replace(/-+/g, "-")
      .trim();
  }

  function validateField(field: string, value: string): void {
    const validationElement = document.getElementById(`${field}-validation`);
    if (!validationElement) return;

    let isValid = true;
    let message = "";

    switch (field) {
      case "name":
        if (value.length < 2) {
          isValid = false;
          message = "Name must be at least 2 characters long";
        } else if (value.length > 50) {
          isValid = false;
          message = "Name must be less than 50 characters";
        } else {
          message = "✓ Valid name";
        }
        break;
      case "slug":
        const slugPattern = /^[a-z0-9-]+$/;
        if (!slugPattern.test(value)) {
          isValid = false;
          message =
            "Slug can only contain lowercase letters, numbers, and hyphens";
        } else if (value.length < 2) {
          isValid = false;
          message = "Slug must be at least 2 characters long";
        } else {
          message = "✓ Valid slug";
        }
        break;
    }

    validationElement.textContent = message;
    validationElement.className = `validation-message ${isValid ? "success" : "error"}`;
  }

  function clearValidationMessages(): void {
    const validationMessages = document.querySelectorAll(".validation-message");
    validationMessages.forEach((msg) => {
      msg.textContent = "";
      msg.className = "validation-message";
    });
  }

  function updateTagsDisplay(): void {
    const tagsDisplay = document.getElementById("tags-display");
    if (!tagsDisplay) return;

    tagsDisplay.innerHTML = categoryTags
      .map(
        (tag) => `
      <div class="tag-item">
        ${tag}
        <button type="button" class="tag-remove" onclick="removeTag('${tag}')">
          <svg width="12" height="12" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
    `
      )
      .join("");
  }

  function removeTag(tag: string): void {
    categoryTags = categoryTags.filter((t) => t !== tag);
    updateTagsDisplay();
  }

  function updateBulkSelectedCount(): void {
    const selectedCount = document.querySelectorAll(
      ".category-checkbox:checked"
    ).length;
    const countElement = document.getElementById("bulk-selected-count");
    if (countElement) {
      countElement.textContent = selectedCount.toString();
    }
  }

  // API operations
  async function editCategory(categoryId: string): Promise<void> {
    try {
      // Use singleton API manager
      const result = await adminAPIManager.getCategory(categoryId);

      if (result.success) {
        openModal(result.data);
      } else {
        showNotification("Failed to load category data", "error");
      }
    } catch (error) {
      console.error("Edit category error:", error);
      showNotification("An error occurred while loading the category", "error");
    }
  }

  async function deleteCategory(categoryId: string): Promise<void> {
    try {
      // Use singleton API manager
      const result = await adminAPIManager.deleteCategory(categoryId);

      if (result.success) {
        showNotification("Category deleted successfully", "success");
        const categoryCard = document.querySelector(
          `[data-category-id="${categoryId}"]`
        );
        if (categoryCard) {
          categoryCard.remove();
        }
        // Reload data to update stats
        await loadCategoriesData();
      } else {
        showNotification(result.error || "Failed to delete category", "error");
      }
    } catch (error) {
      console.error("Delete category error:", error);
      showNotification(
        "An error occurred while deleting the category",
        "error"
      );
    }
  }

  async function toggleCategoryFeature(categoryId: string): Promise<void> {
    try {
      // Get current category data first using singleton
      const currentResult = await adminAPIManager.getCategory(categoryId);
      if (!currentResult.success) {
        throw new Error("Failed to get current category data");
      }

      // Toggle the featured status using singleton
      const result = await adminAPIManager.updateCategory(categoryId, {
        is_featured: !currentResult.data.is_featured,
      });

      if (result.success) {
        showNotification("Category feature status updated", "success");
        await loadCategoriesData(); // Reload to show changes
      } else {
        showNotification(result.error || "Failed to update category", "error");
      }
    } catch (error) {
      console.error("Toggle feature error:", error);
      showNotification("An error occurred", "error");
    }
  }

  async function handleFormSubmit(e: Event): Promise<void> {
    e.preventDefault();

    const form = e.target as HTMLFormElement;
    const formData = new FormData(form);

    const categoryData = {
      name: formData.get("name") as string,
      slug: formData.get("slug") as string,
      description: (formData.get("description") as string) || undefined,
      target_audience: (formData.get("target_audience") as string) || undefined,
      color: formData.get("color") as string,
      icon: (formData.get("icon") as string) || undefined,
      sort_order: parseInt(formData.get("sort_order") as string) || 0,
      is_premium: formData.has("is_premium"),
      is_featured: formData.has("is_featured"),
      newsletter_enabled: formData.has("newsletter_enabled"),
      seo_title: (formData.get("seo_title") as string) || undefined,
      seo_description: (formData.get("seo_description") as string) || undefined,
      tags: categoryTags,
    };

    try {
      const isEdit = currentEditingCategoryId !== null;

      let result;
      // Use singleton API manager
      if (isEdit) {
        result = await adminAPIManager.updateCategory(
          currentEditingCategoryId!,
          categoryData
        );
      } else {
        result = await adminAPIManager.createCategory(categoryData);
      }

      if (result.success) {
        showNotification(
          isEdit
            ? "Category updated successfully"
            : "Category created successfully",
          "success"
        );
        closeModal();
        await loadCategoriesData(); // Reload data
      } else {
        showNotification(result.error || "Failed to save category", "error");
      }
    } catch (error) {
      console.error("Form submission error:", error);
      showNotification("An error occurred while saving the category", "error");
    }
  }

  // Show notification
  function showNotification(
    message: string,
    type: "success" | "error" = "success"
  ): void {
    const notification = document.createElement("div");
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 1rem 1.5rem;
      color: white;
      font-weight: 500;
      z-index: 10000;
      background: ${type === "success" ? "#238636" : "#da3633"};
      animation: slideIn 0.3s ease;
    `;

    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  }

  // Event listeners
  document.addEventListener("DOMContentLoaded", () => {
    

    // Load data on page load (only if localStorage is available)
    if (isLocalStorageAvailable()) {
      
      loadCategoriesData();
    } else {
      console.warn("⚠️ LocalStorage not available, showing fallback data");
      showError("Authentication required. Please refresh the page.");
    }

    // Modal controls
    const addCategoryBtn = document.getElementById("add-category-btn");
    const modal = document.getElementById("category-modal");
    const modalClose = document.getElementById("modal-close");
    const cancelBtn = document.getElementById("cancel-btn");
    const categoryForm = document.getElementById(
      "category-form"
    ) as HTMLFormElement;

    // Open modal for new category
    addCategoryBtn?.addEventListener("click", () => openModal());

    // Close modal
    modalClose?.addEventListener("click", () => closeModal());
    cancelBtn?.addEventListener("click", () => closeModal());
    modal?.addEventListener("click", (e) => {
      if (e.target === modal) closeModal();
    });

    // Form submission
    categoryForm?.addEventListener("submit", handleFormSubmit);

    // Tab switching
    const tabButtons = document.querySelectorAll(".tab-btn");
    const tabContents = document.querySelectorAll(".tab-content");

    tabButtons.forEach((button) => {
      button.addEventListener("click", () => {
        const targetTab = (button as HTMLElement).dataset.tab;
        if (!targetTab) return;

        tabButtons.forEach((btn) => btn.classList.remove("active"));
        tabContents.forEach((content) => content.classList.remove("active"));

        button.classList.add("active");
        const targetContent = document.getElementById(`${targetTab}-tab`);
        if (targetContent) {
          targetContent.classList.add("active");
        }
      });
    });

    // Auto-generate slug from name
    const categoryNameInput = document.getElementById(
      "category-name"
    ) as HTMLInputElement;
    const categorySlugInput = document.getElementById(
      "category-slug"
    ) as HTMLInputElement;

    categoryNameInput?.addEventListener("input", (e) => {
      const name = (e.target as HTMLInputElement).value;
      const slug = generateSlug(name);
      if (categorySlugInput) {
        categorySlugInput.value = slug;
      }
      validateField("name", name);
    });

    categorySlugInput?.addEventListener("input", (e) => {
      const slug = (e.target as HTMLInputElement).value;
      validateField("slug", slug);
    });

    // Color presets
    const colorPresets = document.querySelectorAll(".color-preset");
    const colorInput = document.getElementById(
      "category-color"
    ) as HTMLInputElement;

    colorPresets.forEach((preset) => {
      preset.addEventListener("click", () => {
        const color = (preset as HTMLElement).dataset.color;
        if (color && colorInput) {
          colorInput.value = color;
        }
      });
    });

    // Icon presets
    const iconPresets = document.querySelectorAll(".icon-preset");
    const iconInput = document.getElementById(
      "category-icon"
    ) as HTMLInputElement;

    iconPresets.forEach((preset) => {
      preset.addEventListener("click", () => {
        const icon = (preset as HTMLElement).dataset.icon;
        if (icon && iconInput) {
          iconInput.value = icon;
        }
      });
    });

    // Tags input
    const tagsInput = document.getElementById(
      "category-tags"
    ) as HTMLInputElement;
    tagsInput?.addEventListener("keypress", (e) => {
      if (e.key === "Enter") {
        e.preventDefault();
        const tag = tagsInput.value.trim();
        if (tag && !categoryTags.includes(tag)) {
          categoryTags.push(tag);
          updateTagsDisplay();
          tagsInput.value = "";
        }
      }
    });

    // Search and filters
    const searchInput = document.getElementById(
      "category-search"
    ) as HTMLInputElement;
    searchInput?.addEventListener("input", () => {
      filterCategories();
    });

    const applyFiltersBtn = document.getElementById("apply-filters");
    applyFiltersBtn?.addEventListener("click", filterCategories);

    // Bulk actions
    const bulkActionsBtn = document.getElementById("bulk-actions-btn");
    const bulkModal = document.getElementById("bulk-actions-modal");
    const bulkModalClose = document.getElementById("bulk-modal-close");

    bulkActionsBtn?.addEventListener("click", () => {
      const selectedCount = document.querySelectorAll(
        ".category-checkbox:checked"
      ).length;
      if (selectedCount === 0) {
        showNotification("Please select categories first", "error");
        return;
      }
      updateBulkSelectedCount();
      if (bulkModal) bulkModal.style.display = "flex";
    });

    bulkModalClose?.addEventListener("click", () => {
      if (bulkModal) bulkModal.style.display = "none";
    });

    // Retry button
    const retryBtn = document.getElementById("retry-btn");
    if (retryBtn) {
      retryBtn.addEventListener("click", async () => {
        const btnText = retryBtn.querySelector(".btn-text") as HTMLElement;
        const btnSpinner = retryBtn.querySelector(
          ".btn-spinner"
        ) as HTMLElement;

        if (btnText) btnText.style.display = "none";
        if (btnSpinner) btnSpinner.style.display = "flex";

        await loadCategoriesData(); // This now uses singleton

        if (btnText) btnText.style.display = "block";
        if (btnSpinner) btnSpinner.style.display = "none";
      });
    }
  });

  function filterCategories(): void {
    const searchTerm =
      (
        document.getElementById("category-search") as HTMLInputElement
      )?.value.toLowerCase() || "";
    const statusFilter =
      (document.getElementById("status-filter") as HTMLSelectElement)?.value ||
      "";

    const categoryCards = document.querySelectorAll(".category-card");

    categoryCards.forEach((card) => {
      const categoryName =
        card.querySelector(".category-name")?.textContent?.toLowerCase() || "";
      const categorySlug =
        card.querySelector(".category-slug")?.textContent?.toLowerCase() || "";
      const isPremium = card.querySelector(".premium-badge") !== null;
      const isFeatured = card.querySelector(".featured-badge") !== null;
      const articleCount = parseInt(
        card.querySelector(".article-count")?.textContent?.match(/\d+/)?.[0] ||
          "0"
      );

      let matchesSearch =
        categoryName.includes(searchTerm) || categorySlug.includes(searchTerm);
      let matchesStatus = true;

      switch (statusFilter) {
        case "premium":
          matchesStatus = isPremium;
          break;
        case "featured":
          matchesStatus = isFeatured;
          break;
        case "active":
          matchesStatus = articleCount > 0;
          break;
        case "inactive":
          matchesStatus = articleCount === 0;
          break;
      }

      (card as HTMLElement).style.display =
        matchesSearch && matchesStatus ? "" : "none";
    });
  }

  // Global functions for tag removal
  (window as any).removeTag = removeTag;

  // Add animation styles
  if (!document.getElementById("category-animations")) {
    const style = document.createElement("style");
    style.id = "category-animations";
    style.textContent = `
      @keyframes slideIn {
        from {
          transform: translateX(100%);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
    `;
    document.head.appendChild(style);
  }
</script>
