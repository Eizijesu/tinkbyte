---
// src/pages/admin/users.astro - SINGLETON VERSION
import AdminLayout from "../../layouts/AdminLayout.astro";

// Static data - will be populated by client-side JavaScript
const users = [];
const stats = {
  total: 0,
  premium: 0,
  blocked: 0,
  admins: 0,
  newThisMonth: 0,
  withEmail: 0,
};
---

<AdminLayout title="User Management - TinkByte Admin">
  <div class="users-container">
    <!-- Loading State -->
    <div id="loading-state" class="loading-state">
      <div class="loading-spinner"></div>
      <p>Loading users...</p>
    </div>

    <!-- Main Content (hidden until loaded) -->
    <div id="main-content" class="main-content" style="display: none;">
      <!-- Enhanced Header with Export -->
      <div class="users-header">
        <div class="header-content">
          <h1>User Management</h1>
          <p>Manage user accounts, permissions, and engagement data</p>
        </div>
        <div class="header-actions">
          <button class="export-btn" id="export-users-btn">
            <i class="fas fa-download"></i>
            Export Users
          </button>
          <button class="refresh-btn" id="refresh-users-btn">
            <i class="fas fa-sync-alt"></i>
            Refresh
          </button>
        </div>
      </div>

      <!-- Enhanced Stats -->
      <div class="users-stats">
        <div class="stat-item">
          <span class="stat-number" id="stat-total">0</span>
          <span class="stat-label">Total Users</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" id="stat-with-email">0</span>
          <span class="stat-label">With Email</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" id="stat-admins">0</span>
          <span class="stat-label">Admins</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" id="stat-blocked">0</span>
          <span class="stat-label">Blocked</span>
        </div>
        <div class="stat-item">
          <span class="stat-number" id="stat-new-month">0</span>
          <span class="stat-label">New This Month</span>
        </div>
      </div>
      <button class="fix-emails-btn" id="fix-emails-btn">
        <i class="fas fa-wrench"></i>
        Fix Google User Emails
      </button>

      <!-- Search and Filters -->
      <div class="users-controls">
        <div class="search-section">
          <div class="search-input-container">
            <i class="fas fa-search"></i>
            <input type="text" placeholder="Search users..." id="user-search" />
          </div>
        </div>
        <div class="filter-section">
          <select id="status-filter" class="filter-select">
            <option value="">All Status</option>
            <option value="active">Active</option>
            <option value="blocked">Blocked</option>
            <option value="admin">Admin</option>
          </select>
          <select id="membership-filter" class="filter-select">
            <option value="">All Memberships</option>
            <option value="free">Free</option>
            <option value="premium">Premium</option>
          </select>
          <select id="engagement-filter" class="filter-select">
            <option value="">All Engagement</option>
            <option value="high">High Engagement</option>
            <option value="medium">Medium Engagement</option>
            <option value="low">Low Engagement</option>
          </select>
        </div>
      </div>

      <!-- Enhanced Users Table -->
      <div class="users-table-container">
        <table class="users-table">
          <thead>
            <tr>
              <th><input type="checkbox" id="select-all" /></th>
              <th>User</th>
              <th>Email</th>
              <th>Membership</th>
              <th>Status</th>
              <th>Joined</th>
              <th>Engagement</th>
              <th>Following</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody id="users-table-body">
            <!-- Users will be populated by JavaScript -->
          </tbody>
        </table>
      </div>

      <!-- Pagination -->
      <div class="pagination-container" id="pagination-container">
        <!-- Pagination controls will be populated by JavaScript -->
      </div>
    </div>

    <!-- Enhanced User Details Modal -->
    <div id="user-modal" class="modal" style="display: none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3 id="modal-title">User Details</h3>
          <button class="modal-close" id="modal-close">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body" id="modal-body">
          <!-- Enhanced user details will be populated here -->
        </div>
      </div>
    </div>

    <!-- Export Options Modal -->
    <div id="export-modal" class="modal" style="display: none;">
      <div class="modal-content">
        <div class="modal-header">
          <h3>Export Users</h3>
          <button class="modal-close" id="export-modal-close">
            <i class="fas fa-times"></i>
          </button>
        </div>
        <div class="modal-body">
          <div class="export-options">
            <h4>Export Format</h4>
            <div class="export-format-options">
              <label class="export-option">
                <input type="radio" name="export-format" value="csv" checked />
                <span>CSV (Excel Compatible)</span>
              </label>
              <label class="export-option">
                <input type="radio" name="export-format" value="json" />
                <span>JSON (Developer Friendly)</span>
              </label>
            </div>

            <h4>Include Data</h4>
            <div class="export-data-options">
              <label class="export-option">
                <input
                  type="checkbox"
                  name="export-data"
                  value="basic"
                  checked
                />
                <span>Basic Info (Name, Email, Status)</span>
              </label>
              <label class="export-option">
                <input
                  type="checkbox"
                  name="export-data"
                  value="engagement"
                  checked
                />
                <span>Engagement Data (Comments, Reads, Likes)</span>
              </label>
              <label class="export-option">
                <input
                  type="checkbox"
                  name="export-data"
                  value="following"
                  checked
                />
                <span>Following Data (Authors, Categories)</span>
              </label>
              <label class="export-option">
                <input
                  type="checkbox"
                  name="export-data"
                  value="dates"
                  checked
                />
                <span>Date Information (Joined, Last Login)</span>
              </label>
            </div>

            <div class="export-actions">
              <button class="cancel-btn" id="export-cancel">Cancel</button>
              <button class="export-btn" id="export-confirm">
                <i class="fas fa-download"></i>
                Export Data
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Bulk Actions -->
    <div class="bulk-actions-bar" id="bulk-actions-bar" style="display: none;">
      <div class="bulk-info">
        <span id="selected-count">0</span> users selected
      </div>
      <div class="bulk-buttons">
        <button class="bulk-btn block-bulk">
          <i class="fas fa-ban"></i>
          Block Selected
        </button>
        <button class="bulk-btn unblock-bulk">
          <i class="fas fa-unlock"></i>
          Unblock Selected
        </button>
        <button class="bulk-btn export-bulk">
          <i class="fas fa-download"></i>
          Export Selected
        </button>
        <button class="bulk-btn delete-bulk">
          <i class="fas fa-trash"></i>
          Delete Selected
        </button>
      </div>
    </div>

    <!-- Error State -->
    <div id="error-state" class="error-state" style="display: none;">
      <div class="error-content">
        <i class="fas fa-exclamation-triangle"></i>
        <h3>Failed to load users</h3>
        <p id="error-message">An error occurred while loading user data.</p>
        <button class="retry-btn" id="retry-btn">
          <i class="fas fa-redo"></i>
          Retry
        </button>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { adminAPIManager } from "../../lib/admin-api";
  import { adminAuthManager } from "../../lib/admin/auth";
  import { AuthState } from "../../lib/supabase";

  // Enhanced TypeScript interfaces
  interface UserWithEngagement {
    id: string;
    display_name?: string;
    email?: string;
    avatar_type?: string;
    avatar_preset_id?: number;
    avatar_url?: string;
    reputation_score?: number;
    is_admin?: boolean;
    is_blocked?: boolean;
    membership_type?: string;
    total_comments?: number;
    total_reads?: number;
    followers_count?: number;
    following_count?: number;
    created_at: string;
    engagement?:
      | {
          articleLikes?: number;
          articleSaves?: number;
          articleFollows?: number;
          authorFollows?: number;
          categoryFollows?: number;
          newsletterSubscriptions?: number;
          totalComments?: number;
          commentLikes?: number;
          commentBookmarks?: number;
        }
      | Record<string, any>;
  }

  interface PaginationInfo {
    page: number;
    limit: number;
    total: number;
    totalPages: number;
    hasNext: boolean;
    hasPrev: boolean;
  }

  // Global state
  let currentUsers: UserWithEngagement[] = [];
  let currentPagination: PaginationInfo = {
    page: 1,
    limit: 50,
    total: 0,
    totalPages: 0,
    hasNext: false,
    hasPrev: false,
  };
  let currentFilters = {
    search: "",
    status: "",
    membership: "",
    engagement: "",
    sortBy: "created_at",
    sortOrder: "desc",
  };

  document.addEventListener("DOMContentLoaded", async () => {
    try {
      
      await initializeUserManagement();
    } catch (error) {
      console.error("❌ Failed to initialize user management:", error);
      showError(`Failed to initialize user management: ${error.message}`);
    }
  });

  async function initializeUserManagement() {
    try {
      // Initialize singleton managers
      await adminAuthManager.initialize();
      await adminAPIManager.initialize();

      

      // Wait for auth state to be ready
      const authState = AuthState.getInstance();
      await authState.initialize();

      // Load users data
      await loadUsers();
      setupEventListeners();

      
    } catch (error) {
      console.error("❌ Failed to initialize user management:", error);
      throw error;
    }
  }

  async function loadUsers(options = {}) {
    try {
      
      showLoading(true);

      const loadOptions = {
        ...currentFilters,
        page: currentPagination.page,
        limit: currentPagination.limit,
        ...options,
      };

      

      // Use singleton manager instead of static AdminAPI
      const response = await adminAPIManager.getUsers(loadOptions);
      

      if (response.success && response.data) {
        currentUsers = response.data;
        currentPagination = response.pagination || currentPagination;

        

        renderUsers();
        renderPagination();
        updateStats();

        showLoading(false);
        showMainContent(true);
      } else {
        throw new Error(response.error || "Failed to load users");
      }
    } catch (error) {
      console.error("❌ Error loading users:", error);
      showError(`Failed to load users: ${error.message}`);
      showLoading(false);
    }
  }

  function renderUsers() {
    const tbody = document.getElementById("users-table-body");
    if (!tbody) {
      console.error("❌ Users table body not found");
      return;
    }

    if (currentUsers.length === 0) {
      tbody.innerHTML = `
        <tr>
          <td colspan="9" class="no-users">
            <div style="text-align: center; padding: 2rem; color: #8b949e;">
              <i class="fas fa-users" style="font-size: 2rem; margin-bottom: 1rem;"></i>
              <p>No users found matching your criteria</p>
            </div>
          </td>
        </tr>
      `;
      return;
    }

    tbody.innerHTML = currentUsers
      .map((user, index) => {
        const displayName =
          user.display_name || user.email?.split("@")[0] || `User ${index + 1}`;

        // Enhanced email handling
        const userEmail = user.email;
        const emailDisplay = userEmail || "No email available";
        const hasEmail = userEmail && userEmail !== "No email available";

        // Debug info for email source
        const emailSource = (user as any).email_source || "unknown";

        const engagement = user.engagement || {};

        return `
          <tr class="user-row" data-user-id="${user.id}">
            <td>
              <input type="checkbox" class="user-select" value="${user.id}" />
            </td>
            <td>
              <div class="user-info">
                <div class="user-avatar">
                  ${
                    user.avatar_type === "google" && user.avatar_url
                      ? `<img src="${user.avatar_url}" alt="Avatar" />`
                      : user.avatar_type === "uploaded" && user.avatar_url
                        ? `<img src="${user.avatar_url}" alt="Avatar" />`
                        : `<div class="avatar-preset" data-preset="${user.avatar_preset_id || 1}">
                      ${displayName.charAt(0).toUpperCase()}
                    </div>`
                  }
                </div>
                <div class="user-details">
                  <span class="user-name">${displayName}</span>
                  <span class="user-reputation">Rep: ${user.reputation_score || 0}</span>
                  ${user.is_admin ? '<span class="admin-badge">ADMIN</span>' : ""}
                </div>
              </div>
            </td>
            <td>
              <div class="email-info">
                <span class="user-email" title="Email source: ${emailSource}">${emailDisplay}</span>
                ${
                  hasEmail
                    ? '<i class="fas fa-check-circle verified-icon" title="Email Available"></i>'
                    : '<i class="fas fa-exclamation-triangle warning-icon" title="No Email"></i>'
                }
              </div>
            </td>
            <td>
              <span class="membership-badge ${user.membership_type || "free"}">
                ${(user.membership_type || "free").charAt(0).toUpperCase() + (user.membership_type || "free").slice(1)}
              </span>
            </td>
            <td>
              <span class="status-badge ${user.is_blocked ? "blocked" : user.is_admin ? "admin" : "active"}">
                ${user.is_blocked ? "Blocked" : user.is_admin ? "Admin" : "Active"}
              </span>
            </td>
            <td>
              <div class="date-info">
                <span class="join-date">${new Date(user.created_at).toLocaleDateString()}</span>
              </div>
            </td>
            <td>
              <div class="engagement-stats">
                <span class="engagement-item" title="Comments">
                  <i class="fas fa-comment"></i> ${user.total_comments || 0}
                </span>
                <span class="engagement-item" title="Articles Read">
                  <i class="fas fa-eye"></i> ${user.total_reads || 0}
                </span>
                <span class="engagement-item" title="Article Likes">
                  <i class="fas fa-heart"></i> ${(engagement as any)?.articleLikes || 0}
                </span>
                <span class="engagement-item" title="Article Saves">
                  <i class="fas fa-bookmark"></i> ${(engagement as any)?.articleSaves || 0}
                </span>
              </div>
            </td>
            <td>
              <div class="following-stats">
                <span class="following-item" title="Following Authors">
                  <i class="fas fa-user-plus"></i> ${(engagement as any)?.authorFollows || 0}
                </span>
                <span class="following-item" title="Following Categories">
                  <i class="fas fa-tags"></i> ${(engagement as any)?.categoryFollows || 0}
                </span>
                <span class="following-item" title="Newsletter Subscriptions">
                  <i class="fas fa-envelope"></i> ${(engagement as any)?.newsletterSubscriptions || 0}
                </span>
                <span class="following-item" title="Followers">
                  <i class="fas fa-users"></i> ${user.followers_count || 0}
                </span>
              </div>
            </td>
            <td>
              <div class="user-actions">
                <button class="action-btn view" data-action="view" data-user-id="${user.id}" title="View Profile">
                  <i class="fas fa-eye"></i>
                </button>
                <button class="action-btn edit" data-action="edit" data-user-id="${user.id}" title="Edit User">
                  <i class="fas fa-edit"></i>
                </button>
                ${
                  user.is_blocked
                    ? `<button class="action-btn unblock" data-action="unblock" data-user-id="${user.id}" title="Unblock User">
                    <i class="fas fa-unlock"></i>
                  </button>`
                    : `<button class="action-btn block" data-action="block" data-user-id="${user.id}" title="Block User">
                    <i class="fas fa-ban"></i>
                  </button>`
                }
                ${
                  !user.is_admin
                    ? `<button class="action-btn delete" data-action="delete" data-user-id="${user.id}" title="Delete User">
                    <i class="fas fa-trash"></i>
                  </button>`
                    : ""
                }
              </div>
            </td>
          </tr>
        `;
      })
      .join("");

    // Attach action button event listeners
    attachActionButtonListeners();
    
  }

  function renderPagination() {
    const container = document.getElementById("pagination-container");
    if (!container) return;

    const { page, totalPages, hasNext, hasPrev, total, limit } =
      currentPagination;

    if (totalPages <= 1) {
      container.style.display = "none";
      return;
    }

    container.style.display = "flex";

    const startItem = (page - 1) * limit + 1;
    const endItem = Math.min(page * limit, total);

    container.innerHTML = `
      <button class="pagination-btn" id="prev-page" ${!hasPrev ? "disabled" : ""}>
        <i class="fas fa-chevron-left"></i> Previous
      </button>
      
      <div class="pagination-info">
        Showing ${startItem}-${endItem} of ${total} users (Page ${page} of ${totalPages})
      </div>
      
      <button class="pagination-btn" id="next-page" ${!hasNext ? "disabled" : ""}>
        Next <i class="fas fa-chevron-right"></i>
      </button>
    `;

    // Attach pagination event listeners
    const prevBtn = document.getElementById("prev-page");
    const nextBtn = document.getElementById("next-page");

    prevBtn?.addEventListener("click", () => {
      if (hasPrev) {
        currentPagination.page = page - 1;
        loadUsers();
      }
    });

    nextBtn?.addEventListener("click", () => {
      if (hasNext) {
        currentPagination.page = page + 1;
        loadUsers();
      }
    });
  }

  function updateStats() {
    const stats = {
      total: currentPagination.total,
      withEmail: currentUsers.filter(
        (u) => u.email && u.email !== "No email available"
      ).length,
      admins: currentUsers.filter((u) => u.is_admin).length,
      blocked: currentUsers.filter((u) => u.is_blocked).length,
      newThisMonth: currentUsers.filter((u) => {
        const created = new Date(u.created_at);
        const monthAgo = new Date();
        monthAgo.setMonth(monthAgo.getMonth() - 1);
        return created > monthAgo;
      }).length,
    };

    // Update stat displays
    const statElements = {
      "stat-total": stats.total,
      "stat-with-email": stats.withEmail,
      "stat-admins": stats.admins,
      "stat-blocked": stats.blocked,
      "stat-new-month": stats.newThisMonth,
    };

    Object.entries(statElements).forEach(([id, value]) => {
      const element = document.getElementById(id);
      if (element) {
        element.textContent = value.toString();
      }
    });

    
  }

  function setupEventListeners() {
    

    // Search functionality with debounce
    const searchInput = document.getElementById(
      "user-search"
    ) as HTMLInputElement;
    searchInput?.addEventListener(
      "input",
      debounce((e) => {
        currentFilters.search = (e.target as HTMLInputElement).value;
        currentPagination.page = 1;
        loadUsers();
      }, 300)
    );

    // Filter functionality
    const statusFilter = document.getElementById(
      "status-filter"
    ) as HTMLSelectElement;
    const membershipFilter = document.getElementById(
      "membership-filter"
    ) as HTMLSelectElement;
    const engagementFilter = document.getElementById(
      "engagement-filter"
    ) as HTMLSelectElement;

    statusFilter?.addEventListener("change", () => {
      currentFilters.status = statusFilter.value;
      currentPagination.page = 1;
      loadUsers();
    });

    membershipFilter?.addEventListener("change", () => {
      currentFilters.membership = membershipFilter.value;
      currentPagination.page = 1;
      loadUsers();
    });

    engagementFilter?.addEventListener("change", () => {
      currentFilters.engagement = engagementFilter.value;
      applyClientSideEngagementFilter(engagementFilter.value);
    });

    // Refresh functionality
    const refreshBtn = document.getElementById("refresh-users-btn");
    refreshBtn?.addEventListener("click", () => {
      
      currentPagination.page = 1;
      loadUsers();
    });

    // Select all functionality
    const selectAllCheckbox = document.getElementById(
      "select-all"
    ) as HTMLInputElement;
    selectAllCheckbox?.addEventListener("change", () => {
      const userCheckboxes = document.querySelectorAll(
        ".user-select"
      ) as NodeListOf<HTMLInputElement>;
      userCheckboxes.forEach((checkbox) => {
        checkbox.checked = selectAllCheckbox.checked;
      });
      updateBulkActionsBar();
    });

    // Fix Google emails button
    const fixEmailsBtn = document.getElementById("fix-emails-btn");
    fixEmailsBtn?.addEventListener("click", async () => {
      if (
        !confirm(
          "This will update profiles for users who signed up with Google. Continue?"
        )
      ) {
        return;
      }

      const btn = fixEmailsBtn as HTMLButtonElement;
      btn.disabled = true;
      btn.innerHTML = '<i class="fas fa-spinner fa-spin"></i> Fixing...';

      try {
        // Use singleton manager
        const result = await adminAPIManager.fixGoogleUserEmails();

        if (result.success) {
          showNotification(
            result.message || "Google user emails fixed!",
            "success"
          );
          // Reload users to see the changes
          await loadUsers();
        } else {
          showNotification(result.error || "Failed to fix emails", "error");
        }
      } catch (error) {
        console.error("Fix emails error:", error);
        showNotification("An error occurred", "error");
      } finally {
        btn.disabled = false;
        btn.innerHTML = '<i class="fas fa-wrench"></i> Fix Google User Emails';
      }
    });

    // Setup other components
    setupBulkActions();
    setupModals();
    setupExportFunctionality();

    // Error retry
    const retryBtn = document.getElementById("retry-btn");
    retryBtn?.addEventListener("click", () => {
      
      loadUsers();
    });

    
  }

  function attachActionButtonListeners() {
    const actionButtons = document.querySelectorAll(".action-btn");
    actionButtons.forEach((button) => {
      button.addEventListener("click", async (e) => {
        const target = e.currentTarget as HTMLButtonElement;
        const action = target.dataset.action;
        const userId = target.dataset.userId;

        if (action && userId) {
          await handleUserAction(userId, action);
        }
      });
    });

    // User select checkboxes
    const userCheckboxes = document.querySelectorAll(".user-select");
    userCheckboxes.forEach((checkbox) => {
      checkbox.addEventListener("change", updateBulkActionsBar);
    });
  }

  async function handleUserAction(userId: string, action: string) {
    

    if (action === "view") {
      await showUserDetails(userId);
      return;
    }

    if (action === "edit") {
      showNotification("Edit user functionality coming soon", "info");
      return;
    }

    // Confirmation for destructive actions
    if (action === "delete") {
      if (
        !confirm(
          "⚠️ Are you sure you want to DELETE this user? This action CANNOT be undone and will remove all their data permanently."
        )
      ) {
        return;
      }
    } else if (action === "block") {
      if (
        !confirm(
          "Are you sure you want to BLOCK this user? They will lose access to their account."
        )
      ) {
        return;
      }
    }

    try {
      

      // Use singleton manager
      const response = await adminAPIManager.performUserAction(userId, action);

      if (response.success) {
        showNotification(
          response.message || `User ${action}ed successfully`,
          "success"
        );

        if (action === "delete") {
          currentUsers = currentUsers.filter((u) => u.id !== userId);
          renderUsers();
          updateStats();
        } else {
          await loadUsers();
        }
      } else {
        showNotification(response.error || `Failed to ${action} user`, "error");
      }
    } catch (error) {
      console.error(`❌ User action error:`, error);
      showNotification("An error occurred", "error");
    }
  }

  async function showUserDetails(userId: string) {
    try {
      

      // Use singleton manager
      const response = await adminAPIManager.getUserDetails(userId);

      if (response.success && response.data) {
        const user = response.data;
        const modal = document.getElementById("user-modal");
        const modalBody = document.getElementById("modal-body");

        if (modal && modalBody) {
          modalBody.innerHTML = `
            <div class="user-detail-section">
              <h4>Basic Information</h4>
              <div class="detail-grid">
                <div class="detail-item">
                  <span class="detail-label">Name:</span>
                  <span class="detail-value">${user.display_name || "Not set"}</span>
                </div>
                <div class="detail-item">
                  <span class="detail-label">Email:</span>
                  <span class="detail-value">${user.email || "No email"}</span>
                </div>
                <div class="detail-item">
                  <span class="detail-label">Status:</span>
                  <span class="detail-value">${user.is_blocked ? "Blocked" : user.is_admin ? "Admin" : "Active"}</span>
                </div>
                <div class="detail-item">
                  <span class="detail-label">Membership:</span>
                  <span class="detail-value">${(user.membership_type || "free").charAt(0).toUpperCase() + (user.membership_type || "free").slice(1)}</span>
                </div>
                <div class="detail-item">
                  <span class="detail-label">Joined:</span>
                  <span class="detail-value">${new Date(user.created_at).toLocaleDateString()}</span>
                </div>
                <div class="detail-item">
                  <span class="detail-label">Reputation:</span>
                  <span class="detail-value">${user.reputation_score || 0}</span>
                </div>
              </div>
            </div>
            
            <div class="user-detail-section">
              <h4>Engagement Statistics</h4>
              <div class="engagement-grid">
                <div class="engagement-detail">
                  <i class="fas fa-comment"></i> Comments: ${user.total_comments || 0}
                </div>
                <div class="engagement-detail">
                  <i class="fas fa-eye"></i> Articles Read: ${user.total_reads || 0}
                </div>
                <div class="engagement-detail">
                  <i class="fas fa-heart"></i> Article Likes: ${user.engagement?.articleLikes || 0}
                </div>
                <div class="engagement-detail">
                  <i class="fas fa-bookmark"></i> Article Saves: ${user.engagement?.articleSaves || 0}
                </div>
              </div>
            </div>

            <div class="user-detail-section">
              <h4>Following & Connections</h4>
              <div class="following-grid">
                <div class="following-detail">
                  <i class="fas fa-user-plus"></i> Following Authors: ${user.engagement?.authorFollows || 0}
                </div>
                <div class="following-detail">
                  <i class="fas fa-tags"></i> Following Categories: ${user.engagement?.categoryFollows || 0}
                </div>
                <div class="following-detail">
                  <i class="fas fa-envelope"></i> Newsletter Subscriptions: ${user.engagement?.newsletterSubscriptions || 0}
                </div>
                <div class="following-detail">
                  <i class="fas fa-users"></i> Followers: ${user.followers_count || 0}
                </div>
              </div>
            </div>

            ${
              user.engagement?.comments && user.engagement.comments.length > 0
                ? `
              <div class="user-detail-section">
                <h4>Recent Comments</h4>
                <div class="recent-comments">
                  ${user.engagement.comments
                    .slice(0, 5)
                    .map(
                      (comment: any) => `
                    <div class="comment-preview">
                      <p class="comment-content">${comment.content.substring(0, 100)}${comment.content.length > 100 ? "..." : ""}</p>
                      <small class="comment-meta">
                        On: ${comment.articles?.title || "Unknown Article"}  
                        ${new Date(comment.created_at).toLocaleDateString()}
                      </small>
                    </div>
                  `
                    )
                    .join("")}
                </div>
              </div>
            `
                : ""
            }
          `;
          modal.style.display = "flex";
        }
      } else {
        showNotification("Failed to load user details", "error");
      }
    } catch (error) {
      console.error("❌ Error loading user details:", error);
      showNotification("Failed to load user details", "error");
    }
  }

  function setupBulkActions() {
    const blockBulkBtn = document.querySelector(".block-bulk");
    const unblockBulkBtn = document.querySelector(".unblock-bulk");
    const exportBulkBtn = document.querySelector(".export-bulk");
    const deleteBulkBtn = document.querySelector(".delete-bulk");

    blockBulkBtn?.addEventListener("click", () => {
      const selectedUsers = getSelectedUsers();
      if (
        selectedUsers.length > 0 &&
        confirm(`Are you sure you want to BLOCK ${selectedUsers.length} users?`)
      ) {
        bulkUserAction(selectedUsers, "block");
      }
    });

    unblockBulkBtn?.addEventListener("click", () => {
      const selectedUsers = getSelectedUsers();
      if (
        selectedUsers.length > 0 &&
        confirm(
          `Are you sure you want to UNBLOCK ${selectedUsers.length} users?`
        )
      ) {
        bulkUserAction(selectedUsers, "unblock");
      }
    });

    exportBulkBtn?.addEventListener("click", () => {
      const selectedUsers = getSelectedUsers();
      if (selectedUsers.length > 0) {
        exportSelectedUsers(selectedUsers);
      }
    });

    deleteBulkBtn?.addEventListener("click", () => {
      const selectedUsers = getSelectedUsers();
      if (
        selectedUsers.length > 0 &&
        confirm(
          `⚠️ DANGER: Are you sure you want to DELETE ${selectedUsers.length} users? This action CANNOT be undone!`
        )
      ) {
        bulkUserAction(selectedUsers, "delete");
      }
    });
  }

  async function bulkUserAction(userIds: string[], action: string) {
    try {
      

      // Use singleton manager
      const response = await adminAPIManager.bulkUserAction(userIds, action);

      if (response.success) {
        showNotification(
          response.message ||
            `${userIds.length} users ${action}ed successfully`,
          "success"
        );

        if (action === "delete") {
          currentUsers = currentUsers.filter((u) => !userIds.includes(u.id));
          renderUsers();
          updateStats();
        } else {
          await loadUsers();
        }

        const bulkActionsBar = document.getElementById("bulk-actions-bar");
        if (bulkActionsBar) bulkActionsBar.style.display = "none";

        const selectAllCheckbox = document.getElementById(
          "select-all"
        ) as HTMLInputElement;
        if (selectAllCheckbox) selectAllCheckbox.checked = false;
      } else {
        showNotification(
          response.error || `Failed to ${action} users`,
          "error"
        );
      }
    } catch (error) {
      console.error("❌ Bulk user action error:", error);
      showNotification("An error occurred", "error");
    }
  }

  function getSelectedUsers(): string[] {
    const checkboxes = document.querySelectorAll(
      ".user-select:checked"
    ) as NodeListOf<HTMLInputElement>;
    return Array.from(checkboxes).map((checkbox) => checkbox.value);
  }

  function updateBulkActionsBar() {
    const selectedCheckboxes = document.querySelectorAll(
      ".user-select:checked"
    );
    const bulkActionsBar = document.getElementById("bulk-actions-bar");
    const selectedCount = document.getElementById("selected-count");

    if (selectedCheckboxes.length > 0) {
      if (bulkActionsBar) bulkActionsBar.style.display = "flex";
      if (selectedCount)
        selectedCount.textContent = selectedCheckboxes.length.toString();
    } else {
      if (bulkActionsBar) bulkActionsBar.style.display = "none";
    }
  }

  function setupModals() {
    const userModal = document.getElementById("user-modal");
    const userModalClose = document.getElementById("modal-close");

    userModalClose?.addEventListener("click", () => {
      if (userModal) userModal.style.display = "none";
    });

    userModal?.addEventListener("click", (e) => {
      if (e.target === userModal) {
        userModal.style.display = "none";
      }
    });

    const exportModal = document.getElementById("export-modal");
    const exportModalClose = document.getElementById("export-modal-close");
    const exportCancel = document.getElementById("export-cancel");

    exportModalClose?.addEventListener("click", () => {
      if (exportModal) exportModal.style.display = "none";
    });

    exportCancel?.addEventListener("click", () => {
      if (exportModal) exportModal.style.display = "none";
    });

    exportModal?.addEventListener("click", (e) => {
      if (e.target === exportModal) {
        exportModal.style.display = "none";
      }
    });
  }

  function setupExportFunctionality() {
    const exportBtn = document.getElementById("export-users-btn");
    const exportModal = document.getElementById("export-modal");
    const exportConfirm = document.getElementById("export-confirm");

    exportBtn?.addEventListener("click", () => {
      if (exportModal) exportModal.style.display = "flex";
    });

    exportConfirm?.addEventListener("click", async () => {
      await performExport();
      if (exportModal) exportModal.style.display = "none";
    });
  }

  async function performExport() {
    try {
      
      const format =
        (
          document.querySelector(
            'input[name="export-format"]:checked'
          ) as HTMLInputElement
        )?.value || "csv";

      // Use singleton manager
      const response = await adminAPIManager.exportUsers(
        format as "csv" | "json"
      );

      if (response.success && response.data) {
        if (format === "csv") {
          downloadFile(
            response.data as string,
            `tinkbyte-users-${new Date().toISOString().split("T")[0]}.csv`,
            "text/csv"
          );
        } else {
          const jsonData = JSON.stringify(response.data, null, 2);
          downloadFile(
            jsonData,
            `tinkbyte-users-${new Date().toISOString().split("T")[0]}on`,
            "application/json"
          );
        }

        showNotification("Export completed successfully", "success");
      } else {
        showNotification(response.error || "Export failed", "error");
      }
    } catch (error) {
      console.error("❌ Export error:", error);
      showNotification("Export failed", "error");
    }
  }

  function exportSelectedUsers(userIds: string[]) {
    

    const selectedData = currentUsers
      .filter((user) => userIds.includes(user.id))
      .map((user) => ({
        id: user.id,
        name: user.display_name || "Unknown",
        email: user.email || "No email",
        status: user.is_blocked
          ? "Blocked"
          : user.is_admin
            ? "Admin"
            : "Active",
        membership: user.membership_type || "free",
        joined_date: new Date(user.created_at).toLocaleDateString(),
        comments: user.total_comments || 0,
        reads: user.total_reads || 0,
        reputation: user.reputation_score || 0,
      }));

    const csvContent = [
      "ID,Name,Email,Status,Membership,Joined Date,Comments,Reads,Reputation",
      ...selectedData.map(
        (row) =>
          `"${row.id}","${row.name}","${row.email}","${row.status}","${row.membership}","${row.joined_date}","${row.comments}","${row.reads}","${row.reputation}"`
      ),
    ].join("\n");

    downloadFile(
      csvContent,
      `tinkbyte-selected-users-${new Date().toISOString().split("T")[0]}.csv`,
      "text/csv"
    );
  }

  function downloadFile(
    content: string,
    filename: string,
    contentType: string
  ) {
    const blob = new Blob([content], { type: contentType });
    const url = URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = filename;
    link.style.display = "none";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    URL.revokeObjectURL(url);

    
  }

  function applyClientSideEngagementFilter(engagementValue: string) {
    const userRows = document.querySelectorAll(".user-row");

    userRows.forEach((row) => {
      if (!engagementValue) {
        (row as HTMLElement).style.display = "";
        return;
      }

      const engagementItems = row.querySelectorAll(".engagement-item");
      const totalEngagement = Array.from(engagementItems).reduce(
        (sum, item) => {
          const count = parseInt(item.textContent?.match(/\d+/)?.[0] || "0");
          return sum + count;
        },
        0
      );

      let showRow = false;
      if (engagementValue === "high") showRow = totalEngagement > 50;
      else if (engagementValue === "medium")
        showRow = totalEngagement > 10 && totalEngagement <= 50;
      else if (engagementValue === "low") showRow = totalEngagement <= 10;

      (row as HTMLElement).style.display = showRow ? "" : "none";
    });
  }

  // Utility functions
  function showLoading(show: boolean) {
    const loadingState = document.getElementById("loading-state");
    if (loadingState) {
      loadingState.style.display = show ? "flex" : "none";
    }
  }

  function showMainContent(show: boolean) {
    const mainContent = document.getElementById("main-content");
    if (mainContent) {
      mainContent.style.display = show ? "block" : "none";
    }
  }

  function showError(message: string) {
    const errorState = document.getElementById("error-state");
    const errorMessage = document.getElementById("error-message");

    if (errorState) errorState.style.display = "flex";
    if (errorMessage) errorMessage.textContent = message;

    showLoading(false);
    showMainContent(false);
  }

  function showNotification(
    message: string,
    type: "success" | "error" | "info" = "success"
  ) {
    const notification = document.createElement("div");
    notification.className = `notification ${type}`;
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed;
      top: 20px;
      right: 20px;
      padding: 1rem 1.5rem;
      color: white;
      font-weight: 500;
      z-index: 10000;
      background: ${type === "success" ? "#238636" : type === "error" ? "#da3633" : "#4285f4"};
      animation: slideIn 0.3s ease;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 4000);
  }

  function debounce(func: Function, wait: number) {
    let timeout: NodeJS.Timeout;
    return function executedFunction(...args: any[]) {
      const later = () => {
        clearTimeout(timeout);
        func(...args);
      };
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  }

  // Add CSS animation for notifications
  const style = document.createElement("style");
  style.textContent = `
    @keyframes slideIn {
      from {
        transform: translateX(100%);
        opacity: 0;
      }
      to {
        transform: translateX(0);
        opacity: 1;
      }
    }
  `;
  document.head.appendChild(style);
</script>
