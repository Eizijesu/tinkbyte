---
// src/pages/admin/comments.astro - SINGLETON VERSION
import AdminLayout from "../../layouts/AdminLayout.astro";
---

<AdminLayout title="Comment Moderation - TinkByte Admin">
  <!-- Loading Overlay -->
  <div id="loading-overlay" class="loading-overlay">
    <div class="loading-spinner">
      <div class="spinner-square"></div>
      <span>Loading comments...</span>
    </div>
  </div>

  <!-- Error Banner -->
  <div id="error-banner" class="error-banner" style="display: none;">
    <i class="fas fa-exclamation-triangle"></i>
    <span id="error-message">An error occurred</span>
    <button class="retry-btn" id="retry-btn">
      <i class="fas fa-redo"></i>
      Retry
    </button>
  </div>

  <div class="comments-container">
    <!-- Page Header -->
    <div class="comments-header">
      <div class="header-content">
        <h1>Comment Moderation</h1>
        <p>Manage and moderate user comments across your platform</p>
      </div>
      <div class="header-actions">
        <button class="export-btn" id="export-comments">
          <i class="fas fa-download"></i>
          Export Comments
        </button>
      </div>
    </div>

    <!-- Comment Stats -->
    <div class="comment-stats-grid">
      <div class="stat-card urgent">
        <div class="stat-icon">
          <i class="fas fa-clock"></i>
        </div>
        <div class="stat-content">
          <div class="stat-number" id="pending-count">-</div>
          <div class="stat-label">Pending Review</div>
          <div class="stat-action">
            <a href="#pending">Review Now</a>
          </div>
        </div>
      </div>

      <div class="stat-card warning">
        <div class="stat-icon">
          <i class="fas fa-flag"></i>
        </div>
        <div class="stat-content">
          <div class="stat-number" id="flagged-count">-</div>
          <div class="stat-label">Flagged</div>
          <div class="stat-action">
            <a href="#flagged">View All</a>
          </div>
        </div>
      </div>

      <div class="stat-card success">
        <div class="stat-icon">
          <i class="fas fa-check"></i>
        </div>
        <div class="stat-content">
          <div class="stat-number" id="approved-count">-</div>
          <div class="stat-label">Approved</div>
          <div class="stat-action">
            <a href="#approved">View All</a>
          </div>
        </div>
      </div>
    </div>

    <!-- Tab Navigation -->
    <div class="tab-navigation">
      <button class="tab-button active" data-status="pending">
        <i class="fas fa-clock"></i>
        <span>Pending Comments</span>
        <span class="tab-count" id="pending-badge">0</span>
      </button>
      <button class="tab-button" data-status="flagged">
        <i class="fas fa-flag"></i>
        <span>Flagged Comments</span>
        <span class="tab-count" id="flagged-badge">0</span>
      </button>
      <button class="tab-button" data-status="approved">
        <i class="fas fa-check"></i>
        <span>Approved Comments</span>
        <span class="tab-count" id="approved-badge">0</span>
      </button>
    </div>

    <!-- Comments Container -->
    <div id="comments-container" class="comments-list">
      <!-- Comments will be loaded dynamically -->
    </div>

    <!-- Pagination -->
    <div id="pagination" class="pagination-container">
      <!-- Pagination will be loaded here -->
    </div>
  </div>
</AdminLayout>

<script>
  import { adminAPIManager } from "../../lib/admin-api.js";
  import { adminAuthManager } from "../../lib/admin/auth.js";

  // Singleton-based Comment Moderation Dashboard
  class CommentModerationDashboard {
    private static instance: CommentModerationDashboard;
    private isInitialized: boolean = false;
    private isLoading: boolean = false;
    private currentStatus: string = "pending";
    private currentPage: number = 1;
    private pageSize: number = 20;
    private totalPages: number = 0;
    private comments: any[] = [];
    private stats: any = null;

    private constructor() {}

    static getInstance(): CommentModerationDashboard {
      if (!CommentModerationDashboard.instance) {
        CommentModerationDashboard.instance = new CommentModerationDashboard();
      }
      return CommentModerationDashboard.instance;
    }

    async initialize(): Promise<void> {
      if (this.isInitialized) return;

      try {
        console.log("üöÄ Initializing Comment Moderation Dashboard...");

        // Initialize admin API manager
        await adminAPIManager.initialize();

        // Setup event listeners
        this.setupEventListeners();

        // Load initial data
        await this.loadComments();
        await this.loadStats();

        this.isInitialized = true;
        console.log("‚úÖ Comment Moderation Dashboard initialized successfully");
      } catch (error) {
        console.error(
          "‚ùå Comment Moderation Dashboard initialization failed:",
          error
        );
        this.showError(
          error.message || "Failed to initialize comment moderation system"
        );
        throw error;
      }
    }

    private async loadComments(): Promise<void> {
      if (this.isLoading) return;

      try {
        this.showLoading();
        this.hideError();

        console.log(
          `üîÑ Loading ${this.currentStatus} comments using singleton API manager...`
        );

        const result = await adminAPIManager.getComments({
          status: this.currentStatus,
          page: this.currentPage,
          limit: this.pageSize,
          sortBy: "created_at",
          sortOrder: "desc",
        });

        if (result.success) {
          this.comments = result.data || [];

          if (result.pagination) {
            this.totalPages = result.pagination.totalPages;
            this.updatePagination(result.pagination);
          }

          this.updateCommentsDisplay();
          console.log(
            `‚úÖ ${this.currentStatus} comments loaded successfully:`,
            this.comments.length,
            "comments"
          );
        } else {
          throw new Error(
            result.error || `Failed to load ${this.currentStatus} comments`
          );
        }
      } catch (error: any) {
        console.error(
          `‚ùå ${this.currentStatus} comments loading error:`,
          error
        );
        this.showError(
          error.message || `Failed to load ${this.currentStatus} comments`
        );
      } finally {
        this.hideLoading();
      }
    }

    private async loadStats(): Promise<void> {
      try {
        const [pendingResult, flaggedResult, approvedResult] =
          await Promise.all([
            adminAPIManager.getComments({ status: "pending", limit: 1 }),
            adminAPIManager.getComments({ status: "flagged", limit: 1 }),
            adminAPIManager.getComments({ status: "approved", limit: 1 }),
          ]);

        this.stats = {
          total_flagged: flaggedResult.pagination?.total || 0,
          total_approved: approvedResult.pagination?.total || 0,
          pending_review: pendingResult.pagination?.total || 0,
        };

        this.updateStatsDisplay();
      } catch (error) {
        console.error("Error loading stats:", error);
      }
    }

    private updateStatsDisplay(): void {
      if (!this.stats) return;

      const elements = {
        pending: document.getElementById("pending-count"),
        flagged: document.getElementById("flagged-count"),
        approved: document.getElementById("approved-count"),
        pendingBadge: document.getElementById("pending-badge"),
        flaggedBadge: document.getElementById("flagged-badge"),
        approvedBadge: document.getElementById("approved-badge"),
      };

      if (elements.pending)
        elements.pending.textContent = this.stats.pending_review.toString();
      if (elements.flagged)
        elements.flagged.textContent = this.stats.total_flagged.toString();
      if (elements.approved)
        elements.approved.textContent = this.stats.total_approved.toString();
      if (elements.pendingBadge)
        elements.pendingBadge.textContent = `(${this.stats.pending_review})`;
      if (elements.flaggedBadge)
        elements.flaggedBadge.textContent = `(${this.stats.total_flagged})`;
      if (elements.approvedBadge)
        elements.approvedBadge.textContent = `(${this.stats.total_approved})`;
    }

    private updateCommentsDisplay(): void {
      const container = document.getElementById("comments-container");
      if (!container) return;

      if (this.comments.length === 0) {
        container.innerHTML = `
          <div class="empty-state">
            <i class="fas fa-comments"></i>
            <h3>No ${this.currentStatus} comments found</h3>
            <p>All comments in this category have been processed.</p>
          </div>
        `;
        return;
      }

      const commentsHTML = this.comments
        .map((comment) => {
          const userProfile = comment.profiles;
          const displayName =
            userProfile?.display_name ||
            comment.guest_name ||
            (userProfile?.email ? userProfile.email.split("@")[0] : null) ||
            "Anonymous User";

          const isGuest = !comment.user_id;
          const hasProfile = !!userProfile;

          return `
            <div class="comment-item ${this.currentStatus}" data-comment-id="${comment.id}">
              <div class="comment-header">
                <div class="user-info">
                  <div class="user-avatar">
                    ${
                      hasProfile && userProfile.avatar_url
                        ? `<img src="${userProfile.avatar_url}" alt="Avatar" />`
                        : `<div class="avatar-preset ${isGuest ? "guest-avatar" : ""}">
                          ${displayName.charAt(0).toUpperCase()}
                        </div>`
                    }
                  </div>
                  <div class="user-details">
                    <span class="user-name">
                      ${displayName}
                      ${isGuest ? '<span class="guest-badge">GUEST</span>' : ""}
                      ${hasProfile && userProfile.is_admin ? '<span class="admin-badge">ADMIN</span>' : ""}
                    </span>
                    <span class="user-rep">
                      ${isGuest ? "Guest User" : `Rep: ${userProfile?.reputation_score || 0}`}
                    </span>
                  </div>
                </div>
                <div class="comment-meta">
                  <span class="comment-date">
                    ${new Date(comment.created_at).toLocaleDateString()}
                  </span>
                  <span class="article-title">
                    ${comment.articles?.title || "Unknown Article"}
                  </span>
                </div>
              </div>

              <div class="comment-content">
                <p>${comment.content}</p>
                ${
                  comment.mention_users?.length > 0
                    ? `
                  <div class="mentions">
                    <i class="fas fa-at"></i>
                    <span>Mentions: ${comment.mention_users.length} users</span>
                  </div>
                `
                    : ""
                }
                ${
                  comment.moderation_reason
                    ? `
                  <div class="moderation-reason">
                    <i class="fas fa-info-circle"></i>
                    <span>Reason: ${comment.moderation_reason}</span>
                  </div>
                `
                    : ""
                }
              </div>

              <div class="comment-actions">
                ${this.getActionButtons(comment.id)}
              </div>
            </div>
          `;
        })
        .join("");

      container.innerHTML = commentsHTML;
      this.attachActionListeners();
    }

    private getActionButtons(commentId: string): string {
      switch (this.currentStatus) {
        case "pending":
          return `
            <button class="action-btn approve" data-action="approve" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;"><div class="spinner-square small"></div></div>
              <i class="fas fa-check"></i> Approve
            </button>
            <button class="action-btn reject" data-action="reject" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;"><div class="spinner-square small"></div></div>
              <i class="fas fa-times"></i> Reject
            </button>
            <button class="action-btn flag" data-action="flag" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;"><div class="spinner-square small"></div></div>
              <i class="fas fa-flag"></i> Flag
            </button>
          `;
        case "flagged":
          return `
            <button class="action-btn approve" data-action="approve" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;"><div class="spinner-square small"></div></div>
              <i class="fas fa-check"></i> Restore
            </button>
            <button class="action-btn delete" data-action="hide" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;"><div class="spinner-square small"></div></div>
              <i class="fas fa-trash"></i> Delete
            </button>
          `;
        case "approved":
          return `
            <button class="action-btn flag" data-action="flag" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;"><div class="spinner-square small"></div></div>
              <i class="fas fa-flag"></i> Flag
            </button>
            <button class="action-btn hide" data-action="reject" data-comment-id="${commentId}">
              <div class="btn-spinner" style="display: none;"><div class="spinner-square small"></div></div>
              <i class="fas fa-eye-slash"></i> Hide
            </button>
          `;
        default:
          return "";
      }
    }

    private updatePagination(pagination: any): void {
      const container = document.getElementById("pagination");
      if (!container) return;

      const { page, totalPages, hasNext, hasPrev } = pagination;

      if (totalPages <= 1) {
        container.innerHTML = "";
        return;
      }

      let paginationHTML = `
        <div class="pagination">
          <button class="pagination-btn ${!hasPrev ? "disabled" : ""}" 
                  onclick="commentDashboard?.goToPage(${page - 1})" 
                  ${!hasPrev ? "disabled" : ""}>
            <i class="fas fa-chevron-left"></i>
            Previous
          </button>
          
          <div class="pagination-info">
            Page ${page} of ${totalPages}
          </div>
          
          <button class="pagination-btn ${!hasNext ? "disabled" : ""}" 
                  onclick="commentDashboard?.goToPage(${page + 1})" 
                  ${!hasNext ? "disabled" : ""}>
            Next
            <i class="fas fa-chevron-right"></i>
          </button>
        </div>
      `;

      container.innerHTML = paginationHTML;
    }

    private attachActionListeners(): void {
      const actionButtons = document.querySelectorAll(".action-btn");
      actionButtons.forEach((button) => {
        button.addEventListener("click", async (e) => {
          const btn = e.currentTarget as HTMLButtonElement;
          const action = btn.dataset.action;
          const commentId = btn.dataset.commentId;

          if (action && commentId) {
            if (
              action === "hide" &&
              !confirm(
                "Are you sure you want to delete this comment? This action cannot be undone."
              )
            ) {
              return;
            }
            await this.moderateComment(commentId, action, btn);
          }
        });
      });
    }

    private async moderateComment(
      commentId: string,
      action: string,
      buttonElement: HTMLButtonElement
    ): Promise<void> {
      const spinner = buttonElement.querySelector(
        ".btn-spinner"
      ) as HTMLElement;
      const icon = buttonElement.querySelector("i") as HTMLElement;

      // Show loading state
      buttonElement.disabled = true;
      if (spinner) spinner.style.display = "flex";
      if (icon) icon.style.display = "none";

      try {
        const reason =
          action === "reject" || action === "flag"
            ? prompt(`Please provide a reason for ${action}ing this comment:`)
            : null;

        if ((action === "reject" || action === "flag") && !reason) {
          return;
        }

        // Use singleton API manager
        const result = await adminAPIManager.moderateComment(
          commentId,
          action,
          reason || undefined
        );

        if (result.success) {
          // Remove comment from UI
          const commentElement = document.querySelector(
            `[data-comment-id="${commentId}"]`
          ) as HTMLElement;
          if (commentElement) {
            commentElement.style.opacity = "0.5";
            setTimeout(() => {
              commentElement.remove();
              this.updateStatsAfterAction();
            }, 300);
          }

          this.showNotification(
            result.message || `Comment ${action}ed successfully`,
            "success"
          );
        } else {
          this.showNotification(
            result.error || `Failed to ${action} comment`,
            "error"
          );
        }
      } catch (error) {
        console.error("Moderation error:", error);
        this.showNotification("An error occurred", "error");
      } finally {
        // Hide loading state
        buttonElement.disabled = false;
        if (spinner) spinner.style.display = "none";
        if (icon) icon.style.display = "inline";
      }
    }

    private updateStatsAfterAction(): void {
      // Reload stats after action
      setTimeout(() => {
        this.loadStats();
      }, 500);
    }

    private setupEventListeners(): void {
      // Tab switching
      document.querySelectorAll(".tab-button").forEach((btn) => {
        btn.addEventListener("click", (e) => {
          const target = e.target as HTMLElement;
          const status = target.dataset.status;
          if (status) {
            this.switchTab(status);
          }
        });
      });

      // Stat action links
      document.querySelectorAll(".stat-action a").forEach((link) => {
        link.addEventListener("click", (e) => {
          e.preventDefault();
          const href = (link as HTMLElement).getAttribute("href");
          if (href) {
            const status = href.replace("#", "");
            this.switchTab(status);
          }
        });
      });

      // Retry button
      const retryBtn = document.getElementById("retry-btn");
      if (retryBtn) {
        retryBtn.addEventListener("click", async () => {
          await this.loadComments();
        });
      }
    }

    private async switchTab(status: string): Promise<void> {
      this.currentStatus = status;
      this.currentPage = 1;

      // Update tab UI
      document.querySelectorAll(".tab-button").forEach((btn) => {
        btn.classList.remove("active");
      });

      const targetTab = document.querySelector(`[data-status="${status}"]`);
      if (targetTab) {
        targetTab.classList.add("active");
      }

      await this.loadComments();
    }

    public async goToPage(page: number): Promise<void> {
      if (page < 1 || page > this.totalPages || page === this.currentPage)
        return;

      this.currentPage = page;
      await this.loadComments();
    }

    private showLoading(): void {
      this.isLoading = true;
      const overlay = document.getElementById("loading-overlay");
      if (overlay) overlay.style.display = "flex";
    }

    private hideLoading(): void {
      this.isLoading = false;
      const overlay = document.getElementById("loading-overlay");
      if (overlay) overlay.style.display = "none";
    }

    private showError(message: string): void {
      const banner = document.getElementById("error-banner");
      const messageEl = document.getElementById("error-message");
      if (banner && messageEl) {
        messageEl.textContent = message;
        banner.style.display = "flex";
      }
    }

    private hideError(): void {
      const banner = document.getElementById("error-banner");
      if (banner) banner.style.display = "none";
    }

    private showNotification(
      message: string,
      type: "success" | "error" = "success"
    ): void {
      const notification = document.createElement("div");
      notification.className = `notification ${type}`;
      notification.textContent = message;
      notification.style.cssText = `
        position: fixed; top: 20px; right: 20px; padding: 1rem 1.5rem;
        color: white; font-weight: 500; z-index: 10000; border-radius: 4px;
        background: ${type === "success" ? "#238636" : "#da3633"};
        animation: slideIn 0.3s ease;
      `;

      document.body.appendChild(notification);
      setTimeout(() => notification.remove(), 3000);
    }

    public destroy(): void {
      this.isInitialized = false;
    }
  }

  // Initialize singleton manager
  let commentDashboard: CommentModerationDashboard | null = null;

  document.addEventListener("DOMContentLoaded", async () => {
    try {
      console.log("üöÄ Comment moderation dashboard initializing...");

      commentDashboard = CommentModerationDashboard.getInstance();
      await commentDashboard.initialize();

      // Make globally available for pagination
      (window as any).commentDashboard = commentDashboard;

      console.log("‚úÖ Comment moderation dashboard initialized successfully");
    } catch (error) {
      console.error(
        "‚ùå Comment moderation dashboard initialization failed:",
        error
      );
    }
  });

  // Cleanup on page unload
  window.addEventListener("beforeunload", () => {
    if (commentDashboard) {
      commentDashboard.destroy();
    }
  });

  // Add animation styles
  if (!document.getElementById("comments-animations")) {
    const style = document.createElement("style");
    style.id = "comments-animations";
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
    `;
    document.head.appendChild(style);
  }
</script>
