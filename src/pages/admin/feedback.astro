---
import AdminLayout from "../../layouts/AdminLayout.astro";

const fallbackStats = {
  total: 0,
  pending: 0,
  resolved: 0,
  dismissed: 0,
  last30Days: 0,
  last7Days: 0,
  byType: {
    bug: 0,
    feature_request: 0,
    general: 0,
    complaint: 0,
  },
  recent: [],
  generatedAt: new Date().toISOString(),
};

const stats = fallbackStats;
---

<AdminLayout title="Feedback Management - TinkByte Admin">
  <div class="feedback-dashboard">
    <!-- Loading Overlay -->
    <div id="loading-overlay" class="loading-overlay" style="display: none;">
      <div class="loading-spinner">
        <div class="spinner-square"></div>
        <span>Loading feedback...</span>
      </div>
    </div>

    <!-- Error Banner -->
    <div id="error-banner" class="error-banner" style="display: none;">
      <svg
        width="20"
        height="20"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        stroke-width="2"
      >
        <circle cx="12" cy="12" r="10"></circle>
        <line x1="15" y1="9" x2="9" y2="15"></line>
        <line x1="9" y1="9" x2="15" y2="15"></line>
      </svg>
      <span id="error-message">Unable to load feedback data</span>
      <button id="retry-btn" class="retry-btn">
        <span class="btn-text">Retry</span>
        <div class="btn-spinner" style="display: none;">
          <div class="spinner-square small"></div>
        </div>
      </button>
    </div>

    <!-- Modern Header -->
    <div class="dashboard-header">
      <div class="header-content">
        <h1>Feedback Management</h1>
        <p>Monitor and respond to user feedback and suggestions</p>
      </div>
      <div class="header-actions">
        <a href="/admin/dashboard" class="nav-button">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M19 12H5M12 19l-7-7 7-7"></path>
          </svg>
          Back to Dashboard
        </a>
        <button class="export-button" id="export-btn">
          <svg
            width="16"
            height="16"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
            <polyline points="7,10 12,15 17,10"></polyline>
            <line x1="12" y1="15" x2="12" y2="3"></line>
          </svg>
          Export Feedback
        </button>
      </div>
    </div>

    <!-- Modern Metrics Grid -->
    <div class="metrics-grid" id="feedback-stats">
      <div class="metric-card primary">
        <div class="metric-header">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"
            ></path>
          </svg>
          <h3>Total Feedback</h3>
        </div>
        <div class="metric-value" data-metric="total-feedback">0</div>
        <div class="metric-change positive">
          <span data-metric="recent-feedback">Loading...</span>
        </div>
      </div>

      <div class="metric-card">
        <div class="metric-header">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <circle cx="12" cy="12" r="10"></circle>
            <path d="M12 6v6l4 2"></path>
          </svg>
          <h3>Pending Review</h3>
        </div>
        <div class="metric-value" data-metric="pending-feedback">0</div>
        <div class="metric-change neutral">
          <span>Needs attention</span>
        </div>
      </div>

      <div class="metric-card">
        <div class="metric-header">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"></path>
            <polyline points="22,4 12,14.01 9,11.01"></polyline>
          </svg>
          <h3>Resolved</h3>
        </div>
        <div class="metric-value" data-metric="resolved-feedback">0</div>
        <div class="metric-change positive">
          <span>Issues addressed</span>
        </div>
      </div>

      <div class="metric-card">
        <div class="metric-header">
          <svg
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
          >
            <path
              d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z"
            ></path>
          </svg>
          <h3>Bug Reports</h3>
        </div>
        <div class="metric-value" data-metric="bug-reports">0</div>
        <div class="metric-change neutral">
          <span>Critical issues</span>
        </div>
      </div>
    </div>

    <!-- Modern Filters and Controls -->
    <div class="feedback-controls">
      <div class="filter-section">
        <div class="filter-group">
          <label for="type-filter">Type:</label>
          <select id="type-filter" class="filter-select">
            <option value="">All Types</option>
            <option value="bug">Bug Reports</option>
            <option value="feature_request">Feature Requests</option>
            <option value="general">General Feedback</option>
            <option value="complaint">Complaints</option>
            <option value="suggestion">Suggestions</option>
          </select>
        </div>
        <div class="filter-group">
          <label for="status-filter">Status:</label>
          <select id="status-filter" class="filter-select">
            <option value="">All Status</option>
            <option value="pending">Pending</option>
            <option value="resolved">Resolved</option>
            <option value="dismissed">Dismissed</option>
          </select>
        </div>
        <div class="filter-group">
          <label for="search-input">Search:</label>
          <input
            type="text"
            id="search-input"
            class="search-input"
            placeholder="Search feedback..."
          />
        </div>
        <div class="filter-group">
          <label>&nbsp;</label>
          <button id="clear-filters" class="secondary-button"
            >Clear Filters</button
          >
        </div>
      </div>

      <div class="bulk-actions" id="bulk-actions" style="display: none;">
        <span class="selected-count" id="selected-count">0 selected</span>
        <button id="bulk-resolve" class="action-button">Mark Resolved</button>
        <button id="bulk-dismiss" class="action-button">Dismiss</button>
        <button id="bulk-delete" class="action-button">Delete</button>
      </div>
    </div>

    <!-- Modern Feedback List -->
    <div class="feedback-list-container">
      <div class="feedback-list" id="feedback-list">
        <div class="feedback-loading">
          <div class="spinner-square"></div>
          <span>Loading feedback...</span>
        </div>
      </div>

      <!-- Modern Pagination -->
      <div
        class="pagination-container"
        id="pagination-container"
        style="display: none;"
      >
        <div class="pagination-info" id="pagination-info"></div>
        <div class="pagination-controls" id="pagination-controls"></div>
      </div>
    </div>
  </div>
</AdminLayout>

<script>
  import { adminAPIManager } from "../../lib/admin-api.js";
  import { AuthState } from "../../lib/supabase.js";

  let currentPage = 1;
  let currentFilters = { type: "", status: "", search: "" };
  let selectedFeedback = new Set<string>();
  let feedbackData: any[] = [];

  // Initialize feedback management
  document.addEventListener("DOMContentLoaded", async () => {
    try {
      console.log("üöÄ Feedback management initializing...");
      await initializeFeedbackManagement();
    } catch (error) {
      console.error("Feedback management initialization error:", error);
      showError(
        "Failed to initialize feedback management: " +
          (error?.message || "Unknown error")
      );
    }
  });

  async function initializeFeedbackManagement() {
    showLoading();

    try {
      // Initialize singleton managers
      await adminAPIManager.initialize();

      const authState = AuthState.getInstance();
      await authState.initialize();

      // Load data using singleton
      await Promise.all([loadFeedbackStats(), loadFeedback()]);

      setupEventListeners();
      hideLoading();
      console.log("‚úÖ Feedback management initialized successfully");
    } catch (error) {
      console.error("‚ùå Feedback initialization failed:", error);
      showError(error.message || "Failed to initialize feedback management");
      hideLoading();
    }
  }

  function showLoading(): void {
    const overlay = document.getElementById("loading-overlay");
    if (overlay) (overlay as HTMLElement).style.display = "flex";
  }

  function hideLoading(): void {
    const overlay = document.getElementById("loading-overlay");
    if (overlay) (overlay as HTMLElement).style.display = "none";
  }

  function showError(message: string): void {
    const banner = document.getElementById("error-banner");
    const messageEl = document.getElementById("error-message");
    if (banner && messageEl) {
      messageEl.textContent = message;
      (banner as HTMLElement).style.display = "flex";
    }
  }

  function hideError(): void {
    const banner = document.getElementById("error-banner");
    if (banner) (banner as HTMLElement).style.display = "none";
  }

  async function loadFeedbackStats(): Promise<void> {
    try {
      // Use singleton manager
      const result = await adminAPIManager.getFeedbackStats();

      if (result.success && result.data) {
        updateStatsDisplay(result.data);
        console.log("‚úÖ Feedback stats loaded:", result.data);
      } else {
        throw new Error(result.error || "Failed to load feedback stats");
      }
    } catch (error) {
      console.error("‚ùå Failed to load feedback stats:", error);
      showNotification("Failed to load feedback statistics", "error");
    }
  }

  function updateStatsDisplay(stats: any): void {
    const metrics = {
      "total-feedback": stats.total || 0,
      "pending-feedback": stats.pending || 0,
      "resolved-feedback": stats.resolved || 0,
      "bug-reports": stats.byType?.bug || 0,
      "recent-feedback": `+${stats.last30Days || 0} this month`,
    };

    Object.entries(metrics).forEach(([key, value]) => {
      const elements = document.querySelectorAll(`[data-metric="${key}"]`);
      elements.forEach((el) => {
        if (el) el.textContent = value.toString();
      });
    });
  }

  async function loadFeedback(page = 1, filters = {}): Promise<void> {
    try {
      showLoading();
      hideError();

      // Use singleton manager
      const result = await adminAPIManager.getFeedback({
        page,
        limit: 20,
        ...filters,
      });

      if (result.success) {
        feedbackData = result.data || [];
        displayFeedback(feedbackData);
        updatePagination(result.pagination);
        console.log(`‚úÖ Loaded ${feedbackData.length} feedback items`);
      } else {
        throw new Error(result.error || "Failed to load feedback");
      }
    } catch (error: any) {
      console.error("‚ùå Feedback loading error:", error);
      showError(error.message || "Failed to load feedback data");
    } finally {
      hideLoading();
    }
  }

  function displayFeedback(feedback: any[]): void {
    const listContainer = document.getElementById("feedback-list");
    if (!listContainer) return;

    if (feedback.length === 0) {
      listContainer.innerHTML = `
      <div class="empty-state">
        <svg width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M21 11.5a8.38 8.38 0 0 1-.9 3.8 8.5 8.5 0 0 1-7.6 4.7 8.38 8.38 0 0 1-3.8-.9L3 21l1.9-5.7a8.38 8.38 0 0 1-.9-3.8 8.5 8.5 0 0 1 4.7-7.6 8.38 8.38 0 0 1 3.8-.9h.5a8.48 8.48 0 0 1 8 8v.5z"></path>
        </svg>
        <h3>No feedback found</h3>
        <p>No feedback matches your current filters.</p>
      </div>
    `;
      return;
    }

    listContainer.innerHTML = feedback
      .map(
        (item) => `
    <div class="feedback-item" data-id="${item.id}">
      <div class="feedback-checkbox">
        <input type="checkbox" id="feedback-${item.id}" value="${item.id}" onchange="toggleSelection('${item.id}')">
      </div>
      <div class="feedback-content" onclick="showFeedbackDetails('${item.id}')">
        <div class="feedback-header">
          <div class="feedback-type ${item.type}">${formatType(item.type)}</div>
          <div class="feedback-status ${item.status}">${formatStatus(item.status)}</div>
          <div class="feedback-date">${formatDate(item.created_at)}</div>
        </div>
        <div class="feedback-message">${truncateText(item.message, 150)}</div>
        <div class="feedback-meta">
          <span class="feedback-user">
            ${item.profiles?.display_name || "Anonymous User"}
          </span>
          ${item.user_id ? `<span class="feedback-email">User ID: ${item.user_id.substring(0, 8)}...</span>` : ""}
          ${item.resolved_by ? `<span class="feedback-resolver">Resolved by admin</span>` : ""}
        </div>
      </div>
      <div class="feedback-actions">
        <button onclick="updateFeedbackStatus('${item.id}', 'resolved')" class="action-btn success" title="Mark Resolved">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <polyline points="20,6 9,17 4,12"></polyline>
          </svg>
        </button>
        <button onclick="updateFeedbackStatus('${item.id}', 'dismissed')" class="action-btn warning" title="Dismiss">
          <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
    </div>
  `
      )
      .join("");
  }

  function formatType(type: string): string {
    const types: Record<string, string> = {
      bug: "Bug Report",
      feature_request: "Feature Request",
      general: "General",
      complaint: "Complaint",
      suggestion: "Suggestion",
    };
    return types[type] || type;
  }

  function formatStatus(status: string): string {
    return status.charAt(0).toUpperCase() + status.slice(1);
  }

  function formatDate(dateString: string): string {
    return new Date(dateString).toLocaleDateString();
  }

  function truncateText(text: string, length: number): string {
    return text.length > length ? text.substring(0, length) + "..." : text;
  }

  function toggleSelection(feedbackId: string): void {
    if (selectedFeedback.has(feedbackId)) {
      selectedFeedback.delete(feedbackId);
    } else {
      selectedFeedback.add(feedbackId);
    }
    updateBulkActions();
  }

  function updateBulkActions(): void {
    const bulkActions = document.getElementById("bulk-actions");
    const selectedCount = document.getElementById("selected-count");

    if (bulkActions && selectedCount) {
      if (selectedFeedback.size > 0) {
        (bulkActions as HTMLElement).style.display = "flex";
        selectedCount.textContent = `${selectedFeedback.size} selected`;
      } else {
        (bulkActions as HTMLElement).style.display = "none";
      }
    }
  }

  async function updateFeedbackStatus(
    feedbackId: string,
    status: "pending" | "resolved" | "dismissed",
    adminNotes?: string
  ): Promise<void> {
    try {
      // Use singleton manager
      const result = await adminAPIManager.updateFeedbackStatus(
        feedbackId,
        status,
        adminNotes
      );

      if (result.success) {
        showNotification(`Feedback ${status} successfully`, "success");
        await loadFeedback(currentPage, currentFilters);
        await loadFeedbackStats();
      } else {
        throw new Error(result.error);
      }
    } catch (error: any) {
      showNotification(`Failed to update feedback: ${error.message}`, "error");
    }
  }

  function showNotification(
    message: string,
    type: "success" | "error" = "success"
  ): void {
    const notification = document.createElement("div");
    notification.textContent = message;
    notification.style.cssText = `
      position: fixed; top: 20px; right: 20px; padding: 1rem 1.5rem;
      color: white; font-weight: 500; z-index: 10000; border-radius: 4px;
      background: ${type === "success" ? "#238636" : "#da3633"};
      animation: slideIn 0.3s ease;
    `;
    document.body.appendChild(notification);
    setTimeout(() => notification.remove(), 3000);
  }

  function updatePagination(pagination: any): void {
    const container = document.getElementById("pagination-container");
    const info = document.getElementById("pagination-info");
    const controls = document.getElementById("pagination-controls");

    if (!container || !info || !controls || !pagination) return;

    (container as HTMLElement).style.display = "flex";
    info.textContent = `Showing ${(pagination.page - 1) * pagination.limit + 1}-${Math.min(pagination.page * pagination.limit, pagination.total)} of ${pagination.total} items`;

    controls.innerHTML = `
      <button onclick="changePage(${pagination.page - 1})" ${!pagination.hasPrev ? "disabled" : ""}>Previous</button>
      <span>Page ${pagination.page} of ${pagination.totalPages}</span>
      <button onclick="changePage(${pagination.page + 1})" ${!pagination.hasNext ? "disabled" : ""}>Next</button>
    `;
  }

  function changePage(page: number): void {
    currentPage = page;
    loadFeedback(page, currentFilters);
  }

  function showFeedbackDetails(feedbackId: string): void {
    console.log("Show feedback details for:", feedbackId);
    // TODO: Implement modal or navigation to feedback details
  }

  function setupEventListeners(): void {
    console.log("üîß Setting up event listeners...");

    // Set up filter listeners
    const typeFilter = document.getElementById(
      "type-filter"
    ) as HTMLSelectElement;
    const statusFilter = document.getElementById(
      "status-filter"
    ) as HTMLSelectElement;
    const searchInput = document.getElementById(
      "search-input"
    ) as HTMLInputElement;

    [typeFilter, statusFilter].forEach((filter) => {
      if (filter) {
        filter.addEventListener("change", () => {
          currentFilters = {
            type: typeFilter?.value || "",
            status: statusFilter?.value || "",
            search: searchInput?.value || "",
          };
          currentPage = 1;
          loadFeedback(1, currentFilters);
        });
      }
    });

    if (searchInput) {
      let searchTimeout: number;
      searchInput.addEventListener("input", () => {
        clearTimeout(searchTimeout);
        searchTimeout = window.setTimeout(() => {
          currentFilters.search = searchInput.value;
          currentPage = 1;
          loadFeedback(1, currentFilters);
        }, 500);
      });
    }

    // Clear filters
    const clearFiltersBtn = document.getElementById("clear-filters");
    clearFiltersBtn?.addEventListener("click", () => {
      if (typeFilter) typeFilter.value = "";
      if (statusFilter) statusFilter.value = "";
      if (searchInput) searchInput.value = "";
      currentFilters = { type: "", status: "", search: "" };
      currentPage = 1;
      loadFeedback(1, currentFilters);
    });

    // Export functionality
    const exportBtn = document.getElementById("export-btn");
    if (exportBtn) {
      exportBtn.addEventListener("click", async () => {
        try {
          showLoading();
          // Use singleton manager
          const result = await adminAPIManager.exportFeedback(
            "csv",
            currentFilters
          );

          if (result.success && typeof result.data === "string") {
            const blob = new Blob([result.data], { type: "text/csv" });
            const url = window.URL.createObjectURL(blob);
            const a = document.createElement("a");
            a.href = url;
            a.download = `feedback-export-${new Date().toISOString().split("T")[0]}.csv`;
            document.body.appendChild(a);
            a.click();
            document.body.removeChild(a);
            window.URL.revokeObjectURL(url);
            showNotification("Feedback exported successfully", "success");
          } else {
            throw new Error(result.error || "Export failed");
          }
        } catch (error: any) {
          showNotification(`Export failed: ${error.message}`, "error");
        } finally {
          hideLoading();
        }
      });
    }

    // Retry button
    const retryBtn = document.getElementById("retry-btn");
    retryBtn?.addEventListener("click", async () => {
      hideError();
      await initializeFeedbackManagement();
    });

    // Bulk actions
    const bulkResolveBtn = document.getElementById("bulk-resolve");
    const bulkDismissBtn = document.getElementById("bulk-dismiss");
    const bulkDeleteBtn = document.getElementById("bulk-delete");

    bulkResolveBtn?.addEventListener("click", () =>
      handleBulkAction("resolved")
    );
    bulkDismissBtn?.addEventListener("click", () =>
      handleBulkAction("dismissed")
    );
    bulkDeleteBtn?.addEventListener("click", () => handleBulkAction("delete"));

    console.log("‚úÖ Event listeners setup complete");
  }

  async function handleBulkAction(action: string): Promise<void> {
    if (selectedFeedback.size === 0) {
      showNotification("No feedback selected", "error");
      return;
    }

    const confirmMessage = `Are you sure you want to ${action} ${selectedFeedback.size} feedback items?`;
    if (!confirm(confirmMessage)) return;

    try {
      const feedbackIds = Array.from(selectedFeedback);

      // Use singleton manager for bulk operations
      const result = await adminAPIManager.bulkUpdateFeedback(
        feedbackIds,
        action as any
      );

      if (result.success) {
        showNotification(
          `Successfully ${action} ${feedbackIds.length} feedback items`,
          "success"
        );
        selectedFeedback.clear();
        updateBulkActions();
        await loadFeedback(currentPage, currentFilters);
        await loadFeedbackStats();
      } else {
        throw new Error(result.error);
      }
    } catch (error: any) {
      showNotification(`Bulk ${action} failed: ${error.message}`, "error");
    }
  }

  // Declare global functions for onclick handlers
  (window as any).toggleSelection = toggleSelection;
  (window as any).updateFeedbackStatus = updateFeedbackStatus;
  (window as any).changePage = changePage;
  (window as any).showFeedbackDetails = showFeedbackDetails;

  // Add animation styles
  if (!document.getElementById("feedback-animations")) {
    const style = document.createElement("style");
    style.id = "feedback-animations";
    style.textContent = `
      @keyframes slideIn {
        from { transform: translateX(100%); opacity: 0; }
        to { transform: translateX(0); opacity: 1; }
      }
    `;
    document.head.appendChild(style);
  }
</script>
